{"version":3,"sources":["components/Home.js","services/UserService.js","RegisterPerson.js","components/WhiteBoardApp.js","react/PatientNavBar.js","components/PatientProfile.js","components/Login.js","react/DoctorNavBar.js","components/DoctorProfile.js","react/AdminNavBar.js","components/AdminStaffProfile.js","components/registrations/PatientProflieReg.js","components/registrations/DoctorProfileReg.js","components/registrations/AdminStaffProfileReg.js","components/registrations/PersonAddressReg.js","components/registrations/PersonPhoneReg.js","components/registrations/AppointmentReg.js","components/registrations/PrescriptionReg.js","components/views/ViewPersonAddrPhone.js","components/registrations/PatientAllergyReg.js","components/registrations/PatientInsuranceReg.js","components/views/ViewPatientAppointments.js","components/views/ViewAllergyPatientProfile.js","components/views/ViewDoctorAppointments.js","components/views/ViewPatientInsurance.js","components/views/ViewDoctorPrescriptions.js","components/views/ViewPatientPrescriptions.js","components/updates/UpdatePatientPersonalData.js","components/removes/DeletePersonAddress.js","components/removes/DeletePersonPhone.js","components/updates/UpdatePersonAddress.js","components/updates/UpdatePersonPhone.js","components/updates/UpdateDoctorPersonalData.js","components/removes/DeletePrescription.js","components/updates/UpdateAppointment.js","components/viewAll/ViewAllDoctors.js","components/updates/UpdatePatientAllergy.js","components/updates/UpdatePatientInsurance.js","components/viewAll/ViewAllPatients.js","components/viewAll/ViewAllAdminStaff.js","components/registrations/SalaryReg.js","components/views/ViewStaffSalary.js","components/removes/DeletePatientAllergy.js","components/removes/DeletePatientInsurance.js","components/removes/DeleteDoctorAppointment.js","components/viewAll/ViewAllAddresses.js","components/viewAll/ViewAllPhones.js","components/viewAll/ViewAllAppointments.js","components/viewAll/ViewAllPrescriptions.js","components/viewAll/ViewAllSalaries.js","components/viewAll/ViewAllAllergies.js","components/viewAll/ViewAllInsurances.js","components/adminUpdates/DoctorUpdateByAdmin.js","components/updates/UpdateAdminStaffPersonalData.js","components/adminUpdates/PatientUpdateByAdmin.js","components/adminUpdates/AdminStaffUpdateByAdmin.js","components/adminUpdates/AddressUpdateByAdmin.js","components/adminUpdates/PhoneUpdateByAdmin.js","components/adminUpdates/AppointmentUpdateByAdmin.js","components/adminUpdates/AllergyUpdateByAdmin.js","components/adminUpdates/InsuranceUpdateByAdmin.js","components/adminUpdates/SalaryUpdateByAdmin.js","components/adminRemoves/AddressRemoveByAdmin.js","components/adminRemoves/PrescriptionRemoveByAdmin.js","components/adminRemoves/AppointmentRemoveByAdmin.js","components/adminRemoves/AllergyRemoveByAdmin.js","components/adminRemoves/InsuranceRemoveByAdmin.js","components/adminRemoves/PhoneRemoveByAdmin.js","components/adminRemoves/DoctorRemoveByAdmin.js","components/adminRemoves/PatientRemoveByAdmin.js","AppManagerContainer.js","DarkModeToggle.js","App.js","serviceWorker.js","index.js"],"names":["Home","state","countries","searchedCountry","search","fetchCoronaAPI","fetch","method","headers","then","response","json","country","setState","console","log","catch","err","fetchCoronaAPICountry","this","map","nation","index","confirmed","critical","deaths","recovered","key","Nav","variant","activeKey","onSelect","handleSelect","Item","Link","eventKey","href","title","Form","inline","FormControl","value","onChange","e","target","type","placeholder","Button","onClick","style","color","id","renderTableData","React","Component","register","user","body","JSON","stringify","credentials","res","text","length","parse","error","login","profile","logout","registerPatientInfo","registerDoctorInfo","registerAdminStaffInfo","registerPersonAddr","username","registerPersonPhone","registerAppointment","appointment","docUsername","patUsername","registerPrescription","prescription","registerMedication","medicine","presDate","registerMedicalTest","medicalTest","registerPatientAllergy","registerPatientInsurance","updatePatientInfo","updateDoctorInfo","updateAdminStaffInfo","updatePersonAddress","address","addressID","updatePersonPhone","phone","phoneId","updateAppointment","appointmentId","updateSalary","salary","deletePersonAddress","deletePersonPhone","deletePrescription","prescriptionId","updatePatientAllergy","allergy","allergyId","updatePatientInsurance","insurance","insuranceId","createSalaryForStaff","deletePatientAllergy","deletePatientInsurance","deleteDoctorAppointments","deleteDoctor","doctorId","deletePatient","patientId","RegisterPerson","password","verifyPassword","userKey","userType","validate","alert","newUser","isEmpty","props","history","push","event","obj","hasOwnProperty","className","url","WhiteBoardApp","questions","findAllQuestions","allQuestions","question","firstName","lastName","PatientNavBar","window","location","status","NavDropdown","Divider","class","PatientProfile","loadedProfile","dateOfBirth","dateOfAdmission","medicalHistory","gender","Login","currentUser","DoctorNavBar","DoctorProfile","joiningDate","education","designation","certification","department","fill","AdminStaffProfile","jobTitle","jobDescription","PatientProfileReg","isValidDate","dateString","match","d","Date","dNum","getTime","toISOString","slice","validatePatientProfile","handleSelectChange","patient","onClickCapture","DoctorProfileReg","validateDoctorProfile","doctor","handleSelectGenderChange","handleSelectDeptChange","AdminStaffProfileReg","validateAdminStaffProfile","adminStaff","PersonAddressReg","house","street1","street2","city","zip","validatePatientAddress","renderNavBar","PersonPhoneReg","isPrimary","validatePatientPhone","handleSelectPhoneChange","AppointmentReg","dateOfAppointment","notes","time","validateAppointment","PrescriptionReg","prescriptionDate","refillData","substitutionPermitted","medicineName","quantity","price","dosage","testType","testResults","testDate","medicationRegister","medication","medicalTestRegistration","validatePrescription","validateMedication","validateMedicalTest","handleSelectSubstitutionChange","medicationDate","ViewPersonAddrPhone","phones","addresses","findAllAddresses","allAddresses","findAllPhones","allPhones","PatientAllergyReg","allergyInfo","allergyCause","validateAllergy","insuranceDetails","insuranceType","validateInsurance","ViewPatientAppointments","appointments","findAllAppointments","allAppointments","ViewAllergyPatientProfile","allergies","findAllAllergies","allAllergies","ViewDoctorAppointments","date","appointmentsByDate","appointmentsByPatient","findAllAppointmentsByDoctorOnDate","findAllAppointmentsByDoctorToPatient","validateSearch","patientName","patientUserName","ViewPatientInsurance","insurances","findAllInsurances","allInsurances","prescriptions","findAllPrescriptions","allPrescriptions","medicalTests","medications","UpdatePatientPersonalData","DeletePersonAddress","addressId","deleteAddress","validateDeleteAddr","pattern","DeletePersonPhone","deletePhone","validateDeletePhone","updateAddress","validateUpdateAddr","UpdatePersonPhone","updatePhone","validateUpdatePhone","UpdateDoctorPersonalData","validateDeletePrescription","validateUpdateAppointment","ViewAllDoctors","doctors","findAllDoctors","allDoctors","UpdatePatientAllergy","updateAllergy","validateUpdateAllergy","UpdatePatientInsurance","updateInsurance","validateUpdateInsurance","ViewAllPatients","patients","findAllPatients","allPatients","ViewAllAdminStaff","findAllAdminStaff","admin","SalaryReg","staffUsername","baseSalary","allowances","epf","validateSalary","ViewStaffSalary","findSalaryByStaff","DeletePatientAllergy","deleteAllergy","validateDeleteAllergy","DeletePatientInsurance","deleteInsurance","validateDeleteInsurance","DeleteDoctorAppointment","deleteAppointment","validateDeleteAppointments","ViewAllAddresses","person","ViewAllPhones","personId","ViewAllAppointments","doctorName","ViewAllPrescriptions","salaries","findAllSalaries","allSalaries","staffId","staff","staffName","ViewAllAllergies","ViewAllInsurances","DoctorUpdateByAdmin","doctorUsername","UpdateAdminStaffPersonalData","patientUsername","AdminStaffUpdateByAdmin","adminUsername","UpdateAddressByAdmin","UpdatePhoneByAdmin","AppointmentUpdateByAdmin","AllergyUpdateByAdmin","InsuranceUpdateByAllergies","SalaryUpdateByAdmin","AddressRemoveByAdmin","PrescriptionRemoveByAdmin","deletePrescriptions","AppointmentRemoveByAdmin","deleteAppointments","validateDeleteAppointment","AllergyRemoveByAdmin","deleteAllergies","InsuranceRemoveByAdmin","deleteInsurances","PhoneRemoveByAdmin","DoctorRemoveByAdmin","validateDeleteDoctor","PatientRemoveByAdmin","validateDeletePatient","AppManagerContainer","layout","path","exact","component","Register","ViewDoctorPrescriptions","PatientInsuranceReg","ViewPatientPrescriptions","UpdatePersonAddress","UpdateAppointment","DeletePrescription","ViewAllSalaries","PatientUpdateByAdmin","InsuranceUpdateByAdmin","DarkModeToggle","localStorage","getItem","document","classList","add","darkMode","handleModeChange","bind","remove","setItem","marginTop","App","Boolean","hostname","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.1f0b43c3.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Nav from \"react-bootstrap/Nav\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport FormControl from \"react-bootstrap/FormControl\";\r\nimport {Button} from \"react-bootstrap\";\r\n\r\nexport default class Home extends React.Component {\r\n\r\n    state = {\r\n        countries: [],\r\n        searchedCountry: [],\r\n\r\n        search: ''\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.fetchCoronaAPI()\r\n    }\r\n\r\n    fetchCoronaAPI = () => {\r\n        fetch(\"https://covid19-api.com/country/all?format=json\", {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"x-rapidapi-host\": \"covid-19-data.p.rapidapi.com\",\r\n                \"x-rapidapi-key\": \"daf0f3193bmsh4bcce10f9ab8ff6p192664jsnaa8ebf701dd3\"\r\n            }\r\n        }).then(response => response.json())\r\n            .then(country => {\r\n                this.setState({\r\n                    countries: country\r\n                })\r\n                console.log(this.state.countries)\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            });\r\n    }\r\n\r\n    fetchCoronaAPICountry = () => {\r\n        fetch(\"https://covid19-api.com/country?name=\" + this.state.search + \"&format=json\", {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"x-rapidapi-host\": \"covid-19-data.p.rapidapi.com\",\r\n                \"x-rapidapi-key\": \"daf0f3193bmsh4bcce10f9ab8ff6p192664jsnaa8ebf701dd3\"\r\n            }\r\n        }).then(response => response.json())\r\n            .then(country => {\r\n                this.setState({\r\n                    searchedCountry: country\r\n                })\r\n                console.log(this.state.countries)\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            });\r\n    }\r\n\r\n\r\n    renderTableData() {\r\n        return this.state.countries.map((nation, index) => {\r\n            const {country, confirmed, critical, deaths, recovered} = nation //destructuring\r\n            return (\r\n                <tr key={1}>\r\n                    <td>{country}</td>\r\n                    <td>{confirmed}</td>\r\n                    <td>{critical}</td>\r\n                    <td>{deaths}</td>\r\n                    <td>{recovered}</td>\r\n                </tr>\r\n            )\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div>\r\n                    <Nav\r\n                        variant=\"pills\"\r\n                        activeKey=\"1\"\r\n                        onSelect={this.handleSelect}\r\n                    >\r\n                        <Nav.Item>\r\n                            <Nav.Link eventKey=\"1\" href=\"/\">\r\n                                HOME\r\n                            </Nav.Link>\r\n                        </Nav.Item>\r\n                        <Nav.Item>\r\n                            <Nav.Link eventKey=\"2\"\r\n                                      href=\"/login\"\r\n                                      title=\"Item\">\r\n                                LOGIN\r\n                            </Nav.Link>\r\n                        </Nav.Item>\r\n                        <Nav.Item>\r\n                            <Nav.Link eventKey=\"3\"\r\n                                      href=\"/register\">\r\n                                REGISTER\r\n                            </Nav.Link>\r\n                        </Nav.Item>\r\n                        <Form inline>\r\n                            <FormControl\r\n                                value={this.state.search}\r\n                                onChange={(e) => this.setState({\r\n                                    search: e.target.value\r\n                                })}\r\n                                type=\"text\"\r\n                                placeholder=\"Search country\"/>\r\n                            <Button\r\n                                onClick={this.fetchCoronaAPICountry}\r\n                                variant={\"outline-primary\"}>Search</Button>\r\n                        </Form>\r\n                    </Nav>\r\n                </div>\r\n                <br/>\r\n                <ul>{this.state.searchedCountry\r\n                    .map(\r\n                        country =>\r\n                            <li style={{color: \"darkcyan\"}}\r\n                                key={0}>\r\n                                <h4>COVID-19 DATA </h4>\r\n                                <p><b>Country:</b> {country.country}</p>\r\n                                <p><b>Confirmed :</b> {country.confirmed}</p>\r\n                                <p><b>Critical :</b> {country.critical}</p>\r\n                                <p><b>Deaths :</b> {country.deaths}</p>\r\n                                <p><b>Recovered :</b> {country.recovered}</p>\r\n                            </li>\r\n                    )\r\n                }</ul>\r\n                <hr/>\r\n                <h2>Health and Wellness Management Console</h2>\r\n                <div>\r\n                    <hr/>\r\n                    <h4>COVID-19 Live Count:</h4>\r\n                    <br/>\r\n                    <div>\r\n                        <table id='table002'>\r\n                            <tbody>\r\n                            <th>Country</th>\r\n                            <th>Confirmed</th>\r\n                            <th>Critical</th>\r\n                            <th>Deaths</th>\r\n                            <th>Recovered</th>\r\n                            {this.renderTableData()}\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                    <hr/>\r\n                    <br/>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","export const register = (user) =>\r\n    fetch(`register`, {\r\n        method: 'POST',\r\n        body: JSON.stringify(user),\r\n        headers: {\r\n            'content-type': 'application/json'\r\n        },\r\n        credentials: \"include\"\r\n    }).then((res) => res.text())\r\n        .then((text) => text.length ? JSON.parse(text) : {})\r\n        .catch((error) => {\r\n            throw error;\r\n        });\r\n\r\nexport const login = (user) =>\r\n    fetch(`login`, {\r\n        method: 'POST',\r\n        body: JSON.stringify(user),\r\n        headers: {\r\n            'content-type': 'application/json'\r\n        },\r\n        credentials: \"include\"\r\n    }).then((res) => res.text())\r\n        .then((text) => text.length ? JSON.parse(text) : {})\r\n        .catch((error) => {\r\n            throw error;\r\n        });\r\n\r\nexport const profile = () =>\r\n    fetch(`profile`, {\r\n        method: 'POST',\r\n        credentials: \"include\"\r\n    }).then(response => response.json())\r\n\r\nexport const logout = () =>\r\n    fetch(`logout`, {\r\n        method: 'POST',\r\n        credentials: \"include\"\r\n    })\r\n\r\n\r\nexport const registerPatientInfo = (user) =>\r\n    fetch(`api/patient/create`, {\r\n        method: 'POST',\r\n        body: JSON.stringify(user),\r\n        headers: {\r\n            'content-type': 'application/json'\r\n        },\r\n        credentials: \"include\"\r\n    }).then((res) => res.text())\r\n        .then((text) => text.length ? JSON.parse(text) : {})\r\n        .catch((error) => {\r\n            throw error;\r\n        });\r\n\r\nexport const registerDoctorInfo = (user) =>\r\n    fetch(`api/doctor/create`, {\r\n        method: 'POST',\r\n        body: JSON.stringify(user),\r\n        headers: {\r\n            'content-type': 'application/json'\r\n        },\r\n        credentials: \"include\"\r\n    }).then((res) => res.text())\r\n        .then((text) => text.length ? JSON.parse(text) : {})\r\n        .catch((error) => {\r\n            throw error;\r\n        });\r\n\r\nexport const registerAdminStaffInfo = (user) =>\r\n    fetch(`api/adminStaff/create`, {\r\n        method: 'POST',\r\n        body: JSON.stringify(user),\r\n        headers: {\r\n            'content-type': 'application/json'\r\n        },\r\n        credentials: \"include\"\r\n    }).then((res) => res.text())\r\n        .then((text) => text.length ? JSON.parse(text) : {})\r\n        .catch((error) => {\r\n            throw error;\r\n        });\r\n\r\nexport const registerPersonAddr = (user, username) =>\r\n    fetch(`api/person/address/create/` + username, {\r\n        method: 'POST',\r\n        body: JSON.stringify(user),\r\n        headers: {\r\n            'content-type': 'application/json'\r\n        },\r\n        credentials: \"include\"\r\n    }).then((res) => res.text())\r\n        .then((text) => text.length ? JSON.parse(text) : {})\r\n        .catch((error) => {\r\n            throw error;\r\n        });\r\n\r\nexport const registerPersonPhone = (user, username) =>\r\n    fetch(`api/person/phone/create/` + username, {\r\n        method: 'POST',\r\n        body: JSON.stringify(user),\r\n        headers: {\r\n            'content-type': 'application/json'\r\n        },\r\n        credentials: \"include\"\r\n    }).then((res) => res.text())\r\n        .then((text) => text.length ? JSON.parse(text) : {})\r\n        .catch((error) => {\r\n            throw error;\r\n        });\r\n\r\nexport const registerAppointment = (appointment, docUsername, patUsername) =>\r\n    fetch(`api/doctor/` + docUsername + '/patient/' + patUsername + `/appointment`, {\r\n        method: 'POST',\r\n        body: JSON.stringify(appointment),\r\n        headers: {\r\n            'content-type': 'application/json'\r\n        },\r\n        credentials: \"include\"\r\n    }).then((res) => res.text())\r\n        .then((text) => text.length ? JSON.parse(text) : {})\r\n        .catch((error) => {\r\n            throw error;\r\n        });\r\n\r\n\r\nexport const registerPrescription = (prescription, docUsername, patUsername) =>\r\n    fetch(`api/doctor/` + docUsername + '/patient/' + patUsername + `/prescription`, {\r\n        method: 'POST',\r\n        body: JSON.stringify(prescription),\r\n        headers: {\r\n            'content-type': 'application/json'\r\n        },\r\n        credentials: \"include\"\r\n    }).then((res) => res.text())\r\n        .then((text) => text.length ? JSON.parse(text) : {})\r\n        .catch((error) => {\r\n            throw error;\r\n        });\r\n\r\nexport const registerMedication = (medicine, docUsername, patUsername, presDate) =>\r\n    fetch(\"api/doctor/\" + docUsername + \"/patient/\" + patUsername + \"/date/\" + presDate + \"/medication\", {\r\n        method: 'POST',\r\n        body: JSON.stringify(medicine),\r\n        headers: {\r\n            'content-type': 'application/json'\r\n        },\r\n        credentials: \"include\"\r\n    }).then((res) => res.text())\r\n        .then((text) => text.length ? JSON.parse(text) : {})\r\n        .catch((error) => {\r\n            throw error;\r\n        });\r\n\r\nexport const registerMedicalTest = (medicalTest, docUsername, patUsername, presDate) =>\r\n    fetch(\"api/doctor/\" + docUsername + \"/patient/\" + patUsername + \"/date/\" + presDate + \"/medicalTest\", {\r\n        method: 'POST',\r\n        body: JSON.stringify(medicalTest),\r\n        headers: {\r\n            'content-type': 'application/json'\r\n        },\r\n        credentials: \"include\"\r\n    }).then((res) => res.text())\r\n        .then((text) => text.length ? JSON.parse(text) : {})\r\n        .catch((error) => {\r\n            throw error;\r\n        });\r\n\r\nexport const registerPatientAllergy = (user, username) =>\r\n    fetch(`api/patient/allergy/create/` + username, {\r\n        method: 'POST',\r\n        body: JSON.stringify(user),\r\n        headers: {\r\n            'content-type': 'application/json'\r\n        },\r\n        credentials: \"include\"\r\n    }).then((res) => res.text())\r\n        .then((text) => text.length ? JSON.parse(text) : {})\r\n        .catch((error) => {\r\n            throw error;\r\n        });\r\n\r\nexport const registerPatientInsurance = (user, username) =>\r\n    fetch(`api/patient/insurance/create/` + username, {\r\n        method: 'POST',\r\n        body: JSON.stringify(user),\r\n        headers: {\r\n            'content-type': 'application/json'\r\n        },\r\n        credentials: \"include\"\r\n    }).then((res) => res.text())\r\n        .then((text) => text.length ? JSON.parse(text) : {})\r\n        .catch((error) => {\r\n            throw error;\r\n        });\r\n\r\n\r\nexport const updatePatientInfo = (user, username) =>\r\n    fetch(`api/patient/update/` + username, {\r\n        method: 'PUT',\r\n        body: JSON.stringify(user),\r\n        headers: {\r\n            'content-type': 'application/json'\r\n        },\r\n        credentials: \"include\"\r\n    }).then((res) => res.text())\r\n        .then((text) => text.length ? JSON.parse(text) : {})\r\n        .catch((error) => {\r\n            throw error;\r\n        });\r\n\r\nexport const updateDoctorInfo = (user, username) =>\r\n    fetch(`api/doctor/update/` + username, {\r\n        method: 'PUT',\r\n        body: JSON.stringify(user),\r\n        headers: {\r\n            'content-type': 'application/json'\r\n        },\r\n        credentials: \"include\"\r\n    }).then((res) => res.text())\r\n        .then((text) => text.length ? JSON.parse(text) : {})\r\n        .catch((error) => {\r\n            throw error;\r\n        });\r\n\r\nexport const updateAdminStaffInfo = (user, username) =>\r\n    fetch(`api/adminStaff/update/` + username, {\r\n        method: 'PUT',\r\n        body: JSON.stringify(user),\r\n        headers: {\r\n            'content-type': 'application/json'\r\n        },\r\n        credentials: \"include\"\r\n    }).then((res) => res.text())\r\n        .then((text) => text.length ? JSON.parse(text) : {})\r\n        .catch((error) => {\r\n            throw error;\r\n        });\r\n\r\nexport const updatePersonAddress = (address, addressID) =>\r\n    fetch(`api/person/update/address/` + addressID, {\r\n        method: 'PUT',\r\n        body: JSON.stringify(address),\r\n        headers: {\r\n            'content-type': 'application/json'\r\n        },\r\n        credentials: \"include\"\r\n    }).then((res) => res.text())\r\n        .then((text) => text.length ? JSON.parse(text) : {})\r\n        .catch((error) => {\r\n            throw error;\r\n        });\r\n\r\nexport const updatePersonPhone = (phone, phoneId) =>\r\n    fetch(`api/person/update/phone/` + phoneId, {\r\n        method: 'PUT',\r\n        body: JSON.stringify(phone),\r\n        headers: {\r\n            'content-type': 'application/json'\r\n        },\r\n        credentials: \"include\"\r\n    }).then((res) => res.text())\r\n        .then((text) => text.length ? JSON.parse(text) : {})\r\n        .catch((error) => {\r\n            throw error;\r\n        });\r\n\r\nexport const updateAppointment = (appointment, appointmentId) =>\r\n    fetch(`api/update/appointment/` + appointmentId, {\r\n        method: 'PUT',\r\n        body: JSON.stringify(appointment),\r\n        headers: {\r\n            'content-type': 'application/json'\r\n        },\r\n        credentials: \"include\"\r\n    }).then((res) => res.text())\r\n        .then((text) => text.length ? JSON.parse(text) : {})\r\n        .catch((error) => {\r\n            throw error;\r\n        });\r\n\r\nexport const updateSalary = (salary, username) =>\r\n    fetch(`api/staff/salary/update/` + username, {\r\n        method: 'PUT',\r\n        body: JSON.stringify(salary),\r\n        headers: {\r\n            'content-type': 'application/json'\r\n        },\r\n        credentials: \"include\"\r\n    }).then((res) => res.text())\r\n        .then((text) => text.length ? JSON.parse(text) : {})\r\n        .catch((error) => {\r\n            throw error;\r\n        });\r\n\r\n\r\nexport const deletePersonAddress = (addressID) =>\r\n    fetch(`api/person/address/` + addressID, {\r\n        method: 'DELETE',\r\n    }).then((res) => res.text())\r\n        .then((text) => text.length ? JSON.parse(text) : {})\r\n        .catch((error) => {\r\n            throw error;\r\n        });\r\n\r\nexport const deletePersonPhone = (phoneId) =>\r\n    fetch(`api/person/phone/` + phoneId, {\r\n        method: 'DELETE',\r\n    }).then((res) => res.text())\r\n        .then((text) => text.length ? JSON.parse(text) : {})\r\n        .catch((error) => {\r\n            throw error;\r\n        });\r\n\r\nexport const deletePrescription = (prescriptionId) =>\r\n    fetch(`api/prescription/delete/` + prescriptionId, {\r\n        method: 'DELETE',\r\n    }).then((res) => res.text())\r\n        .then((text) => text.length ? JSON.parse(text) : {})\r\n        .catch((error) => {\r\n            throw error;\r\n        });\r\n\r\nexport const updatePatientAllergy = (allergy, allergyId) =>\r\n    fetch(`api/patient/update/allergy/` + allergyId, {\r\n        method: 'PUT',\r\n        body: JSON.stringify(allergy),\r\n        headers: {\r\n            'content-type': 'application/json'\r\n        },\r\n        credentials: \"include\"\r\n    }).then((res) => res.text())\r\n        .then((text) => text.length ? JSON.parse(text) : {})\r\n        .catch((error) => {\r\n            throw error;\r\n        });\r\n\r\nexport const updatePatientInsurance = (insurance, insuranceId) =>\r\n    fetch(`api/patient/update/insurance/` + insuranceId, {\r\n        method: 'PUT',\r\n        body: JSON.stringify(insurance),\r\n        headers: {\r\n            'content-type': 'application/json'\r\n        },\r\n        credentials: \"include\"\r\n    }).then((res) => res.text())\r\n        .then((text) => text.length ? JSON.parse(text) : {})\r\n        .catch((error) => {\r\n            throw error;\r\n        });\r\n\r\nexport const createSalaryForStaff = (salary, username) =>\r\n    fetch(`api/staff/salary/create/` + username, {\r\n        method: 'POST',\r\n        body: JSON.stringify(salary),\r\n        headers: {\r\n            'content-type': 'application/json'\r\n        },\r\n        credentials: \"include\"\r\n    }).then((res) => res.text())\r\n        .then((text) => text.length ? JSON.parse(text) : {})\r\n        .catch((error) => {\r\n            throw error;\r\n        });\r\n\r\nexport const deletePatientAllergy = (allergyId) =>\r\n    fetch(`api/patient/delete/allergy/` + allergyId, {\r\n        method: 'DELETE',\r\n    }).then((res) => res.text())\r\n        .then((text) => text.length ? JSON.parse(text) : {})\r\n        .catch((error) => {\r\n            throw error;\r\n        });\r\n\r\nexport const deletePatientInsurance = (insuranceId) =>\r\n    fetch(`api/patient/delete/insurance/` + insuranceId, {\r\n        method: 'DELETE',\r\n    }).then((res) => res.text())\r\n        .then((text) => text.length ? JSON.parse(text) : {})\r\n        .catch((error) => {\r\n            throw error;\r\n        });\r\n\r\nexport const deleteDoctorAppointments = (appointmentId) =>\r\n    fetch(`api/appointment/delete/` + appointmentId, {\r\n        method: 'DELETE',\r\n    }).then((res) => res.text())\r\n        .then((text) => text.length ? JSON.parse(text) : {})\r\n        .catch((error) => {\r\n            throw error;\r\n        });\r\n\r\nexport const deleteDoctor = (doctorId) =>\r\n    fetch(`api/doctor/delete/` + doctorId, {\r\n        method: 'DELETE',\r\n    }).then((res) => res.text())\r\n        .then((text) => text.length ? JSON.parse(text) : {})\r\n        .catch((error) => {\r\n            throw error;\r\n        });\r\n\r\nexport const deletePatient = (patientId) =>\r\n    fetch(`api/patient/delete/` + patientId, {\r\n        method: 'DELETE',\r\n    }).then((res) => res.text())\r\n        .then((text) => text.length ? JSON.parse(text) : {})\r\n        .catch((error) => {\r\n            throw error;\r\n        });","import React from \"react\";\r\n\r\nimport {register} from \"./services/UserService\";\r\n\r\nexport default class RegisterPerson extends React.Component {\r\n    state = {\r\n        username: '',\r\n        password: '',\r\n        verifyPassword: '',\r\n        userKey: '',\r\n        userType: 'Patient'\r\n    }\r\n\r\n    validate = () => {\r\n        if (this.state.password !== this.state.verifyPassword) {\r\n            alert(\"Password doesn't match :(\")\r\n            return false\r\n        }\r\n        if (this.state.username === \"\") {\r\n            alert(\"Username cannot be empty :(\")\r\n            return false\r\n        }\r\n        if (this.state.password === \"\") {\r\n            alert(\"Password cannot be empty :(\")\r\n            return false\r\n        }\r\n        if (this.state.verifyPassword === \"\") {\r\n            alert(\"Verify password cannot be empty :(\")\r\n            return false\r\n        }\r\n        if (this.state.userKey === \"\") {\r\n            alert(\"User Key password cannot be empty :(\")\r\n            return false\r\n        } else {\r\n            this.register(this.state)\r\n        }\r\n        ;\r\n    }\r\n\r\n\r\n    isEmpty(obj) {\r\n        for (const key in obj) {\r\n            if (obj.hasOwnProperty(key))\r\n                return false;\r\n        }\r\n        return true;\r\n    };\r\n\r\n    register = (user) =>\r\n        register(user)\r\n            .then(newUser => {\r\n                if (this.isEmpty(newUser)) {\r\n                    alert(\"Username is already taken or Key is wrong :(\" +\r\n                        \"Please try with another username or user key\")\r\n                } else {\r\n                    if (newUser.userType === \"Patient\") {\r\n                        this.props.history.push(\"/patientProfileReg\")\r\n                    }\r\n                    else if (newUser.userType === \"Doctor\") {\r\n                        this.props.history.push(\"/doctorProfileReg\")\r\n                    }\r\n                    else if (newUser.userType === \"Admin Staff\") {\r\n                        this.props.history.push(\"/adminStaffProfileReg\")\r\n                    }\r\n                }\r\n            })\r\n\r\n    handleSelect = event => {\r\n        this.setState({userType: event.target.value});\r\n        console.log(this.state)\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <h1>REGISTER</h1>\r\n                <input\r\n                    value={this.state.username}\r\n                    onChange={(e) => this.setState({\r\n                        username: e.target.value\r\n                    })}\r\n                    className={\"form-control\"}\r\n                    placeholder={\"username\"}/>\r\n                <br/>\r\n                <input\r\n                    value={this.state.password}\r\n                    onChange={(e) => this.setState({\r\n                        password: e.target.value\r\n                    })}\r\n                    className={`form-control`}\r\n                    type={\"password\"}\r\n                    placeholder={\"password\"}/>\r\n                <br/>\r\n\r\n                <input\r\n                    value={this.state.verifyPassword}\r\n                    onChange={(e) => this.setState({\r\n                        verifyPassword: e.target.value\r\n                    })}\r\n                    className={`form-control`}\r\n                    type={\"password\"}\r\n                    placeholder={\"verify password\"}/>\r\n                <br/>\r\n\r\n                <input\r\n                    value={this.state.userKey}\r\n                    onChange={(e) => this.setState({\r\n                        userKey: e.target.value\r\n                    })}\r\n                    className={`form-control`}\r\n                    type={\"userKey\"}\r\n                    placeholder={\"One Time User Password (OTP)\"}/>\r\n                <br/>\r\n                <div>\r\n                    <select\r\n                        className={\"form-control\"}\r\n                        value={this.state.userType}\r\n                        onChange={this.handleSelect}>\r\n                        <option>Patient</option>\r\n                        <option>Doctor</option>\r\n                        <option>Admin Staff</option>\r\n                    </select>\r\n                </div>\r\n                <br/>\r\n                <button\r\n                    // onClick={() => this.register(this.state)}\r\n                    onClick={this.validate}\r\n                    className=\"btn btn-primary btn-block\">\r\n                    REGISTER\r\n                </button>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from \"react\";\r\n\r\nconst url = \"users/find/all\";\r\nexport default class WhiteBoardApp extends React.Component {\r\n    state = {\r\n        questions: []\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.findAllQuestions()\r\n    }\r\n\r\n    findAllQuestions = () =>\r\n        fetch(url)\r\n            .then(response => response.json())\r\n            .then(allQuestions => this.setState({\r\n                questions: allQuestions\r\n            }))\r\n            .catch(() => console.log(\"Can’t access \" + url + \" response. Blocked by browser?\"));\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>WELCOME TO JPA APPLICATION</h1>\r\n                <h2>USERS</h2>\r\n\r\n                <ul>\r\n                    {\r\n                        this.state.questions\r\n                            .map(\r\n                                question =>\r\n                                    <li key={question.id}>\r\n                                        <h4>User Id: {question.id}</h4>\r\n                                        <h4>First Name:</h4>{question.firstName}\r\n                                        <h4>Last Name:</h4>{question.lastName}\r\n                                        {/*<h4>Type:</h4>{question.questionType}*/}\r\n                                    </li>\r\n                            )\r\n                    }\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from \"react\";\r\nimport Nav from \"react-bootstrap/Nav\";\r\nimport NavDropdown from \"react-bootstrap/NavDropdown\";\r\nimport {logout} from \"../services/UserService\";\r\n\r\nexport default class PatientNavBar extends React.Component {\r\n\r\n    handleSelect = (eventKey) => {\r\n        if (eventKey == 4.1) {\r\n            window.location.href = '/viewPersonAddrPhone'\r\n        } else if (eventKey == 4.2) {\r\n            window.location.href = '/viewAllergyPatientProfile'\r\n        } else if (eventKey == 4.3) {\r\n            window.location.href = '/viewPatientInsurances'\r\n        } else if (eventKey == 5.1) {\r\n            window.location.href = '/addAddress'\r\n        } else if (eventKey == 5.2) {\r\n            window.location.href = '/addPhone'\r\n        } else if (eventKey == 5.3) {\r\n            window.location.href = '/addAllergy'\r\n        } else if (eventKey == 5.4) {\r\n            window.location.href = '/addInsurance'\r\n        } else if (eventKey == 6.1) {\r\n            window.location.href = '/updatePatientPersonalProfile'\r\n        } else if (eventKey == 6.2) {\r\n            window.location.href = '/updatePersonAddress'\r\n        } else if (eventKey == 6.3) {\r\n            window.location.href = '/updatePersonPhone'\r\n        } else if (eventKey == 6.4) {\r\n            window.location.href = '/updatePatientAllergy'\r\n        } else if (eventKey == 6.5) {\r\n            window.location.href = '/updatePatientInsurance'\r\n        } else if (eventKey == 7.1) {\r\n            window.location.href = '/deletePersonAddress'\r\n        } else if (eventKey == 7.2) {\r\n            window.location.href = '/deletePersonPhone'\r\n        } else if (eventKey == 7.3) {\r\n            window.location.href = '/deletePatientAllergy'\r\n        } else if (eventKey == 7.4) {\r\n            window.location.href = '/deletePatientInsurance'\r\n        } else if (eventKey == 8) {\r\n            logout()\r\n                .then(status => window.location.href = '/')\r\n        }\r\n    };\r\n    \r\n    render() {\r\n        return (\r\n            <div>\r\n                <Nav\r\n                    variant=\"pills\"\r\n                    activeKey=\"1\"\r\n                    onSelect={this.handleSelect}\r\n                >\r\n                    <Nav.Item>\r\n                        <Nav.Link eventKey=\"1\" href=\"/patientProfile\">\r\n                            PROFILE\r\n                        </Nav.Link>\r\n                    </Nav.Item>\r\n                    <Nav.Item>\r\n                        <Nav.Link eventKey=\"2\"\r\n                                  href=\"/viewPatientAppointments\"\r\n                                  title=\"Item\">\r\n                            APPOINTMENTS\r\n                        </Nav.Link>\r\n                    </Nav.Item>\r\n                    <Nav.Item>\r\n                        <Nav.Link eventKey=\"3\"\r\n                                  href=\"/viewPatientPrescriptions\">\r\n                            PRESCRIPTIONS\r\n                        </Nav.Link>\r\n                    </Nav.Item>\r\n                    <NavDropdown title=\"VIEW\" id=\"nav-dropdown\">\r\n                        <NavDropdown.Item eventKey=\"4.1\">Address / Phone</NavDropdown.Item>\r\n                        <NavDropdown.Divider/>\r\n                        <NavDropdown.Item eventKey=\"4.2\">Allergies</NavDropdown.Item>\r\n                        <NavDropdown.Item eventKey=\"4.3\">Insurances</NavDropdown.Item>\r\n                    </NavDropdown>\r\n                    <NavDropdown title=\"ADD\" id=\"nav-dropdown\">\r\n                        <NavDropdown.Item eventKey=\"5.1\">Address</NavDropdown.Item>\r\n                        <NavDropdown.Item eventKey=\"5.2\">Phone</NavDropdown.Item>\r\n                        <NavDropdown.Item eventKey=\"5.3\">Allergy</NavDropdown.Item>\r\n                        <NavDropdown.Item eventKey=\"5.4\">Insurance</NavDropdown.Item>\r\n                    </NavDropdown>\r\n                    <NavDropdown title=\"UPDATE\" id=\"nav-dropdown\">\r\n                        <NavDropdown.Item eventKey=\"6.1\">Personal Details</NavDropdown.Item>\r\n                        <NavDropdown.Item eventKey=\"6.2\">Address Details </NavDropdown.Item>\r\n                        <NavDropdown.Item eventKey=\"6.3\">Phone Details </NavDropdown.Item>\r\n                        <NavDropdown.Item eventKey=\"6.4\">Allergy Details</NavDropdown.Item>\r\n                        <NavDropdown.Item eventKey=\"6.5\">Insurance Details</NavDropdown.Item>\r\n                    </NavDropdown>\r\n                    <NavDropdown title=\"REMOVE\" id=\"nav-dropdown\">\r\n                        <NavDropdown.Item eventKey=\"7.1\">Address</NavDropdown.Item>\r\n                        <NavDropdown.Item eventKey=\"7.2\">Phone </NavDropdown.Item>\r\n                        <NavDropdown.Item eventKey=\"7.3\">Allergy </NavDropdown.Item>\r\n                        <NavDropdown.Item eventKey=\"7.4\">Insurance</NavDropdown.Item>\r\n                    </NavDropdown>\r\n                    <Nav.Item class=\"logout\">\r\n                        <Nav.Link eventKey=\"8\">\r\n                            LOGOUT\r\n                        </Nav.Link>\r\n                    </Nav.Item>\r\n                </Nav>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}","import React from \"react\"\r\nimport {logout, profile} from \"../services/UserService\";\r\nimport PatientNavBar from \"../react/PatientNavBar\";\r\n\r\nexport default class PatientProfile extends React.Component {\r\n\r\n    state = {\r\n        profile: {\r\n            username: '',\r\n            userType: ''\r\n        },\r\n\r\n        loadedProfile: {\r\n            firstName: '',\r\n            lastName: '',\r\n            dateOfBirth: '',\r\n            dateOfAdmission: '',\r\n            medicalHistory: '',\r\n            gender: ''\r\n        }\r\n    }\r\n\r\n    logout = () => logout()\r\n        .then(status => this.props.history.push(\"/\"))\r\n\r\n    componentDidMount() {\r\n        profile()\r\n            .then(profile => this.setState({\r\n                profile: profile\r\n            }))\r\n            .then(profile => fetch(\"api/patients/find/username/\" + this.state.profile.username))\r\n            .then(response => response.json())\r\n            .then(profile => this.setState({\r\n                loadedProfile: profile\r\n            }))\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <PatientNavBar/>\r\n                <hr/>\r\n                <h1>PATIENT PROFILE</h1>\r\n                Hi {this.state.profile.username}!\r\n                <br/>\r\n                <b>User Type:</b> Patient\r\n                <br/>\r\n                <hr/>\r\n                <h2>PERSONAL DETAILS</h2>\r\n                <br/>\r\n\r\n                <li><b>First Name:</b>  {this.state.loadedProfile.firstName}</li>\r\n                <li><b>Last Name:</b> {this.state.loadedProfile.lastName}</li>\r\n                <li><b>Birth Date:</b> {this.state.loadedProfile.dateOfBirth}</li>\r\n                <li><b>Admission Date:</b> {this.state.loadedProfile.dateOfAdmission}</li>\r\n                <li><b>Medical History:</b> {this.state.loadedProfile.medicalHistory}</li>\r\n                <li><b>Gender:</b> {this.state.loadedProfile.gender}</li>\r\n\r\n                <hr/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport {login} from \"../services/UserService\";\r\n\r\nclass Login extends React.Component {\r\n\r\n    isEmpty(obj) {\r\n        for (const key in obj) {\r\n            if (obj.hasOwnProperty(key))\r\n                return false;\r\n        }\r\n        return true;\r\n    };\r\n\r\n    state = {\r\n        username: '',\r\n        password: '',\r\n        verifyPassword: ''\r\n    };\r\n\r\n    login = (user) =>\r\n        login(user)\r\n            .then(currentUser => {\r\n                    if (this.isEmpty(currentUser)) {\r\n                        alert(\"Invalid username or password :( Please try again\")\r\n                    } else {\r\n                        if (currentUser.userType === \"Patient\") {\r\n                            this.props.history.push(\"/patientProfile\")\r\n                        } else if (currentUser.userType === \"Doctor\") {\r\n                            this.props.history.push(\"/doctorProfile\")\r\n                        } else if (currentUser.userType === \"Admin Staff\") {\r\n                            this.props.history.push(\"/adminStaffProfile\")\r\n                        }\r\n                    }\r\n                }\r\n            );\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>LOGIN</h1>\r\n                <input\r\n                    value={this.state.username}\r\n                    onChange={(e) => this.setState({\r\n                        username: e.target.value\r\n                    })}\r\n                    className={\"form-control\"}\r\n                    placeholder={\"username\"}/>\r\n                <br/>\r\n                <input\r\n                    value={this.state.password}\r\n                    onChange={(e) => this.setState({\r\n                        password: e.target.value\r\n                    })}\r\n                    className={`form-control`}\r\n                    type={\"password\"}\r\n                    placeholder={\"password\"}/>\r\n                <br/>\r\n                <button\r\n                    onClick={() => this.login(this.state)}\r\n                    className=\"btn btn-primary btn-block\">\r\n                    LOGIN\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Login;","import React from \"react\";\r\nimport Nav from \"react-bootstrap/Nav\";\r\nimport NavDropdown from \"react-bootstrap/NavDropdown\";\r\nimport {logout} from \"../services/UserService\";\r\n\r\nexport default class DoctorNavBar extends React.Component {\r\n\r\n    handleSelect = (eventKey) => {\r\n        if (eventKey == 4.1) {\r\n            window.location.href = '/viewPersonAddrPhone'\r\n        } else if (eventKey == 4.2) {\r\n            window.location.href = '/viewSalary'\r\n        } else if (eventKey == 5.1) {\r\n            window.location.href = '/addAddress'\r\n        } else if (eventKey == 5.2) {\r\n            window.location.href = '/addPhone'\r\n        } else if (eventKey == 5.3) {\r\n            window.location.href = '/addAppointment'\r\n        } else if (eventKey == 5.4) {\r\n            window.location.href = '/addPrescription'\r\n        } else if (eventKey == 6.1) {\r\n            window.location.href = '/updateDoctorPersonalProfile'\r\n        } else if (eventKey == 6.2) {\r\n            window.location.href = '/updatePersonAddress'\r\n        } else if (eventKey == 6.3) {\r\n            window.location.href = '/updatePersonPhone'\r\n        } else if (eventKey == 6.4) {\r\n            window.location.href = '/updateAppointment'\r\n        } else if (eventKey == 7.1) {\r\n            window.location.href = '/deletePersonAddress'\r\n        } else if (eventKey == 7.2) {\r\n            window.location.href = '/deletePersonPhone'\r\n        } else if (eventKey == 7.3) {\r\n            window.location.href = '/deletePrescription'\r\n        } else if(eventKey == 7.4) {\r\n            window.location.href = '/deleteDoctorAppointment'\r\n        } else if (eventKey == 8) {\r\n            logout()\r\n                .then(status => window.location.href = '/')\r\n        }\r\n    };\r\n\r\n    render() {\r\n\r\n        return (\r\n            <Nav\r\n                variant=\"pills\"\r\n                activeKey=\"1\"\r\n                onSelect={this.handleSelect}\r\n            >\r\n                <Nav.Item>\r\n                    <Nav.Link eventKey=\"1\" href=\"/doctorProfile\">\r\n                        PROFILE\r\n                    </Nav.Link>\r\n                </Nav.Item>\r\n                <Nav.Item>\r\n                    <Nav.Link eventKey=\"2\"\r\n                              href=\"/viewDoctorAppointments\"\r\n                              title=\"Item\">\r\n                        APPOINTMENTS\r\n                    </Nav.Link>\r\n                </Nav.Item>\r\n                <Nav.Item>\r\n                    <Nav.Link eventKey=\"3\"\r\n                              href=\"/viewDoctorPrescriptions\">\r\n                        PRESCRIPTIONS\r\n                    </Nav.Link>\r\n                </Nav.Item>\r\n                <NavDropdown title=\"VIEW\" id=\"nav-dropdown\">\r\n                    <NavDropdown.Item eventKey=\"4.1\">Address / Phone</NavDropdown.Item>\r\n                    <NavDropdown.Item eventKey=\"4.2\">Salary Info</NavDropdown.Item>\r\n                </NavDropdown>\r\n                <NavDropdown title=\"ADD\" id=\"nav-dropdown\">\r\n                    <NavDropdown.Item eventKey=\"5.1\">Address</NavDropdown.Item>\r\n                    <NavDropdown.Item eventKey=\"5.2\">Phone</NavDropdown.Item>\r\n                    <NavDropdown.Item eventKey=\"5.3\">Appointments</NavDropdown.Item>\r\n                    <NavDropdown.Item eventKey=\"5.4\">Prescription</NavDropdown.Item>\r\n                </NavDropdown>\r\n                <NavDropdown title=\"UPDATE\" id=\"nav-dropdown\">\r\n                    <NavDropdown.Item eventKey=\"6.1\">Personal Details</NavDropdown.Item>\r\n                    <NavDropdown.Item eventKey=\"6.2\">Address Details </NavDropdown.Item>\r\n                    <NavDropdown.Item eventKey=\"6.3\">Phone Details </NavDropdown.Item>\r\n                    <NavDropdown.Item eventKey=\"6.4\">Appointment Details</NavDropdown.Item>\r\n                </NavDropdown>\r\n                <NavDropdown title=\"REMOVE\" id=\"nav-dropdown\">\r\n                    <NavDropdown.Item eventKey=\"7.1\">Address</NavDropdown.Item>\r\n                    <NavDropdown.Item eventKey=\"7.2\">Phone </NavDropdown.Item>\r\n                    <NavDropdown.Item eventKey=\"7.3\">Prescription</NavDropdown.Item>\r\n                    <NavDropdown.Item eventKey=\"7.4\">Appointment</NavDropdown.Item>\r\n                </NavDropdown>\r\n\r\n                <Nav.Item class=\"logout\">\r\n                    <Nav.Link eventKey=\"8\">\r\n                        LOGOUT\r\n                    </Nav.Link>\r\n                </Nav.Item>\r\n            </Nav>\r\n        )\r\n    }\r\n\r\n}","import React from \"react\"\r\nimport {logout, profile} from \"../services/UserService\";\r\nimport DoctorNavBar from \"../react/DoctorNavBar\";\r\n\r\nexport default class DoctorProfile extends React.Component {\r\n\r\n    state = {\r\n        profile: {\r\n            username: '',\r\n            userType: ''\r\n        },\r\n        loadedProfile: {\r\n            firstName: '',\r\n            lastName: '',\r\n            dateOfBirth: '',\r\n            joiningDate: '',\r\n            education: '',\r\n            designation: '',\r\n            certification: '',\r\n            status: '',\r\n            department: '',\r\n            gender: '',\r\n        }\r\n    }\r\n\r\n    logout = () => logout()\r\n        .then(status => this.props.history.push(\"/\"))\r\n\r\n    componentDidMount() {\r\n        profile()\r\n            .then(profile => this.setState({\r\n                profile: profile\r\n            })).then(profile => fetch(\"api/doctors/find/username/\" + this.state.profile.username))\r\n            .then(response => response.json())\r\n            .then(profile => this.setState({\r\n                loadedProfile: profile\r\n            }))\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <DoctorNavBar/>\r\n                <hr/>\r\n                <h1>DOCTOR PROFILE</h1>\r\n                Hi {this.state.profile.username}!\r\n                <br/>\r\n                User Type: DOCTOR\r\n                <hr/>\r\n                <h2>PERSONAL PROFILE</h2>\r\n                <br/>\r\n                <li><b>First Name:</b> {this.state.loadedProfile.firstName}</li>\r\n                <li><b>Last Name:</b> {this.state.loadedProfile.lastName}</li>\r\n                <li><b>Birth Date:</b> {this.state.loadedProfile.dateOfBirth}</li>\r\n                <li><b>Joining Date:</b> {this.state.loadedProfile.joiningDate}</li>\r\n                <li><b>Medical History:</b> {this.state.loadedProfile.education}</li>\r\n                <li><b>Designation:</b> {this.state.loadedProfile.designation}</li>\r\n                <li><b>Certification:</b> {this.state.loadedProfile.certification}</li>\r\n                <li><b>Status:</b> {this.state.loadedProfile.status}</li>\r\n                <li><b>Department:</b> {this.state.loadedProfile.department}</li>\r\n                <li><b>Gender:</b> {this.state.loadedProfile.gender}</li>\r\n                <hr/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport Nav from \"react-bootstrap/Nav\";\r\nimport NavDropdown from \"react-bootstrap/NavDropdown\";\r\nimport {logout} from \"../services/UserService\";\r\n\r\nexport default class DoctorNavBar extends React.Component {\r\n\r\n    handleSelect = (eventKey) => {\r\n        if (eventKey == 2.1) {\r\n            window.location.href = '/viewPersonAddrPhone'\r\n        } else if (eventKey == 2.2) {\r\n            window.location.href = '/viewSalary'\r\n        } else if (eventKey == 3.1) {\r\n            window.location.href = '/addAddress'\r\n        } else if (eventKey == 3.2) {\r\n            window.location.href = '/addPhone'\r\n        } else if (eventKey == 3.3) {\r\n            window.location.href = '/addSalary'\r\n        } else if (eventKey == 3.6) {\r\n            window.location.href = '/register'\r\n        } else if (eventKey == 3.7) {\r\n            window.location.href = '/register'\r\n        } else if (eventKey == 4.1) {\r\n            window.location.href = '/updateAdminStaffPersonalProfile'\r\n        } else if (eventKey == 4.2) {\r\n            window.location.href = '/updatePersonAddress'\r\n        } else if (eventKey == 4.3) {\r\n            window.location.href = '/updatePersonPhone'\r\n        } else if (eventKey == 5.1) {\r\n            window.location.href = '/deletePersonAddress'\r\n        } else if (eventKey == 5.2) {\r\n            window.location.href = '/deletePersonPhone'\r\n        } else if (eventKey == 5.3) {\r\n            window.location.href = '/deletePrescription'\r\n        } else if (eventKey == 6.1) {\r\n            window.location.href = '/viewAllDoctors'\r\n        } else if (eventKey == 6.2) {\r\n            window.location.href = '/viewAllPatients'\r\n        } else if (eventKey == 6.3) {\r\n            window.location.href = '/viewAllAdminStaff'\r\n        } else if (eventKey == 6.4) {\r\n            window.location.href = '/viewAllAddresses'\r\n        } else if (eventKey == 6.5) {\r\n            window.location.href = '/viewAllPhones'\r\n        } else if (eventKey == 7.1) {\r\n            window.location.href = '/viewAllAppointments'\r\n        } else if (eventKey == 7.2) {\r\n            window.location.href = '/viewAllPrescriptions'\r\n        } else if (eventKey == 7.3) {\r\n            window.location.href = '/viewAllSalaries'\r\n        } else if (eventKey == 8.1) {\r\n            window.location.href = '/viewAllAllergies'\r\n        } else if (eventKey == 8.2) {\r\n            window.location.href = '/viewAllInsurances'\r\n        } else if (eventKey == 9.1) {\r\n            window.location.href = '/doctorRemoveByAdmin'\r\n        } else if (eventKey == 9.2) {\r\n            window.location.href = '/patientRemoveByAdmin'\r\n        } else if (eventKey == 9.4) {\r\n            window.location.href = '/removeAddressByAdmin'\r\n        } else if (eventKey == 9.5) {\r\n            window.location.href = '/phoneRemoveByAdmin'\r\n        }  else if (eventKey == 10.1) {\r\n            window.location.href = '/prescriptionRemoveByAdmin'\r\n        } else if (eventKey == 10.2) {\r\n            window.location.href = '/appointmentRemoveByAdmin'\r\n        } else if (eventKey == 11.1) {\r\n            window.location.href = '/allergyRemoveByAdmin'\r\n        } else if (eventKey == 11.2) {\r\n            window.location.href = '/insuranceRemoveByAdmin'\r\n        } else if (eventKey == 12.1) {\r\n            window.location.href = '/updateDoctorByAdmin'\r\n        } else if (eventKey == 12.2) {\r\n            window.location.href = '/updatePatientByAdmin'\r\n        } else if (eventKey == 12.3) {\r\n            window.location.href = '/updateAdminStaffByAdmin'\r\n        } else if (eventKey == 12.4) {\r\n            window.location.href = '/updateAddressByAdmin'\r\n        } else if (eventKey == 12.5) {\r\n            window.location.href = '/updatePhoneByAdmin'\r\n        } else if (eventKey == 13.1) {\r\n            window.location.href = '/updateAppointmentByAdmin'\r\n        } else if (eventKey == 13.2) {\r\n            window.location.href = '/updateSalaryByAdmin'\r\n        } else if (eventKey == 14.1) {\r\n            window.location.href = '/updateAllergiesByAdmin'\r\n        } else if (eventKey == 14.2) {\r\n            window.location.href = '/updateInsurancesByAdmin'\r\n        } else if (eventKey == 15) {\r\n            logout()\r\n                .then(status => window.location.href = '/')\r\n        }\r\n    };\r\n\r\n    render() {\r\n\r\n        return (\r\n            <Nav\r\n                variant=\"pills\"\r\n                activeKey=\"1\"\r\n                onSelect={this.handleSelect}\r\n                fill={\"true\"}\r\n            >\r\n                <Nav.Item>\r\n                    <Nav.Link eventKey=\"1\" href=\"/adminStaffProfile\">\r\n                        PROFILE\r\n                    </Nav.Link>\r\n                </Nav.Item>\r\n                <NavDropdown title=\"VIEW\" id=\"nav-dropdown\">\r\n                    <NavDropdown.Item eventKey=\"2.1\">Address / Phone</NavDropdown.Item>\r\n                    <NavDropdown.Divider/>\r\n                    <NavDropdown.Item eventKey=\"2.2\">Salary</NavDropdown.Item>\r\n                </NavDropdown>\r\n                <NavDropdown title=\"ADD\" id=\"nav-dropdown\">\r\n                    <NavDropdown.Item eventKey=\"3.1\">Self Address</NavDropdown.Item>\r\n                    <NavDropdown.Item eventKey=\"3.2\">Self Phone</NavDropdown.Item>\r\n                    <NavDropdown.Item eventKey=\"3.3\">Salary</NavDropdown.Item>\r\n                    <NavDropdown.Divider/>\r\n                    <NavDropdown.Item eventKey=\"3.6\">Doctor</NavDropdown.Item>\r\n                    <NavDropdown.Item eventKey=\"3.7\">Patient</NavDropdown.Item>\r\n                </NavDropdown>\r\n                <NavDropdown title=\"UPDATE\" id=\"nav-dropdown\">\r\n                    <NavDropdown.Item eventKey=\"4.1\">Personal Details</NavDropdown.Item>\r\n                    <NavDropdown.Item eventKey=\"4.2\">Address Details </NavDropdown.Item>\r\n                    <NavDropdown.Item eventKey=\"4.3\">Phone Details </NavDropdown.Item>\r\n                </NavDropdown>\r\n                <NavDropdown title=\"REMOVE\" id=\"nav-dropdown\">\r\n                    <NavDropdown.Item eventKey=\"5.1\">Address</NavDropdown.Item>\r\n                    <NavDropdown.Item eventKey=\"5.2\">Phone </NavDropdown.Item>\r\n                </NavDropdown>\r\n                <NavDropdown title=\"VIEW DB\" id=\"nav-dropdown\">\r\n                    <NavDropdown.Item eventKey=\"6.1\">Doctors</NavDropdown.Item>\r\n                    <NavDropdown.Item eventKey=\"6.2\">Patients</NavDropdown.Item>\r\n                    <NavDropdown.Item eventKey=\"6.3\">Admin Staff</NavDropdown.Item>\r\n                    <NavDropdown.Divider/>\r\n                    <NavDropdown.Item eventKey=\"6.4\"> All Addresses</NavDropdown.Item>\r\n                    <NavDropdown.Item eventKey=\"6.5\">All Phones</NavDropdown.Item>\r\n                </NavDropdown>\r\n                <NavDropdown title=\"VIEW DOCTOR\" id=\"nav-dropdown\">\r\n                    <NavDropdown.Item eventKey=\"7.1\">Appointments</NavDropdown.Item>\r\n                    <NavDropdown.Item eventKey=\"7.2\">Prescriptions</NavDropdown.Item>\r\n                    <NavDropdown.Divider/>\r\n                    <NavDropdown.Item eventKey=\"7.3\">Salaries</NavDropdown.Item>\r\n                </NavDropdown>\r\n                <NavDropdown title=\"VIEW PATIENT\" id=\"nav-dropdown\">\r\n                    <NavDropdown.Item eventKey=\"8.1\">Allergies</NavDropdown.Item>\r\n                    <NavDropdown.Item eventKey=\"8.2\">Insurances</NavDropdown.Item>\r\n                </NavDropdown>\r\n                <NavDropdown title=\"REMOVE FROM DB\" id=\"nav-dropdown\">\r\n                    <NavDropdown.Item eventKey=\"9.1\">Doctor</NavDropdown.Item>\r\n                    <NavDropdown.Item eventKey=\"9.2\">Patient</NavDropdown.Item>\r\n                    <NavDropdown.Divider/>\r\n                    <NavDropdown.Item eventKey=\"9.4\">Addresses</NavDropdown.Item>\r\n                    <NavDropdown.Item eventKey=\"9.5\">Phones</NavDropdown.Item>\r\n                </NavDropdown>\r\n                <NavDropdown title=\"REMOVE DOCTOR\" id=\"nav-dropdown\">\r\n                    <NavDropdown.Item eventKey=\"10.1\">Prescriptions</NavDropdown.Item>\r\n                    <NavDropdown.Item eventKey=\"10.2\">Appointments</NavDropdown.Item>\r\n                </NavDropdown>\r\n                <NavDropdown title=\"REMOVE PATIENT\" id=\"nav-dropdown\">\r\n                    <NavDropdown.Item eventKey=\"11.1\">Allergies</NavDropdown.Item>\r\n                    <NavDropdown.Item eventKey=\"11.2\">Insurances</NavDropdown.Item>\r\n                </NavDropdown>\r\n                <NavDropdown title=\"UPDATE IN DB\" id=\"nav-dropdown\">\r\n                    <NavDropdown.Item eventKey=\"12.1\">Doctor</NavDropdown.Item>\r\n                    <NavDropdown.Item eventKey=\"12.2\">Patient</NavDropdown.Item>\r\n                    <NavDropdown.Item eventKey=\"12.3\">Admin Staff</NavDropdown.Item>\r\n                    <NavDropdown.Divider/>\r\n                    <NavDropdown.Item eventKey=\"12.4\">Addresses</NavDropdown.Item>\r\n                    <NavDropdown.Item eventKey=\"12.5\">Phones</NavDropdown.Item>\r\n                </NavDropdown>\r\n                <NavDropdown title=\"UPDATE DOCTOR\" id=\"nav-dropdown\">\r\n                    <NavDropdown.Item eventKey=\"13.1\">Appointments</NavDropdown.Item>\r\n                    <NavDropdown.Divider/>\r\n                    <NavDropdown.Item eventKey=\"13.2\">Salary</NavDropdown.Item>\r\n                </NavDropdown>\r\n                <NavDropdown title=\"UPDATE PATIENT\" id=\"nav-dropdown\">\r\n                    <NavDropdown.Item eventKey=\"14.1\">Allergies</NavDropdown.Item>\r\n                    <NavDropdown.Item eventKey=\"14.2\">Insurances</NavDropdown.Item>\r\n                </NavDropdown>\r\n                <Nav.Item class=\"logout\">\r\n                    <Nav.Link eventKey=\"15\">\r\n                        LOGOUT\r\n                    </Nav.Link>\r\n                </Nav.Item>\r\n            </Nav>\r\n        )\r\n    }\r\n\r\n}","import React from \"react\"\r\nimport {profile,logout} from \"../services/UserService\";\r\nimport AdminNavBar from \"../react/AdminNavBar\";\r\n\r\nexport default class AdminStaffProfile extends React.Component {\r\n\r\n    state = {\r\n        profile: {\r\n            username: '',\r\n            userType: ''\r\n        },\r\n\r\n        loadedProfile: {\r\n            firstName: '',\r\n            lastName: '',\r\n            dateOfBirth: '',\r\n            status: '',\r\n            joiningDate: '',\r\n            jobTitle: '',\r\n            jobDescription: '',\r\n            gender: '',\r\n            department: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        profile()\r\n            .then(profile => this.setState({\r\n                profile: profile\r\n            })).then(profile => fetch(\"api/adminstaff/find/username/\" + this.state.profile.username))\r\n            .then(response => response.json())\r\n            .then(profile => this.setState({\r\n                loadedProfile: profile\r\n            }))\r\n    }\r\n\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <AdminNavBar/>\r\n                <hr/>\r\n                <h1>Administration Staff Profile</h1>\r\n                Hi {this.state.profile.username}!\r\n                <br/>\r\n                User Type: {this.state.profile.userType}\r\n                <hr/>\r\n                <h2>PERSONAL PROFILE</h2>\r\n                <br/>\r\n                <li><b>First Name:</b> {this.state.loadedProfile.firstName}</li>\r\n                <li><b>Last Name:</b> {this.state.loadedProfile.lastName}</li>\r\n                <li><b>Birth Date:</b> {this.state.loadedProfile.dateOfBirth}</li>\r\n                <li><b>Joining Date:</b> {this.state.loadedProfile.joiningDate}</li>\r\n                <li><b>Medical History:</b> {this.state.loadedProfile.jobTitle}</li>\r\n                <li><b>Designation:</b> {this.state.loadedProfile.jobDescription}</li>\r\n                <li><b>Certification:</b> {this.state.loadedProfile.department}</li>\r\n                <li><b>Status:</b> {this.state.loadedProfile.gender}</li>\r\n                <hr/>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from \"react\"\r\nimport {logout, profile, registerPatientInfo} from \"../../services/UserService\";\r\n\r\n\r\nexport default class PatientProfileReg extends React.Component {\r\n\r\n    state = {\r\n        profile: {\r\n            username: '',\r\n            password: '',\r\n            firstName: '',\r\n            lastName: '',\r\n            dateOfBirth: '',\r\n            dateOfAdmission: '',\r\n            medicalHistory: '',\r\n            gender: 'Male',\r\n        },\r\n    }\r\n\r\n    isValidDate = (dateString) => {\r\n        let regEx = /^\\d{4}-\\d{2}-\\d{2}$/;\r\n        if (!dateString.match(regEx)) return false;  // Invalid format\r\n        let d = new Date(dateString);\r\n        let dNum = d.getTime();\r\n        if (!dNum && dNum !== 0) return false; // NaN value, Invalid date\r\n        return d.toISOString().slice(0, 10) === dateString;\r\n    }\r\n\r\n    validatePatientProfile = () => {\r\n        if (this.state.firstName === '') {\r\n            alert(\"First Name cannot be empty :(\")\r\n            return false\r\n        } else if (this.state.lastName === '') {\r\n            alert(\"Last Name cannot be empty :(\")\r\n            return false\r\n        } else if (this.state.dateOfBirth === '') {\r\n            alert(\"Date of Birth cannot be empty :(\")\r\n            return false\r\n        } else if (!this.isValidDate(this.state.dateOfBirth)) {\r\n            alert(\"Date of Birth format is invalid :(\")\r\n            return false\r\n        } else if (this.state.dateOfAdmission === '') {\r\n            alert(\"Verify password cannot be empty :(\")\r\n            return false\r\n        } else if (!this.isValidDate(this.state.dateOfAdmission)) {\r\n            alert(\"Date of Admission format is invalid :(\")\r\n            return false\r\n        } else {\r\n            this.registerPatientInfo(this.state)\r\n        }\r\n\r\n    };\r\n\r\n    logout = () => logout()\r\n        .then(status => this.props.history.push(\"/\"))\r\n\r\n\r\n    componentDidMount() {\r\n        profile()\r\n            .then(profile => this.setState({\r\n                profile: profile,\r\n                username: profile.username,\r\n                password: profile.password,\r\n                firstName: '',\r\n                lastName: '',\r\n                dateOfBirth: '',\r\n                dateOfAdmission: '',\r\n                medicalHistory: '',\r\n                gender: 'Male'\r\n            }))\r\n    }\r\n\r\n    handleSelectChange = event => {\r\n        this.setState({gender: event.target.value});\r\n        console.log(this.state)\r\n    }\r\n\r\n    registerPatientInfo = (patient) =>\r\n        registerPatientInfo(patient)\r\n            .then(this.logout);\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Patient Profile</h1>\r\n                Hi {this.state.profile.username}!\r\n                <br/>\r\n                <b>User Type:</b> Patient\r\n                <br/>\r\n                <hr/>\r\n                <h3>Complete your profile</h3>\r\n                <br/>\r\n                <div>\r\n                    <input\r\n                        value={this.state.firstName}\r\n                        onChange={(e) => this.setState({\r\n                            firstName: e.target.value\r\n                        })}\r\n                        className={\"form-control\"}\r\n                        placeholder={\"First Name\"}/>\r\n                    <br/>\r\n                    <input\r\n                        value={this.state.lastName}\r\n                        onChange={(e) => this.setState({\r\n                            lastName: e.target.value\r\n                        })}\r\n                        className={`form-control`}\r\n                        placeholder={\"Last Name\"}/>\r\n                    <br/>\r\n\r\n                    <input\r\n                        value={this.state.dateOfBirth}\r\n                        onChange={(e) => this.setState({\r\n                            dateOfBirth: e.target.value\r\n                        })}\r\n                        className={`form-control`}\r\n                        placeholder={\"Date Of Birth  (YYYY-MM-DD)\"}/>\r\n                    <br/>\r\n\r\n                    <input\r\n                        value={this.state.dateOfAdmission}\r\n                        onChange={(e) => this.setState({\r\n                            dateOfAdmission: e.target.value\r\n                        })}\r\n                        className={`form-control`}\r\n                        placeholder={\"Date of Admission (YYYY-MM-DD)\"}/>\r\n                    <br/>\r\n\r\n                    <input\r\n                        value={this.state.medicalHistory}\r\n                        onChange={(e) => this.setState({\r\n                            medicalHistory: e.target.value\r\n                        })}\r\n                        className={`form-control`}\r\n                        placeholder={\"Medical History (if any)\"}/>\r\n                    <br/>\r\n                    <div>\r\n                        <select\r\n                            className={\"form-control\"}\r\n                            value={this.state.gender}\r\n                            onChange={this.handleSelectChange}>\r\n                            <option>Male</option>\r\n                            <option>Female</option>\r\n                            <option>Other</option>\r\n                        </select>\r\n                    </div>\r\n                    <br/>\r\n                    <button\r\n                        onClick={this.validatePatientProfile}\r\n                        // onClick={() => this.registerPatientInfo(this.state)}\r\n                        className=\"btn btn-primary btn-block\">\r\n                        SUBMIT\r\n                    </button>\r\n                </div>\r\n                <hr/>\r\n\r\n                <button\r\n                    onClickCapture={this.logout}\r\n                    className={\"btn btn-danger\"}\r\n                    onClick={this.logout}>\r\n                    Logout\r\n                </button>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from \"react\"\r\nimport {logout, profile, registerDoctorInfo} from \"../../services/UserService\";\r\n\r\nexport default class DoctorProfileReg extends React.Component {\r\n\r\n    state = {\r\n        profile: {\r\n            username: '',\r\n            password: '',\r\n            firstName: '',\r\n            lastName: '',\r\n            dateOfBirth: '',\r\n            status: '',\r\n            joiningDate: '',\r\n            designation: '',\r\n            education: '',\r\n            certification: '',\r\n            department: '',\r\n            gender: 'Male',\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        profile()\r\n            .then(profile => this.setState({\r\n                profile: profile,\r\n                username: profile.username,\r\n                password: profile.password,\r\n                firstName: '',\r\n                lastName: '',\r\n                dateOfBirth: '',\r\n                status: '',\r\n                joiningDate: '',\r\n                designation: '',\r\n                education: '',\r\n                certification: '',\r\n                department: 'ENT',\r\n                gender: 'Male',\r\n            }))\r\n    }\r\n\r\n    isValidDate = (dateString) => {\r\n        let regEx = /^\\d{4}-\\d{2}-\\d{2}$/;\r\n        if(!dateString.match(regEx)) return false;  // Invalid format\r\n        let d = new Date(dateString);\r\n        let dNum = d.getTime();\r\n        if(!dNum && dNum !== 0) return false; // NaN value, Invalid date\r\n        return d.toISOString().slice(0,10) === dateString;\r\n    }\r\n\r\n\r\n    validateDoctorProfile = () => {\r\n        if (this.state.firstName === '') {\r\n            alert(\"First Name cannot be empty :(\")\r\n            return false\r\n        }\r\n        else if (this.state.lastName === '') {\r\n            alert(\"Last Name cannot be empty :(\")\r\n            return false\r\n        }\r\n        else if (this.state.dateOfBirth === '') {\r\n            alert(\"Date of Birth cannot be empty :(\")\r\n            return false\r\n        }\r\n        else if (!this.isValidDate(this.state.dateOfBirth)) {\r\n            alert(\"Date of Birth format is invalid :(\")\r\n            return false\r\n        }\r\n        else if (this.state.joiningDate === '') {\r\n            alert(\"Joining Date cannot be empty :(\")\r\n            return false\r\n        }\r\n        else if (!this.isValidDate(this.state.joiningDate)) {\r\n            alert(\"Joining date format is invalid :(\")\r\n            return false\r\n        }\r\n        else if (this.state.designation === '') {\r\n            alert(\"Designation cannot be empty :(\")\r\n            return false\r\n        }\r\n        else if (this.state.education === '') {\r\n            alert(\"Education cannot be empty :(\")\r\n            return false\r\n        }\r\n        else {\r\n            this.registerDoctorInfo(this.state)\r\n        }\r\n    };\r\n\r\n    logout = () => logout()\r\n        .then(status => this.props.history.push(\"/\"))\r\n\r\n    registerDoctorInfo = (doctor) =>\r\n        registerDoctorInfo(doctor)\r\n            .then(this.logout);\r\n\r\n    handleSelectGenderChange = event => {\r\n        this.setState({gender: event.target.value});\r\n        console.log(this.state)\r\n    }\r\n\r\n    handleSelectDeptChange = event => {\r\n        this.setState({department: event.target.value});\r\n        console.log(this.state)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Doctor Profile</h1>\r\n                Hi {this.state.profile.username}!\r\n                <br/>\r\n                <b>User Type:</b> Doctor\r\n                <br/>\r\n                <hr/>\r\n                <h3>Complete your profile</h3>\r\n                <br/>\r\n                <div>\r\n                    <input\r\n                        value={this.state.firstName}\r\n                        onChange={(e) => this.setState({\r\n                            firstName: e.target.value\r\n                        })}\r\n                        className={\"form-control\"}\r\n                        placeholder={\"First Name\"}/>\r\n                    <br/>\r\n                    <input\r\n                        value={this.state.lastName}\r\n                        onChange={(e) => this.setState({\r\n                            lastName: e.target.value\r\n                        })}\r\n                        className={`form-control`}\r\n                        placeholder={\"Last Name\"}/>\r\n                    <br/>\r\n                    <input\r\n                        value={this.state.dateOfBirth}\r\n                        onChange={(e) => this.setState({\r\n                            dateOfBirth: e.target.value\r\n                        })}\r\n                        className={`form-control`}\r\n                        placeholder={\"Date of Birth     (YYYY-MM-DD)\"}/>\r\n                    <br/>\r\n                    <input\r\n                        value={this.state.joiningDate}\r\n                        onChange={(e) => this.setState({\r\n                            joiningDate: e.target.value\r\n                        })}\r\n                        className={`form-control`}\r\n                        placeholder={\"Date of Joining       (YYYY-MM-DD)\"}/>\r\n                    <br/>\r\n                    <input\r\n                        value={this.state.status}\r\n                        onChange={(e) => this.setState({\r\n                            status: e.target.value\r\n                        })}\r\n                        className={`form-control`}\r\n                        placeholder={\"Status\"}/>\r\n                    <br/>\r\n                    <input\r\n                        value={this.state.designation}\r\n                        onChange={(e) => this.setState({\r\n                            designation: e.target.value\r\n                        })}\r\n                        className={`form-control`}\r\n                        placeholder={\"Designation\"}/>\r\n                    <br/>\r\n                    <input\r\n                        value={this.state.education}\r\n                        onChange={(e) => this.setState({\r\n                            education: e.target.value\r\n                        })}\r\n                        className={`form-control`}\r\n                        placeholder={\"Education\"}/>\r\n                    <br/>\r\n                    <input\r\n                        value={this.state.certification}\r\n                        onChange={(e) => this.setState({\r\n                            certification: e.target.value\r\n                        })}\r\n                        className={`form-control`}\r\n                        placeholder={\"Certification\"}/>\r\n                    <br/>\r\n                    <div>\r\n                        <select\r\n                            className={\"form-control\"}\r\n                            value={this.state.department}\r\n                            onChange={this.handleSelectDeptChange}>\r\n                            <option>ENT</option>\r\n                            <option>CARDIOLOGY</option>\r\n                            <option>GYNAECOLOGY</option>\r\n                            <option>ORTHOPAEDIC</option>\r\n                            <option>PEDIATRIC</option>\r\n                        </select>\r\n                    </div>\r\n                    <br/>\r\n                    <div>\r\n                        <select\r\n                            className={\"form-control\"}\r\n                            value={this.state.gender}\r\n                            onChange={this.handleSelectGenderChange}>\r\n                            <option>Male</option>\r\n                            <option>Female</option>\r\n                            <option>Other</option>\r\n                        </select>\r\n                    </div>\r\n                    <br/>\r\n                    <button\r\n                        onClick={this.validateDoctorProfile}\r\n                        // onClick={() => this.registerDoctorInfo(this.state)}\r\n                        className=\"btn btn-primary btn-block\">\r\n                        SUBMIT\r\n                    </button>\r\n                </div>\r\n                <hr/>\r\n\r\n                <button\r\n                    onClickCapture={this.logout}\r\n                    className={\"btn btn-danger\"}\r\n                    onClick={this.logout}>\r\n                    Logout\r\n                </button>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from \"react\"\r\nimport {logout, profile, registerAdminStaffInfo} from \"../../services/UserService\";\r\n\r\nexport default class AdminStaffProfileReg extends React.Component {\r\n    state = {\r\n        profile: {\r\n            username: '',\r\n            password: '',\r\n            firstName: '',\r\n            lastName: '',\r\n            dateOfBirth: '',\r\n            status: '',\r\n            joiningDate: '',\r\n            jobTitle: '',\r\n            jobDescription: '',\r\n            gender: 'Male',\r\n            department: 'ENT'\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        profile()\r\n            .then(profile => this.setState({\r\n                profile: profile,\r\n                username: profile.username,\r\n                password: profile.password,\r\n                firstName: '',\r\n                lastName: '',\r\n                dateOfBirth: '',\r\n                status: '',\r\n                joiningDate: '',\r\n                jobTitle: '',\r\n                jobDescription: '',\r\n                gender: 'Male',\r\n                department: 'ENT'\r\n            }))\r\n    }\r\n\r\n    isValidDate = (dateString) => {\r\n        let regEx = /^\\d{4}-\\d{2}-\\d{2}$/;\r\n        if(!dateString.match(regEx)) return false;  // Invalid format\r\n        let d = new Date(dateString);\r\n        let dNum = d.getTime();\r\n        if(!dNum && dNum !== 0) return false; // NaN value, Invalid date\r\n        return d.toISOString().slice(0,10) === dateString;\r\n    }\r\n\r\n    validateAdminStaffProfile = () => {\r\n        if (this.state.firstName === '') {\r\n            alert(\"First Name cannot be empty :(\")\r\n            return false\r\n        }\r\n        else if (this.state.lastName === '') {\r\n            alert(\"Last Name cannot be empty :(\")\r\n            return false\r\n        }\r\n        else if (this.state.dateOfBirth === '') {\r\n            alert(\"Date of Birth cannot be empty :(\")\r\n            return false\r\n        }\r\n        else if (!this.isValidDate(this.state.dateOfBirth)) {\r\n            alert(\"Date of Birth format is invalid :(\")\r\n            return false\r\n        }\r\n        else if (this.state.joiningDate === '') {\r\n            alert(\"Joining Date cannot be empty :(\")\r\n            return false\r\n        }\r\n        else if (!this.isValidDate(this.state.joiningDate)) {\r\n            alert(\"Joining date format is invalid :(\")\r\n            return false\r\n        }\r\n        else if (this.state.jobTitle === '') {\r\n            alert(\"Job Title cannot be empty :(\")\r\n            return false\r\n        }\r\n        else {\r\n            this.registerAdminStaffInfo(this.state)\r\n        }\r\n    };\r\n\r\n    logout = () => logout()\r\n        .then(status => this.props.history.push(\"/\"))\r\n\r\n    registerAdminStaffInfo = (adminStaff) =>\r\n        registerAdminStaffInfo(adminStaff)\r\n            .then(this.logout);\r\n\r\n\r\n    handleSelectGenderChange = event => {\r\n        this.setState({gender: event.target.value});\r\n        console.log(this.state)\r\n    }\r\n\r\n    handleSelectDeptChange = event => {\r\n        this.setState({department: event.target.value});\r\n        console.log(this.state)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Administrative Staff Profile</h1>\r\n                Hi {this.state.profile.username}!\r\n                <br/>\r\n                <b>User Type:</b> Administrator\r\n                <br/>\r\n                <hr/>\r\n                <h3>Complete your profile</h3>\r\n                <br/>\r\n                <div>\r\n                    <input\r\n                        value={this.state.firstName}\r\n                        onChange={(e) => this.setState({\r\n                            firstName: e.target.value\r\n                        })}\r\n                        className={\"form-control\"}\r\n                        placeholder={\"First Name\"}/>\r\n                    <br/>\r\n                    <input\r\n                        value={this.state.lastName}\r\n                        onChange={(e) => this.setState({\r\n                            lastName: e.target.value\r\n                        })}\r\n                        className={`form-control`}\r\n                        placeholder={\"Last Name\"}/>\r\n                    <br/>\r\n                    <input\r\n                        value={this.state.dateOfBirth}\r\n                        onChange={(e) => this.setState({\r\n                            dateOfBirth: e.target.value\r\n                        })}\r\n                        className={`form-control`}\r\n                        placeholder={\"Date of Birth     (YYYY-MM-DD)\"}/>\r\n                    <br/>\r\n                    <input\r\n                        value={this.state.joiningDate}\r\n                        onChange={(e) => this.setState({\r\n                            joiningDate: e.target.value\r\n                        })}\r\n                        className={`form-control`}\r\n                        placeholder={\"Date of Joining       (YYYY-MM-DD)\"}/>\r\n                    <br/>\r\n                    <input\r\n                        value={this.state.status}\r\n                        onChange={(e) => this.setState({\r\n                            status: e.target.value\r\n                        })}\r\n                        className={`form-control`}\r\n                        placeholder={\"Status\"}/>\r\n                    <br/>\r\n                    <input\r\n                        value={this.state.jobTitle}\r\n                        onChange={(e) => this.setState({\r\n                            jobTitle: e.target.value\r\n                        })}\r\n                        className={`form-control`}\r\n                        placeholder={\"Job Title\"}/>\r\n                    <br/>\r\n                    <input\r\n                        value={this.state.jobDescription}\r\n                        onChange={(e) => this.setState({\r\n                            jobDescription: e.target.value\r\n                        })}\r\n                        className={`form-control`}\r\n                        placeholder={\"Job Description\"}/>\r\n                    <br/>\r\n                    <div>\r\n                        <select\r\n                            className={\"form-control\"}\r\n                            value={this.state.department}\r\n                            onChange={this.handleSelectDeptChange}>\r\n                            <option>ENT</option>\r\n                            <option>CARDIOLOGY</option>\r\n                            <option>GYNAECOLOGY</option>\r\n                            <option>ORTHOPAEDIC</option>\r\n                            <option>PEDIATRIC</option>\r\n                        </select>\r\n                    </div>\r\n                    <br/>\r\n                    <div>\r\n                        <select\r\n                            className={\"form-control\"}\r\n                            value={this.state.gender}\r\n                            onChange={this.handleSelectGenderChange}>\r\n                            <option>Male</option>\r\n                            <option>Female</option>\r\n                            <option>Other</option>\r\n                        </select>\r\n                    </div>\r\n                    <br/>\r\n                    <button\r\n                        onClick={this.validateAdminStaffProfile}\r\n                        // onClick={() => this.registerAdminStaffInfo(this.state)}\r\n                        className=\"btn btn-primary btn-block\">\r\n                        SUBMIT\r\n                    </button>\r\n                </div>\r\n                <hr/>\r\n\r\n                <button\r\n                    onClickCapture={this.logout}\r\n                    className={\"btn btn-danger\"}\r\n                    onClick={this.logout}>\r\n                    Logout\r\n                </button>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from \"react\"\r\nimport {logout, profile, registerPersonAddr} from \"../../services/UserService\";\r\nimport PatientNavBar from \"../../react/PatientNavBar\";\r\nimport DoctorNavBar from \"../../react/DoctorNavBar\";\r\nimport AdminNavBar from \"../../react/AdminNavBar\";\r\n\r\nexport default class PersonAddressReg extends React.Component {\r\n\r\n    state = {\r\n        profile: {\r\n            username: '',\r\n            password: '',\r\n            firstName: '',\r\n            lastName: '',\r\n            house: '',\r\n            street1: '',\r\n            street2: '',\r\n            city: '',\r\n            state: '',\r\n            zip: ''\r\n        },\r\n\r\n    }\r\n\r\n    logout = () => logout()\r\n        .then(status => this.props.history.push(\"/\"))\r\n\r\n    registerPersonAddr = (address) =>\r\n        registerPersonAddr(address, this.state.username)\r\n            .then(() => {\r\n                alert(\"Address added to profile successfully\")\r\n            });\r\n\r\n    componentDidMount() {\r\n        profile()\r\n            .then(profile => this.setState({\r\n                profile: profile,\r\n                username: profile.username,\r\n                password: profile.password,\r\n                house: '',\r\n                street1: '',\r\n                street2: '',\r\n                city: '',\r\n                state: '',\r\n                zip: ''\r\n            }))\r\n    }\r\n\r\n    validatePatientAddress = () => {\r\n        if (this.state.house === '') {\r\n            alert(\"House cannot be empty :(\")\r\n            return false\r\n        } else if (this.state.street1 === '') {\r\n            alert(\"Street1 cannot be empty :(\")\r\n            return false\r\n        } else if (this.state.city === '') {\r\n            alert(\"City cannot be empty :(\")\r\n            return false\r\n        } else if (this.state.state === '') {\r\n            alert(\"State cannot be empty :(\")\r\n            return false\r\n        }\r\n        else if (this.state.zip === '') {\r\n            alert(\"Zip cannot be empty :(\")\r\n            return false\r\n        } else {\r\n            this.registerPersonAddr(this.state, this.state.username)\r\n        }\r\n\r\n    };\r\n\r\n    renderNavBar() {\r\n        if (this.state.profile.userType === \"Patient\") {\r\n            return <PatientNavBar/>\r\n        } else if (this.state.profile.userType === \"Doctor\") {\r\n            return <DoctorNavBar/>\r\n        } else if (this.state.profile.userType === \"Admin Staff\") {\r\n            return <AdminNavBar/>\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.renderNavBar()}\r\n                <hr/>\r\n                <h1>Contact Information</h1>\r\n                Hi {this.state.profile.username}!\r\n                <hr/>\r\n                <h3>Add address to your profile</h3>\r\n                <br/>\r\n                <div>\r\n                    <input\r\n                        value={this.state.house}\r\n                        onChange={(e) => this.setState({\r\n                            house: e.target.value\r\n                        })}\r\n                        className={\"form-control\"}\r\n                        placeholder={\"House (Name, Number #)\"}/>\r\n                    <br/>\r\n                    <input\r\n                        value={this.state.street1}\r\n                        onChange={(e) => this.setState({\r\n                            street1: e.target.value\r\n                        })}\r\n                        className={`form-control`}\r\n                        placeholder={\"Street1\"}/>\r\n                    <br/>\r\n\r\n                    <input\r\n                        value={this.state.street2}\r\n                        onChange={(e) => this.setState({\r\n                            street2: e.target.value\r\n                        })}\r\n                        className={`form-control`}\r\n                        placeholder={\"Street 2 (optional)\"}/>\r\n                    <br/>\r\n\r\n                    <input\r\n                        value={this.state.city}\r\n                        onChange={(e) => this.setState({\r\n                            city: e.target.value\r\n                        })}\r\n                        className={`form-control`}\r\n                        placeholder={\"City\"}/>\r\n                    <br/>\r\n\r\n                    <input\r\n                        value={this.state.state}\r\n                        onChange={(e) => this.setState({\r\n                            state: e.target.value\r\n                        })}\r\n                        className={`form-control`}\r\n                        placeholder={\"State\"}/>\r\n                    <br/>\r\n\r\n                    <input\r\n                        value={this.state.zip}\r\n                        onChange={(e) => this.setState({\r\n                            zip: e.target.value\r\n                        })}\r\n                        className={`form-control`}\r\n                        placeholder={\"Zip\"}/>\r\n                    <br/>\r\n                    <button\r\n                        onClick={this.validatePatientAddress}\r\n                        // onClick={() => this.registerPatientAddr(this.state)}\r\n                        className=\"btn btn-primary btn-block\">\r\n                        SUBMIT\r\n                    </button>\r\n                </div>\r\n                <br/>\r\n                <button\r\n                    onClickCapture={this.logout}\r\n                    className={\"btn btn-danger\"}\r\n                    onClick={this.logout}>\r\n                    Logout\r\n                </button>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from \"react\"\r\nimport {logout, profile, registerPersonPhone} from \"../../services/UserService\";\r\nimport PatientNavBar from \"../../react/PatientNavBar\";\r\nimport DoctorNavBar from \"../../react/DoctorNavBar\";\r\nimport AdminNavBar from \"../../react/AdminNavBar\";\r\n\r\nexport default class PersonPhoneReg extends React.Component {\r\n    state = {\r\n        profile: {\r\n            username: '',\r\n            password: '',\r\n            firstName: '',\r\n            lastName: '',\r\n            phone: '',\r\n            isPrimary: ''\r\n        }\r\n    }\r\n\r\n    logout = () => logout()\r\n        .then(status => this.props.history.push(\"/\"))\r\n\r\n    registerPersonPhone = (address) =>\r\n        registerPersonPhone(address, this.state.username)\r\n            .then(() => {\r\n                alert(\"Phone added to profile successfully\")\r\n            });\r\n\r\n    componentDidMount() {\r\n        profile()\r\n            .then(profile => this.setState({\r\n                profile: profile,\r\n                username: profile.username,\r\n                password: profile.password,\r\n                phone: '',\r\n                isPrimary: 'false'\r\n            }))\r\n    }\r\n\r\n    validatePatientPhone = () => {\r\n        if (this.state.phone === '') {\r\n            alert(\"Phone cannot be empty :(\")\r\n            return false\r\n        } else {\r\n            this.registerPersonPhone(this.state, this.state.username)\r\n        }\r\n    };\r\n\r\n    handleSelectPhoneChange = event => {\r\n        this.setState({isPrimary: event.target.value});\r\n        console.log(this.state)\r\n    }\r\n\r\n    renderNavBar() {\r\n        if (this.state.profile.userType === \"Patient\") {\r\n            return <PatientNavBar/>\r\n        } else if (this.state.profile.userType === \"Doctor\") {\r\n            return <DoctorNavBar/>\r\n        } else if (this.state.profile.userType === \"Admin Staff\") {\r\n            return <AdminNavBar/>\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.renderNavBar()}\r\n                <hr/>\r\n                <h1>Contact Information</h1>\r\n                Hi {this.state.profile.username}!\r\n                <hr/>\r\n                <h3>Add address to your profile</h3>\r\n                <br/>\r\n                <div>\r\n                    <input\r\n                        value={this.state.phone}\r\n                        onChange={(e) => this.setState({\r\n                            phone: e.target.value\r\n                        })}\r\n                        className={\"form-control\"}\r\n                        placeholder={\"Phone (###-##-####)\"}/>\r\n                    <br/>\r\n\r\n                    <div>\r\n                        <select\r\n                            className={\"form-control\"}\r\n                            value={this.state.isPrimary}\r\n                            onChange={this.handleSelectPhoneChange}>\r\n                            <option value={\"false\"}>No</option>\r\n                            <option value={\"true\"}>Yes</option>\r\n                        </select>\r\n                    </div>\r\n                    <br/>\r\n                    <button\r\n                        onClick={this.validatePatientPhone}\r\n                        // onClick={() => this.registerPatientAddr(this.state)}\r\n                        className=\"btn btn-primary btn-block\">\r\n                        SUBMIT\r\n                    </button>\r\n                </div>\r\n\r\n                <br/>\r\n                <button\r\n                    onClickCapture={this.logout}\r\n                    className={\"btn btn-danger\"}\r\n                    onClick={this.logout}>\r\n                    Logout\r\n                </button>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from \"react\"\r\nimport {logout, profile, registerAppointment} from \"../../services/UserService\";\r\nimport DoctorNavBar from \"../../react/DoctorNavBar\";\r\n\r\nexport default class AppointmentReg extends React.Component {\r\n    state = {\r\n        profile: {\r\n            username: '',\r\n            password: '',\r\n            firstName: '',\r\n            lastName: '',\r\n            patUsername: '',\r\n            dateOfAppointment: '',\r\n            notes: '',\r\n            time: '',\r\n        },\r\n    }\r\n\r\n    logout = () => logout()\r\n        .then(status => this.props.history.push(\"/\"))\r\n\r\n    registerAppointment = (address) =>\r\n        registerAppointment(address, this.state.username, this.state.patUsername)\r\n            .then((response) => {\r\n                if (response.status === 500) {\r\n                    console.log(response)\r\n                    alert(\"Problem adding appointment :o  \" +\r\n                        \"Tip: Check patient's username :)\")\r\n                } else {\r\n                    console.log(response)\r\n                    alert(\"Appointment added successfully :)\")\r\n                }\r\n            });\r\n\r\n    componentDidMount() {\r\n        profile()\r\n            .then(profile => this.setState({\r\n                profile: profile,\r\n                username: profile.username,\r\n                password: profile.password,\r\n                firstName: '',\r\n                lastName: '',\r\n                patUsername:'',\r\n                dateOfAppointment: '',\r\n                notes: '',\r\n                time: '',\r\n            }))\r\n    }\r\n\r\n    isValidDate = (dateString) => {\r\n        let regEx = /^\\d{4}-\\d{2}-\\d{2}$/;\r\n        if (!dateString.match(regEx)) return false;  // Invalid format\r\n        let d = new Date(dateString);\r\n        let dNum = d.getTime();\r\n        if (!dNum && dNum !== 0) return false; // NaN value, Invalid dateOfAppointment\r\n        return d.toISOString().slice(0, 10) === dateString;\r\n    }\r\n\r\n    validateAppointment = () => {\r\n        if (this.state.patUsername === '') {\r\n            alert(\"Patient username cannot be empty :(\")\r\n            return false\r\n        } else if (this.state.time === '') {\r\n            alert(\"Time cannot be empty :(\")\r\n            return false\r\n        } else if (!this.isValidDate(this.state.dateOfAppointment)) {\r\n            alert(\"Date of Appointment is invalid :(\")\r\n            return false\r\n        }  else {\r\n            this.registerAppointment(this.state, this.state.username, this.state.patUsername)\r\n        }\r\n\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <DoctorNavBar/>\r\n                <hr/>\r\n                <h1>Appointment Information</h1>\r\n                Hi {this.state.profile.username}!\r\n                <hr/>\r\n                <h3>Add appointments for your patients</h3>\r\n                <br/>\r\n                <div>\r\n                    <input\r\n                        value={this.state.patUsername}\r\n                        onChange={(e) => this.setState({\r\n                            patUsername: e.target.value\r\n                        })}\r\n                        className={\"form-control\"}\r\n                        placeholder={\"Patient's Username\"}/>\r\n                    <br/>\r\n                    <input\r\n                        value={this.state.notes}\r\n                        onChange={(e) => this.setState({\r\n                            notes: e.target.value\r\n                        })}\r\n                        className={`form-control`}\r\n                        placeholder={\"Notes\"}/>\r\n                    <br/>\r\n\r\n                    <input\r\n                        value={this.state.time}\r\n                        onChange={(e) => this.setState({\r\n                            time: e.target.value\r\n                        })}\r\n                        className={`form-control`}\r\n                        placeholder={\"Time\"}/>\r\n                    <br/>\r\n\r\n                    <input\r\n                        value={this.state.dateOfAppointment}\r\n                        onChange={(e) => this.setState({\r\n                            dateOfAppointment: e.target.value\r\n                        })}\r\n                        className={`form-control`}\r\n                        placeholder={\"Date (YYYY-MM-DD)\"}/>\r\n                    <br/>\r\n\r\n                    <button\r\n                        onClick={this.validateAppointment}\r\n                        // onClick={() => this.registerAppointment(this.state)}\r\n                        className=\"btn btn-primary btn-block\">\r\n                        SUBMIT\r\n                    </button>\r\n                </div>\r\n                <br/>\r\n                <button\r\n                    onClickCapture={this.logout}\r\n                    className={\"btn btn-danger\"}\r\n                    onClick={this.logout}>\r\n                    Logout\r\n                </button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from \"react\"\r\nimport {logout, profile, registerMedicalTest, registerMedication, registerPrescription} from \"../../services/UserService\";\r\nimport DoctorNavBar from \"../../react/DoctorNavBar\";\r\n\r\nexport default class PrescriptionReg extends React.Component {\r\n    state = {\r\n        profile: {\r\n            username: '',\r\n            password: '',\r\n            patUsername: '',\r\n            prescriptionDate: '',\r\n            refillData: '',\r\n            substitutionPermitted: 'false',\r\n            medicineName: '',\r\n            quantity: 0,\r\n            price: 0.00,\r\n            dosage: '',\r\n            testType: '',\r\n            testResults: '',\r\n            testDate: ''\r\n        },\r\n    }\r\n\r\n    componentDidMount() {\r\n        profile()\r\n            .then(profile => this.setState({\r\n                profile: profile,\r\n                username: profile.username,\r\n                password: profile.password,\r\n                patUsername: '',\r\n                prescriptionDate: '',\r\n                medicationDate: '',\r\n                refillData: '',\r\n                substitutionPermitted: 'false',\r\n                medicineName: '',\r\n                quantity: '',\r\n                price: '',\r\n                dosage: '',\r\n                testType: '',\r\n                testResults: '',\r\n                testDate: ''\r\n            }))\r\n    }\r\n\r\n    /**\r\n     * Useful methods that perform fetch, validation and rendering.\r\n     */\r\n    logout = () => logout()\r\n        .then(status => this.props.history.push(\"/\"))\r\n\r\n    isValidDate = (dateString) => {\r\n        let regEx = /^\\d{4}-\\d{2}-\\d{2}$/;\r\n        if (!dateString.match(regEx)) return false;  // Invalid format\r\n        let d = new Date(dateString);\r\n        let dNum = d.getTime();\r\n        if (!dNum && dNum !== 0) return false; // NaN value, Invalid dateOfAppointment\r\n        return d.toISOString().slice(0, 10) === dateString;\r\n    }\r\n\r\n    isEmpty(obj) {\r\n        for (const key in obj) {\r\n            if (obj.hasOwnProperty(key))\r\n                return false;\r\n        }\r\n        return true;\r\n    };\r\n\r\n    registerPrescription = (prescription) =>\r\n        registerPrescription(prescription, this.state.username, this.state.patUsername)\r\n            .then((response) => {\r\n                if (response.status === 500 || this.isEmpty(response)) {\r\n                    console.log(response)\r\n                    alert(\"Prescription cannot be added :o\" +\r\n                        \"Tip: Check patient username or prescription already exists!\")\r\n                } else {\r\n                    console.log(response)\r\n                    alert(\"Prescription added successfully :)\")\r\n                }\r\n            });\r\n\r\n    medicationRegister = (medication) =>\r\n        registerMedication(medication, this.state.username, this.state.patUsername, this.state.prescriptionDate)\r\n            .then((response) => {\r\n                if (response.status === 500) {\r\n                    console.log(response)\r\n                    alert(\"Medication cannot be added :o  Prescription doesn't exist.  \" +\r\n                        \"Tip: Create a prescription first :)\")\r\n                } else {\r\n                    console.log(response)\r\n                    alert(\"Medication added successfully :)\")\r\n                }\r\n            });\r\n\r\n    medicalTestRegistration = (medicalTest) =>\r\n        registerMedicalTest(medicalTest, this.state.username, this.state.patUsername, this.state.prescriptionDate)\r\n            .then((response) => {\r\n                if (response.status === 500) {\r\n                    console.log(response)\r\n                    alert(\"Medical test cannot be added :o  Prescription doesn't exist. \" +\r\n                        \"Tip: Create a prescription first :)\")\r\n                } else {\r\n                    console.log(response)\r\n                    alert(\"Medical Test added successfully :)\")\r\n                }\r\n            });\r\n\r\n    validatePrescription = () => {\r\n        if (this.state.patUsername === '') {\r\n            alert(\"Patient username cannot be empty :(\")\r\n            return false\r\n        } else if (this.state.prescriptionDate === '') {\r\n            alert(\"Prescription date cannot be empty :(\")\r\n            return false\r\n        } else if (!this.isValidDate(this.state.prescriptionDate)) {\r\n            alert(\"Date of Appointment is invalid :(\")\r\n            return false\r\n        } else if (this.state.refillData === '') {\r\n            alert(\"Refill data cannot be empty :(\")\r\n            return false\r\n        } else {\r\n            this.registerPrescription(this.state, this.state.username, this.state.patUsername)\r\n        }\r\n    };\r\n\r\n    validateMedication = () => {\r\n        if (this.state.medicineName === '') {\r\n            alert(\"Drug name cannot be empty :(\")\r\n            return false\r\n        } else if (this.state.quantity === '') {\r\n            alert(\"Quantity cannot be empty :(\")\r\n            return false\r\n        } else if (this.state.dosage === '') {\r\n            alert(\"Dosage information cannot be empty :(\")\r\n            return false\r\n        } else {\r\n            this.medicationRegister(this.state)\r\n        }\r\n    };\r\n\r\n    validateMedicalTest = () => {\r\n        if (this.state.testType === '') {\r\n            alert(\"Test type cannot be empty :(\")\r\n            return false\r\n        }  else if (this.state.prescriptionDate === '') {\r\n            alert(\"Test date cannot be empty :(\")\r\n            return false\r\n        } else if (!this.isValidDate(this.state.prescriptionDate)) {\r\n            alert(\"Test date is invalid :(\")\r\n            return false\r\n        }  else {\r\n            this.medicalTestRegistration(this.state)\r\n        }\r\n\r\n    };\r\n\r\n    handleSelectSubstitutionChange = event => {\r\n        this.setState({substitutionPermitted: event.target.value});\r\n        console.log(this.state)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <DoctorNavBar/>\r\n                <hr/>\r\n                <h1>PRESCRIPTION INFORMATION</h1>\r\n                By doctor:  <b>{this.state.profile.username}</b>\r\n                <hr/>\r\n                <h3>ADD PRESCRIPTION FOR PATIENT</h3>\r\n                <br/>\r\n                <div>\r\n                    <input\r\n                        value={this.state.patUsername}\r\n                        onChange={(e) => this.setState({\r\n                            patUsername: e.target.value\r\n                        })}\r\n                        className={\"form-control\"}\r\n                        placeholder={\"Patient's Username\"}/>\r\n                    <br/>\r\n                    <input\r\n                        value={this.state.prescriptionDate}\r\n                        onChange={(e) => this.setState({\r\n                            prescriptionDate: e.target.value\r\n                        })}\r\n                        className={`form-control`}\r\n                        placeholder={\"Date on Prescription (YYYY-MM-DD)\"}/>\r\n                    <br/>\r\n\r\n                    <input\r\n                        value={this.state.refillData}\r\n                        onChange={(e) => this.setState({\r\n                            refillData: e.target.value\r\n                        })}\r\n                        className={`form-control`}\r\n                        placeholder={\"Refill Data\"}/>\r\n                    <br/>\r\n\r\n                    <div>\r\n                        <select\r\n                            className={\"form-control\"}\r\n                            value={this.state.substitutionPermitted}\r\n                            onChange={this.handleSelectSubstitutionChange}>\r\n                            <option value={\"false\"}>Substitution allowed: NO</option>\r\n                            <option value={\"true\"}>Substitution allowed: YES</option>\r\n                        </select>\r\n                    </div>\r\n                    <br/>\r\n                    <button\r\n                        onClick={this.validatePrescription}\r\n                        // onClick={() => this.registerAppointment(this.state)}\r\n                        className=\"btn btn-primary btn-block\">\r\n                        ADD PRESCRIPTION\r\n                    </button>\r\n                    <br/>\r\n\r\n                    <h3>ADD MEDICATION TO PRESCRIPTION</h3>\r\n                    <hr/>\r\n                    <input\r\n                        value={this.state.medicineName}\r\n                        onChange={(e) => this.setState({\r\n                            medicineName: e.target.value\r\n                        })}\r\n                        className={\"form-control\"}\r\n                        placeholder={\"Name of drug\"}/>\r\n                    <br/>\r\n                    <input\r\n                        value={this.state.quantity}\r\n                        onChange={(e) => this.setState({\r\n                            quantity: e.target.value\r\n                        })}\r\n                        className={`form-control`}\r\n                        placeholder={\"Quantity\"}/>\r\n                    <br/>\r\n                    <input\r\n                        value={this.state.price}\r\n                        onChange={(e) => this.setState({\r\n                            price: e.target.value\r\n                        })}\r\n                        className={`form-control`}\r\n                        placeholder={\"Cost\"}/>\r\n                    <br/>\r\n                    <input\r\n                        value={this.state.dosage}\r\n                        onChange={(e) => this.setState({\r\n                            dosage: e.target.value\r\n                        })}\r\n                        className={`form-control`}\r\n                        placeholder={\"Dosage  (1--0--1)\"}/>\r\n                    <br/>\r\n                    <button\r\n                        onClick={this.validateMedication}\r\n                        // onClick={() => this.medicationRegister(this.state)}\r\n                        className=\"btn btn-primary btn-block\">\r\n                        ADD MEDICATION\r\n                    </button>\r\n                    <br/>\r\n\r\n                    <h3>ADD MEDICAL TESTS TO PRESCRIPTION</h3>\r\n                    <hr/>\r\n                    <input\r\n                        value={this.state.testType}\r\n                        onChange={(e) => this.setState({\r\n                            testType: e.target.value\r\n                        })}\r\n                        className={\"form-control\"}\r\n                        placeholder={\"Test Type\"}/>\r\n                    <br/>\r\n                    <input\r\n                        value={this.state.testResults}\r\n                        onChange={(e) => this.setState({\r\n                            testResults: e.target.value\r\n                        })}\r\n                        className={`form-control`}\r\n                        placeholder={\"Test Results (if any)\"}/>\r\n                    <br/>\r\n                    <input\r\n                        value={this.state.testDate}\r\n                        onChange={(e) => this.setState({\r\n                            testDate: e.target.value\r\n                        })}\r\n                        className={`form-control`}\r\n                        placeholder={\"Test Date (YYYY-MM-DD)\"}/>\r\n                    <br/>\r\n\r\n                    <button\r\n                        onClick={this.validateMedicalTest}\r\n                        // onClick={() => this.medicationRegister(this.state)}\r\n                        className=\"btn btn-primary btn-block\">\r\n                        ADD MEDICAL TEST\r\n                    </button>\r\n\r\n\r\n                </div>\r\n                <br/>\r\n                <button\r\n                    onClickCapture={this.logout}\r\n                    className={\"btn btn-danger\"}\r\n                    onClick={this.logout}>\r\n                    Logout\r\n                </button>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from \"react\";\r\nimport {logout, profile} from \"../../services/UserService\";\r\nimport PatientNavBar from \"../../react/PatientNavBar\";\r\nimport DoctorNavBar from \"../../react/DoctorNavBar\";\r\nimport AdminNavBar from \"../../react/AdminNavBar\";\r\n\r\nexport default class ViewPersonAddrPhone extends React.Component {\r\n\r\n    state = {\r\n        phones: [],\r\n        addresses: [],\r\n\r\n        profile: {\r\n            username: '',\r\n            userType: ''\r\n        },\r\n    }\r\n\r\n    componentDidMount() {\r\n        profile()\r\n            .then(profile => this.setState({\r\n                profile: profile\r\n            }))\r\n            .then(this.findAllAddresses)\r\n            .then(this.findAllPhones)\r\n    }\r\n\r\n    logout = () => logout()\r\n        .then(status => this.props.history.push(\"/\"))\r\n\r\n    findAllAddresses = () =>\r\n        fetch(\"api/address/find/persons/\" + this.state.profile.username)\r\n            .then(response => response.json())\r\n            .then(allAddresses => this.setState({\r\n                addresses: allAddresses\r\n            }))\r\n            .catch(() => console.log(\"Can’t access response. Blocked by browser?\"));\r\n\r\n    findAllPhones = () =>\r\n        fetch(\"api/phones/find/persons/\" + this.state.profile.username)\r\n            .then(response => response.json())\r\n            .then(allPhones => this.setState({\r\n                phones: allPhones\r\n            }))\r\n            .catch(() => console.log(\"Can’t access response. Blocked by browser?\"));\r\n\r\n    renderNavBar() {\r\n        if (this.state.profile.userType === \"Patient\") {\r\n            return <PatientNavBar/>\r\n        } else if (this.state.profile.userType === \"Doctor\") {\r\n            return <DoctorNavBar/>\r\n        } else if (this.state.profile.userType === \"Admin Staff\") {\r\n            return <AdminNavBar/>\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.renderNavBar()}\r\n                <hr/>\r\n                <div>\r\n                    <h2>ADDRESS INFORMATION</h2>\r\n                    For user: <b>{this.state.profile.username}</b>\r\n                    <hr/>\r\n                    <ul>{this.state.addresses\r\n                        .map(\r\n                            address =>\r\n                                <li key={address.id}>\r\n                                    <h4>Address</h4>\r\n                                    <p><b>House:</b> {address.house}</p>\r\n                                    <p><b>Street 1:</b> {address.street1}</p>\r\n                                    <p><b>Street 2:</b> {address.street2}</p>\r\n                                    <p><b>City:</b> {address.city}</p>\r\n                                    <p><b>State:</b> {address.state}</p>\r\n                                    <p><b>Zip:</b> {address.zip}</p>\r\n                                </li>\r\n                        )\r\n                    }\r\n                    </ul>\r\n                </div>\r\n                <hr/>\r\n                <div>\r\n                    <h2>PHONE INFORMATION</h2>\r\n                    For user: <b>{this.state.profile.username}</b>\r\n                    <hr/>\r\n                    <ul>{this.state.phones\r\n                        .map(\r\n                            phone =>\r\n                                <li key={phone.id}>\r\n                                    <h4>Phone</h4>\r\n                                    <p><b>Contact:</b> {phone.phone}</p>\r\n                                    <p><b>Primary:</b> {phone.isPrimary}</p>\r\n                                </li>\r\n                        )\r\n                    }\r\n                    </ul>\r\n                </div>\r\n                <hr/>\r\n                <button\r\n                    onClickCapture={this.logout}\r\n                    className={\"btn btn-danger\"}\r\n                    onClick={this.logout}>\r\n                    Logout\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\"\r\nimport {logout, profile, registerPatientAllergy} from \"../../services/UserService\";\r\nimport PatientNavBar from \"../../react/PatientNavBar\";\r\n\r\nexport default class PatientAllergyReg extends React.Component {\r\n    state = {\r\n        profile: {\r\n            username: '',\r\n            password: '',\r\n            firstName: '',\r\n            lastName: '',\r\n            allergyInfo: '',\r\n            allergyCause: ''\r\n        }\r\n    }\r\n\r\n    logout = () => logout()\r\n        .then(status => this.props.history.push(\"/\"))\r\n\r\n    registerPatientAllergy = (allergy) =>\r\n        registerPatientAllergy(allergy, this.state.username)\r\n            .then(() => {\r\n                alert(\"Allergy added to profile successfully\")\r\n            });\r\n\r\n    componentDidMount() {\r\n        profile()\r\n            .then(profile => this.setState({\r\n                profile: profile,\r\n                username: profile.username,\r\n                password: profile.password,\r\n                allergyInfo: '',\r\n                allergyCause: ''\r\n            }))\r\n    }\r\n\r\n    validateAllergy = () => {\r\n        if (this.state.allergyInfo === '') {\r\n            alert(\"Allergy information cannot be empty :(\")\r\n            return false\r\n        } else if (this.state.allergyCause === '') {\r\n            alert(\"Allergy cause cannot be empty :(\")\r\n            return false\r\n        } else {\r\n            this.registerPatientAllergy(this.state)\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <PatientNavBar/>\r\n                <hr/>\r\n                <h1>Contact Information</h1>\r\n                Hi {this.state.profile.username}!\r\n                <hr/>\r\n                <h3>Add an allergy to your profile</h3>\r\n                <br/>\r\n                <div>\r\n                    <input\r\n                        value={this.state.allergyInfo}\r\n                        onChange={(e) => this.setState({\r\n                            allergyInfo: e.target.value\r\n                        })}\r\n                        className={\"form-control\"}\r\n                        placeholder={\"Allergy Information\"}/>\r\n                    <br/>\r\n                    <input\r\n                        value={this.state.allergyCause}\r\n                        onChange={(e) => this.setState({\r\n                            allergyCause: e.target.value\r\n                        })}\r\n                        className={`form-control`}\r\n                        placeholder={\"Allergy Cause\"}/>\r\n                    <br/>\r\n                    <button\r\n                        onClick={this.validateAllergy}\r\n                        className=\"btn btn-primary btn-block\">\r\n                        SUBMIT\r\n                    </button>\r\n                </div>\r\n                <br/>\r\n                <button\r\n                    onClickCapture={this.logout}\r\n                    className={\"btn btn-danger\"}\r\n                    onClick={this.logout}>\r\n                    Logout\r\n                </button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from \"react\"\r\nimport {logout, profile, registerPatientInsurance} from \"../../services/UserService\";\r\nimport PatientNavBar from \"../../react/PatientNavBar\";\r\n\r\nexport default class PatientAllergyReg extends React.Component {\r\n    state = {\r\n        profile: {\r\n            username: '',\r\n            password: '',\r\n            firstName: '',\r\n            lastName: '',\r\n            insuranceDetails: '',\r\n            insuranceType: ''\r\n        }\r\n    }\r\n\r\n    logout = () => logout()\r\n        .then(status => this.props.history.push(\"/\"))\r\n\r\n    registerPatientInsurance = (insurance) =>\r\n        registerPatientInsurance(insurance, this.state.username)\r\n            .then(() => {\r\n                alert(\"Insurance details added to profile successfully\")\r\n            });\r\n\r\n    validateInsurance = () => {\r\n        if (this.state.insuranceDetails === '') {\r\n            alert(\"Insurance details cannot be empty :(\")\r\n            return false\r\n        } else if (this.state.insuranceType === '') {\r\n            alert(\"Insurance type  cannot be empty :(\")\r\n            return false\r\n        } else {\r\n            this.registerPatientInsurance(this.state)\r\n        }\r\n    };\r\n\r\n\r\n    componentDidMount() {\r\n        profile()\r\n            .then(profile => this.setState({\r\n                profile: profile,\r\n                username: profile.username,\r\n                password: profile.password,\r\n                insuranceDetails: '',\r\n                insuranceType: ''\r\n            }))\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <PatientNavBar/>\r\n                <hr/>\r\n                <h1>Contact Information</h1>\r\n                Hi {this.state.profile.username}!\r\n                <hr/>\r\n                <h3>Add an insurance to your profile</h3>\r\n                <br/>\r\n                <div>\r\n                    <input\r\n                        value={this.state.insuranceDetails}\r\n                        onChange={(e) => this.setState({\r\n                            insuranceDetails: e.target.value\r\n                        })}\r\n                        className={\"form-control\"}\r\n                        placeholder={\"Insurance Details\"}/>\r\n                    <br/>\r\n                    <input\r\n                        value={this.state.insuranceType}\r\n                        onChange={(e) => this.setState({\r\n                            insuranceType: e.target.value\r\n                        })}\r\n                        className={`form-control`}\r\n                        placeholder={\"Insurance Type\"}/>\r\n                    <br/>\r\n                    <button\r\n                        onClick={this.validateInsurance}\r\n                        className=\"btn btn-primary btn-block\">\r\n                        SUBMIT\r\n                    </button>\r\n                </div>\r\n                <br/>\r\n                <button\r\n                    onClickCapture={this.logout}\r\n                    className={\"btn btn-danger\"}\r\n                    onClick={this.logout}>\r\n                    Logout\r\n                </button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport {logout, profile} from \"../../services/UserService\";\r\nimport PatientNavBar from \"../../react/PatientNavBar\";\r\n\r\nexport default class ViewPatientAppointments extends React.Component {\r\n    state = {\r\n        appointments: [],\r\n\r\n        profile: {\r\n            username: '',\r\n            userType: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        profile()\r\n            .then(profile => this.setState({\r\n                profile: profile\r\n            }))\r\n            .then(this.findAllAppointments)\r\n    }\r\n\r\n    logout = () => logout()\r\n        .then(status => this.props.history.push(\"/\"))\r\n\r\n    findAllAppointments = () =>\r\n        fetch(\"api/appointment/find/patient/\" + this.state.profile.username)\r\n            .then(response => response.json())\r\n            .then(allAppointments => this.setState({\r\n                appointments: allAppointments\r\n            }))\r\n            .catch(() => console.log(\"Can’t access response. Blocked by browser?\"));\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <PatientNavBar/>\r\n                <hr/>\r\n                <div>\r\n                    <h2>APPOINTMENT INFORMATION</h2>\r\n                    For user: <b>{this.state.profile.username}</b>\r\n                    <hr/>\r\n                    <ul>{this.state.appointments\r\n                        .map(\r\n                            appointment =>\r\n                                <li key={appointment.id}>\r\n                                    <h4>Appointment</h4>\r\n                                    <p><b>Date:</b> {appointment.dateOfAppointment}</p>\r\n                                    <p><b>Time :</b> {appointment.time}</p>\r\n                                    <p><b>Notes :</b> {appointment.notes}</p>\r\n                                    <p><b>Doctor :</b> {appointment.doctor.firstName} {appointment.doctor.lastName}</p>\r\n                                </li>\r\n                        )\r\n                    }\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport {logout, profile} from \"../../services/UserService\";\r\nimport PatientNavBar from \"../../react/PatientNavBar\";\r\n\r\nexport default class ViewAllergyPatientProfile extends React.Component {\r\n    state = {\r\n        allergies: [],\r\n        profile: {\r\n            username: '',\r\n            userType: '',\r\n\r\n        },\r\n    }\r\n\r\n    logout = () => logout()\r\n        .then(status => this.props.history.push(\"/\"))\r\n\r\n    componentDidMount() {\r\n        profile()\r\n            .then(profile => this.setState({\r\n                profile: profile\r\n            }))\r\n            .then(this.findAllAllergies)\r\n    }\r\n\r\n    findAllAllergies = () =>\r\n        fetch(\"api/allergies/find/patient/\" + this.state.profile.username)\r\n            .then(response => response.json())\r\n            .then(allAllergies => this.setState({\r\n                allergies: allAllergies\r\n            }))\r\n            .catch(() => console.log(\"Can’t access response. Blocked by browser?\"));\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <PatientNavBar/>\r\n                <hr/>\r\n                <div>\r\n                    <h2>ALLERGY INFORMATION</h2>\r\n                    For user: <b>{this.state.profile.username}</b>\r\n                    <hr/>\r\n                    <ul>{this.state.allergies\r\n                        .map(\r\n                            allergies =>\r\n                                <li key={allergies.id}>\r\n                                    <h4>Allergy</h4>\r\n                                    <p><b>Allergy Info:</b> {allergies.allergyInfo}</p>\r\n                                    <p><b>Allergy Cause:</b> {allergies.allergyCause}</p>\r\n                                </li>\r\n                        )\r\n                    }\r\n                    </ul>\r\n                </div>\r\n                <hr/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}","import React from \"react\";\r\nimport {logout, profile} from \"../../services/UserService\";\r\nimport DoctorNavBar from \"../../react/DoctorNavBar\";\r\nimport FormControl from \"react-bootstrap/FormControl\";\r\nimport {Button} from \"react-bootstrap\";\r\nimport Form from \"react-bootstrap/Form\";\r\n\r\nexport default class ViewDoctorAppointments extends React.Component {\r\n    state = {\r\n        appointments: [],\r\n        date: '',\r\n        patUsername: '',\r\n        appointmentsByDate: [],\r\n        appointmentsByPatient: [],\r\n\r\n        profile: {\r\n            username: '',\r\n            userType: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        profile()\r\n            .then(profile => this.setState({\r\n                profile: profile,\r\n                date: '',\r\n                patUsername: '',\r\n                appointmentsByDate: [],\r\n                appointmentsByPatient: []\r\n            }))\r\n            .then(this.findAllAppointments)\r\n    }\r\n\r\n    logout = () => logout()\r\n        .then(status => this.props.history.push(\"/\"))\r\n\r\n    findAllAppointments = () =>\r\n        fetch(\"api/appointment/find/doctor/\" + this.state.profile.username)\r\n            .then(response => response.json())\r\n            .then(allAppointments => this.setState({\r\n                appointments: allAppointments\r\n            }))\r\n            .catch(() => console.log(\"Can’t access response. Blocked by browser?\"));\r\n\r\n    findAllAppointmentsByDoctorOnDate = () =>\r\n        fetch(\"api/doctor/\" + this.state.profile.username + \"/date/\" + this.state.date + \"/appointment\")\r\n            .then(response => response.json())\r\n            .then(appointmentsByDate => this.setState({\r\n                appointmentsByDate: appointmentsByDate\r\n            })).then(() => {\r\n            console.log(this.state.appointmentsByPatient)\r\n        })\r\n            .catch(() => console.log(\"Can’t access response. Blocked by browser?\"));\r\n\r\n    findAllAppointmentsByDoctorToPatient = () =>\r\n        fetch(\"api/doctor/\" + this.state.profile.username + \"/patient/\" + this.state.patUsername + \"/appointment\")\r\n            .then(response => response.json())\r\n            .then(appointmentsByPatient => this.setState({\r\n                appointmentsByPatient: appointmentsByPatient\r\n            })).then(() => {\r\n            console.log(this.state.appointmentsByPatient)\r\n        })\r\n            .catch(() => console.log(\"Can’t access response. Blocked by browser?\"));\r\n\r\n\r\n    isValidDate = (dateString) => {\r\n        let regEx = /^\\d{4}-\\d{2}-\\d{2}$/;\r\n        if (!dateString.match(regEx)) return false;  // Invalid format\r\n        let d = new Date(dateString);\r\n        let dNum = d.getTime();\r\n        if (!dNum && dNum !== 0) return false; // NaN value, Invalid date\r\n        return d.toISOString().slice(0, 10) === dateString;\r\n    }\r\n\r\n    validateSearch = () => {\r\n        if (this.state.patUsername === '') {\r\n            alert(\"Date cannot be empty :(\")\r\n            return false\r\n        } else {\r\n            this.findAllAppointmentsByDoctorToPatient()\r\n        }\r\n\r\n    };\r\n\r\n    renderTableData() {\r\n        return this.state.appointments.map((appointment, index) => {\r\n            const {id, dateOfAppointment, notes, time} = appointment //destructuring\r\n            const patientName = appointment.patient.firstName + \" \" + appointment.patient.lastName\r\n            const patientUserName = appointment.patient.username\r\n            return (\r\n                <tr key={id}>\r\n                    <td>{dateOfAppointment}</td>\r\n                    <td>{notes}</td>\r\n                    <td>{time}</td>\r\n                    <td>{patientName}</td>\r\n                    <td>{patientUserName}</td>\r\n                </tr>\r\n            )\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <DoctorNavBar/>\r\n                <hr/>\r\n                <div>\r\n                    <h2>APPOINTMENT INFORMATION</h2>\r\n                    <Form inline>\r\n                        <FormControl\r\n                            value={this.state.patUsername}\r\n                            onChange={(e) => this.setState({\r\n                                patUsername: e.target.value\r\n                            })}\r\n                            type=\"text\"\r\n                            placeholder=\"Patient's Username\"/>\r\n                        <Button\r\n                            onClick={this.validateSearch}\r\n                            variant={\"outline-primary\"}>Search</Button>\r\n                    </Form>\r\n                    <br/>\r\n                    <ul>{this.state.appointmentsByPatient\r\n                        .map(\r\n                            appointment =>\r\n                                <li style={{color: \"green\"}}\r\n                                    key={appointment.id}>\r\n                                    <h4>Appointment</h4>\r\n                                    <p><b>Date:</b> {appointment.dateOfAppointment}</p>\r\n                                    <p><b>Time :</b> {appointment.time}</p>\r\n                                    <p><b>Notes :</b> {appointment.notes}</p>\r\n                                    <p><b>Patient :</b> {appointment.patient.firstName}</p>\r\n                                </li>\r\n                        )\r\n                    }\r\n                    </ul>\r\n                    <hr/>\r\n                    <table id='table001'>\r\n                        <tbody>\r\n                        <th>Date</th>\r\n                        <th>Notes</th>\r\n                        <th>Time</th>\r\n                        <th>Patient</th>\r\n                        <th>Patient Username</th>\r\n                        {this.renderTableData()}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport {profile, logout} from \"../../services/UserService\";\r\nimport PatientNavBar from \"../../react/PatientNavBar\";\r\n\r\nexport default class ViewPatientInsurance extends React.Component {\r\n    state = {\r\n        insurances: [],\r\n        profile: {\r\n            username: '',\r\n            userType: '',\r\n\r\n        },\r\n    }\r\n\r\n    logout = () => logout()\r\n        .then(status => this.props.history.push(\"/\"))\r\n\r\n    componentDidMount() {\r\n        profile()\r\n            .then(profile => this.setState({\r\n                                               profile: profile\r\n                                           }))\r\n            .then(this.findAllInsurances)\r\n    }\r\n\r\n    findAllInsurances = () =>\r\n        fetch(\"api/insurances/find/patient/\" + this.state.profile.username)\r\n            .then(response => response.json())\r\n            .then(allInsurances => this.setState({\r\n                                                     insurances: allInsurances\r\n                                                 }))\r\n            .catch(() => console.log(\"Can’t access response. Blocked by browser?\"));\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <PatientNavBar/>\r\n                <hr/>\r\n                <div>\r\n                    <h2>INSURANCE INFORMATION</h2>\r\n                    For user: <b>{this.state.profile.username}</b>\r\n                    <hr/>\r\n                    <ul>{this.state.insurances\r\n                        .map(\r\n                            insurances =>\r\n                                <li key={insurances.id}>\r\n                                    <h4>Insurances</h4>\r\n                                    <p><b>Insurance Details:</b> {insurances.insuranceDetails}</p>\r\n                                    <p><b>Insurance Type:</b> {insurances.insuranceType}</p>\r\n                                </li>\r\n                        )\r\n                    }\r\n                    </ul>\r\n                </div>\r\n                <hr/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n","import React from \"react\";\r\nimport {logout, profile} from \"../../services/UserService\";\r\nimport DoctorNavBar from \"../../react/DoctorNavBar\";\r\n\r\nexport default class ViewDoctorAppointments extends React.Component {\r\n    state = {\r\n        prescriptions: [],\r\n\r\n        profile: {\r\n            username: '',\r\n            userType: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        profile()\r\n            .then(profile => this.setState({\r\n                profile: profile\r\n            }))\r\n            .then(this.findAllPrescriptions)\r\n    }\r\n\r\n    logout = () => logout()\r\n        .then(status => this.props.history.push(\"/\"))\r\n\r\n    findAllPrescriptions = () =>\r\n        fetch(\"api/prescription/find/doctor/\" + this.state.profile.username)\r\n            .then(response => response.json())\r\n            .then(allPrescriptions => this.setState({\r\n                prescriptions: allPrescriptions\r\n            }))\r\n            .catch(() => console.log(\"Can’t access response. Blocked by browser?\"));\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <DoctorNavBar/>\r\n                <hr/>\r\n                <div>\r\n                    <h2>PRESCRIPTION INFORMATION</h2>\r\n                    For user: <b>{this.state.profile.username}</b>\r\n                    <hr/>\r\n                    <ul>{this.state.prescriptions\r\n                        .map(\r\n                            prescription =>\r\n                                <li key={prescription.id}>\r\n                                    <h4>Prescription</h4>\r\n                                    <hr/>\r\n                                    <p><b>Date:</b> {prescription.prescriptionDate}</p>\r\n                                    <p><b>Refill Data:</b> {prescription.refillData}</p>\r\n                                    <p><b>Patient\r\n                                        Name:</b> {prescription.patient.firstName} {prescription.patient.lastName}</p>\r\n                                    <p><b>Medical Test: </b></p>\r\n                                    <table id={\"table001\"}>\r\n                                        {prescription.medicalTests.map(\r\n                                            medicalTest =>\r\n                                                <tr style={{color: \"indianred\"}} key={medicalTest.id}>\r\n                                                    <td><b>Type:</b> {medicalTest.testType}</td>\r\n                                                    <td><b>Results:</b> {medicalTest.testResults}</td>\r\n                                                    <td><b>Date:</b> {medicalTest.testDate}</td>\r\n                                                </tr>\r\n                                        )}\r\n                                    </table>\r\n                                    <p><b>Medication: </b></p>\r\n                                    <table id={\"table001\"}>\r\n                                        {prescription.medications.map(\r\n                                            medication =>\r\n                                                <tr style={{color: 'cadetblue'}}\r\n                                                    key={medication.id}>\r\n                                                    <td><b>Drug Name:</b> {medication.medicineName}</td>\r\n                                                    <td><b>Quantity:</b> {medication.quantity}</td>\r\n                                                    <td><b>Dosage:</b> {medication.dosage}</td>\r\n                                                    <td><b>Price:</b> {medication.price}</td>\r\n                                                </tr>\r\n                                        )}\r\n                                    </table>\r\n                                    <br/>\r\n                                </li>\r\n                        )\r\n                    }\r\n                    </ul>\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport {logout, profile} from \"../../services/UserService\";\r\nimport PatientNavBar from \"../../react/PatientNavBar\";\r\n\r\nexport default class ViewPatientAppointments extends React.Component {\r\n    state = {\r\n        prescriptions: [],\r\n\r\n        profile: {\r\n            username: '',\r\n            userType: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        profile()\r\n            .then(profile => this.setState({\r\n                profile: profile\r\n            }))\r\n            .then(this.findAllPrescriptions)\r\n    }\r\n\r\n    logout = () => logout()\r\n        .then(status => this.props.history.push(\"/\"))\r\n\r\n    findAllPrescriptions = () =>\r\n        fetch(\"api/prescription/find/patient/\" + this.state.profile.username)\r\n            .then(response => response.json())\r\n            .then(allPrescriptions => this.setState({\r\n                prescriptions: allPrescriptions\r\n            }))\r\n            .catch(() => console.log(\"Can’t access response. Blocked by browser?\"));\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <PatientNavBar/>\r\n                <hr/>\r\n                <h2>PRESCRIPTION INFORMATION</h2>\r\n                For user: <b>{this.state.profile.username}</b>\r\n                <hr/>\r\n                <ul>{this.state.prescriptions\r\n                    .map(\r\n                        prescription =>\r\n                            <li key={prescription.id}>\r\n                                <h4>Prescription</h4>\r\n                                <hr/>\r\n                                <p><b>Date:</b> {prescription.prescriptionDate}</p>\r\n                                <p><b>Refill Data:</b> {prescription.refillData}</p>\r\n                                <p><b>Doctor\r\n                                    Name:</b> {prescription.doctor.firstName} {prescription.doctor.lastName}</p>\r\n                                <p><b>Medical Test: </b></p>\r\n                                <table id={\"table001\"}>\r\n                                    {prescription.medicalTests.map(\r\n                                        medicalTest =>\r\n                                            <tr style={{color: \"indianred\"}} key={medicalTest.id}>\r\n                                                <td><b>Type:</b> {medicalTest.testType}</td>\r\n                                                <td><b>Results:</b> {medicalTest.testResults}</td>\r\n                                                <td><b>Date:</b> {medicalTest.testDate}</td>\r\n                                            </tr>\r\n                                    )}\r\n                                </table>\r\n\r\n                                <p><b>Medication: </b></p>\r\n                                <table id={\"table001\"}>\r\n                                    {prescription.medications.map(\r\n                                        medication =>\r\n                                            <tr style={{color: 'cadetblue'}}\r\n                                                key={medication.id}>\r\n                                                <td><b>Drug Name:</b> {medication.medicineName}</td>\r\n                                                <td><b>Quantity:</b> {medication.quantity}</td>\r\n                                                <td><b>Dosage:</b> {medication.dosage}</td>\r\n                                                <td><b>Price:</b> {medication.price}</td>\r\n                                            </tr>\r\n                                    )}\r\n                                </table>\r\n                            </li>\r\n                    )\r\n                }\r\n                </ul>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\"\r\nimport {logout, profile, updatePatientInfo} from \"../../services/UserService\";\r\nimport PatientNavBar from \"../../react/PatientNavBar\";\r\n\r\n\r\nexport default class UpdatePatientPersonalData extends React.Component {\r\n\r\n    state = {\r\n        profile: {\r\n            username: '',\r\n            password: '',\r\n            firstName: '',\r\n            lastName: '',\r\n            dateOfBirth: '',\r\n            dateOfAdmission: '',\r\n            medicalHistory: '',\r\n            gender: 'Male',\r\n        },\r\n    }\r\n\r\n    isValidDate = (dateString) => {\r\n        let regEx = /^\\d{4}-\\d{2}-\\d{2}$/;\r\n        if (!dateString.match(regEx)) return false;  // Invalid format\r\n        let d = new Date(dateString);\r\n        let dNum = d.getTime();\r\n        if (!dNum && dNum !== 0) return false; // NaN value, Invalid date\r\n        return d.toISOString().slice(0, 10) === dateString;\r\n    }\r\n\r\n    validatePatientProfile = () => {\r\n        if (this.state.firstName === '') {\r\n            alert(\"First Name cannot be empty :(\")\r\n            return false\r\n        } else if (this.state.lastName === '') {\r\n            alert(\"Last Name cannot be empty :(\")\r\n            return false\r\n        } else if (this.state.dateOfBirth === '') {\r\n            alert(\"Date of Birth cannot be empty :(\")\r\n            return false\r\n        } else if (!this.isValidDate(this.state.dateOfBirth)) {\r\n            alert(\"Date of Birth format is invalid :(\")\r\n            return false\r\n        } else if (this.state.dateOfAdmission === '') {\r\n            alert(\"Verify password cannot be empty :(\")\r\n            return false\r\n        } else if (!this.isValidDate(this.state.dateOfAdmission)) {\r\n            alert(\"Date of Admission format is invalid :(\")\r\n            return false\r\n        } else {\r\n            this.updatePatientInfo(this.state)\r\n        }\r\n\r\n    };\r\n\r\n    logout = () => logout()\r\n        .then(status => this.props.history.push(\"/\"))\r\n\r\n\r\n    componentDidMount() {\r\n        profile()\r\n            .then(profile => this.setState({\r\n                profile: profile,\r\n                username: profile.username,\r\n                password: profile.password,\r\n                firstName: '',\r\n                lastName: '',\r\n                dateOfBirth: '',\r\n                dateOfAdmission: '',\r\n                medicalHistory: '',\r\n                gender: 'Male'\r\n            }))\r\n    }\r\n\r\n    handleSelectChange = event => {\r\n        this.setState({gender: event.target.value});\r\n        console.log(this.state)\r\n    }\r\n\r\n    updatePatientInfo = (patient) =>\r\n        updatePatientInfo(patient, this.state.username)\r\n            .then((response) => {\r\n                if (response.status === 500) {\r\n                    console.log(response)\r\n                    alert(\"Problem updating profile :o  \")\r\n\r\n                } else {\r\n                    console.log(response)\r\n                    alert(\"Profile updated successfully :)\")\r\n                }\r\n            });\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <PatientNavBar/>\r\n                <hr/>\r\n                Hi {this.state.profile.username}!\r\n                <br/>\r\n                <b>User Type:</b> Patient\r\n                <br/>\r\n                <hr/>\r\n                <h3>UPDATE YOUR PROFILE</h3>\r\n                <br/>\r\n                <div>\r\n                    <input\r\n                        value={this.state.firstName}\r\n                        onChange={(e) => this.setState({\r\n                            firstName: e.target.value\r\n                        })}\r\n                        className={\"form-control\"}\r\n                        placeholder={\"First Name\"}/>\r\n                    <br/>\r\n                    <input\r\n                        value={this.state.lastName}\r\n                        onChange={(e) => this.setState({\r\n                            lastName: e.target.value\r\n                        })}\r\n                        className={`form-control`}\r\n                        placeholder={\"Last Name\"}/>\r\n                    <br/>\r\n\r\n                    <input\r\n                        value={this.state.dateOfBirth}\r\n                        onChange={(e) => this.setState({\r\n                            dateOfBirth: e.target.value\r\n                        })}\r\n                        className={`form-control`}\r\n                        placeholder={\"Date Of Birth  (YYYY-MM-DD)\"}/>\r\n                    <br/>\r\n\r\n                    <input\r\n                        value={this.state.dateOfAdmission}\r\n                        onChange={(e) => this.setState({\r\n                            dateOfAdmission: e.target.value\r\n                        })}\r\n                        className={`form-control`}\r\n                        placeholder={\"Date of Admission (YYYY-MM-DD)\"}/>\r\n                    <br/>\r\n\r\n                    <input\r\n                        value={this.state.medicalHistory}\r\n                        onChange={(e) => this.setState({\r\n                            medicalHistory: e.target.value\r\n                        })}\r\n                        className={`form-control`}\r\n                        placeholder={\"Medical History (if any)\"}/>\r\n                    <br/>\r\n                    <div>\r\n                        <select\r\n                            className={\"form-control\"}\r\n                            value={this.state.gender}\r\n                            onChange={this.handleSelectChange}>\r\n                            <option>Male</option>\r\n                            <option>Female</option>\r\n                            <option>Other</option>\r\n                        </select>\r\n                    </div>\r\n                    <br/>\r\n                    <button\r\n                        onClick={this.validatePatientProfile}\r\n                        // onClick={() => this.registerPatientInfo(this.state)}\r\n                        className=\"btn btn-primary btn-block\">\r\n                        UPDATE\r\n                    </button>\r\n                </div>\r\n                <hr/>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from \"react\";\r\nimport {logout, profile, deletePersonAddress} from \"../../services/UserService\";\r\nimport PatientNavBar from \"../../react/PatientNavBar\";\r\nimport DoctorNavBar from \"../../react/DoctorNavBar\";\r\nimport AdminNavBar from \"../../react/AdminNavBar\";\r\n\r\nexport default class DeletePersonAddress extends React.Component {\r\n\r\n    state = {\r\n        addresses: [],\r\n        profile: {\r\n            username: '',\r\n            userType: '',\r\n            addressId: '',\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        profile()\r\n            .then(profile => this.setState({\r\n                profile: profile,\r\n                addressId: ''\r\n            }))\r\n            .then(this.findAllAddresses)\r\n    }\r\n\r\n    logout = () => logout()\r\n        .then(status => this.props.history.push(\"/\"))\r\n\r\n    findAllAddresses = () =>\r\n        fetch(\"api/address/find/persons/\" + this.state.profile.username)\r\n            .then(response => response.json())\r\n            .then(allAddresses => this.setState({\r\n                addresses: allAddresses\r\n            }))\r\n            .catch(() => console.log(\"Can’t access response. Blocked by browser?\"));\r\n\r\n    deleteAddress = () =>\r\n        deletePersonAddress(this.state.addressId)\r\n            .then(() => {\r\n                alert(\"Address has been removed! Refresh page to see changes :)\")\r\n            })\r\n\r\n    validateDeleteAddr = () => {\r\n        if (this.state.addressId === '') {\r\n            alert(\"Address ID cannot be empty :(\")\r\n            return false\r\n        } else {\r\n            this.deleteAddress()\r\n        }\r\n    };\r\n\r\n    renderTableData() {\r\n        return this.state.addresses.map((address, index) => {\r\n            const { id, house, street1, street2, city, state, zip } = address //destructuring\r\n            return (\r\n                <tr key={id}>\r\n                    <td>{id}</td>\r\n                    <td>{house}</td>\r\n                    <td>{street1}</td>\r\n                    <td>{street2}</td>\r\n                    <td>{city}</td>\r\n                    <td>{state}</td>\r\n                    <td>{zip}</td>\r\n                </tr>\r\n            )\r\n        })\r\n    }\r\n\r\n    renderNavBar() {\r\n        if (this.state.profile.userType === \"Patient\") {\r\n            return <PatientNavBar/>\r\n        } else if (this.state.profile.userType === \"Doctor\") {\r\n            return <DoctorNavBar/>\r\n        } else if (this.state.profile.userType === \"Admin Staff\") {\r\n            return <AdminNavBar/>\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.renderNavBar()}\r\n                <hr/>\r\n                <div>\r\n                    <h2>ADDRESS INFORMATION</h2>\r\n                    For user: <b>{this.state.profile.username} {this.state.profile.userType}</b>\r\n                    <hr/>\r\n                    <table id='table001'>\r\n                        <tbody>\r\n                        <th>Id</th>\r\n                        <th>House</th>\r\n                        <th>Street1</th>\r\n                        <th>Street2</th>\r\n                        <th>City</th>\r\n                        <th>State</th>\r\n                        <th>Zip</th>\r\n                        {this.renderTableData()}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n                <hr/>\r\n                <div>\r\n                    <input\r\n                        value={this.state.addressId}\r\n                        onChange={(e) => this.setState({\r\n                            addressId: e.target.value\r\n                        })}\r\n                        type={\"number\"}\r\n                        pattern=\"^[0-9]*$\"\r\n                        className={\"form-control\"}\r\n                        placeholder={\"ENTER ADDRESS ID TO REMOVE ADDRESS\"}/>\r\n                    <br/>\r\n\r\n                    <button\r\n                        // onClick={this.validatePatientProfile}\r\n                        onClick={this.validateDeleteAddr}\r\n                        className=\"btn btn-primary btn-block\">\r\n                        DELETE ADDRESS\r\n                    </button>\r\n                </div>\r\n                <br/>\r\n                <button\r\n                    onClickCapture={this.logout}\r\n                    className={\"btn btn-danger\"}\r\n                    onClick={this.logout}>\r\n                    Logout\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport {deletePersonPhone, logout, profile} from \"../../services/UserService\";\r\nimport PatientNavBar from \"../../react/PatientNavBar\";\r\nimport DoctorNavBar from \"../../react/DoctorNavBar\";\r\nimport AdminNavBar from \"../../react/AdminNavBar\";\r\n\r\nexport default class DeletePersonPhone extends React.Component {\r\n\r\n    state = {\r\n        phones: [],\r\n        profile: {\r\n            username: '',\r\n            userType: '',\r\n            phoneId: '',\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        profile()\r\n            .then(profile => this.setState({\r\n                profile: profile,\r\n                phoneId: ''\r\n            }))\r\n            .then(this.findAllPhones)\r\n    }\r\n\r\n    logout = () => logout()\r\n        .then(status => this.props.history.push(\"/\"))\r\n\r\n    findAllPhones = () =>\r\n        fetch(\"api/phones/find/persons/\" + this.state.profile.username)\r\n            .then(response => response.json())\r\n            .then(allPhones => this.setState({\r\n                phones: allPhones\r\n            }))\r\n            .catch(() => console.log(\"Can’t access response. Blocked by browser?\"));\r\n\r\n    deletePhone = () =>\r\n        deletePersonPhone(this.state.phoneId)\r\n            .then(() => {\r\n                alert(\"Phone has been removed! Refresh page to see changes :)\")\r\n            })\r\n\r\n\r\n    validateDeletePhone = () => {\r\n        if (this.state.phoneId === '') {\r\n            alert(\"Phone ID cannot be empty :(\")\r\n            return false\r\n        } else {\r\n            this.deletePhone()\r\n        }\r\n    };\r\n\r\n    renderTableData() {\r\n        return this.state.phones.map((phones, index) => {\r\n            const {id, phone, isPrimary} = phones //destructuring\r\n            return (\r\n                <tr key={id}>\r\n                    <td>{id}</td>\r\n                    <td>{phone}</td>\r\n                </tr>\r\n            )\r\n        })\r\n    }\r\n\r\n    renderNavBar() {\r\n        if (this.state.profile.userType === \"Patient\") {\r\n            return <PatientNavBar/>\r\n        } else if (this.state.profile.userType === \"Doctor\") {\r\n            return <DoctorNavBar/>\r\n        } else if (this.state.profile.userType === \"Admin Staff\") {\r\n            return <AdminNavBar/>\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.renderNavBar()}\r\n                <hr/>\r\n                <div>\r\n                    <h2>PHONE INFORMATION</h2>\r\n                    For user: <b>{this.state.profile.username}</b>\r\n                    <hr/>\r\n                    <table id='table001'>\r\n                        <tbody>\r\n                        <th>Id</th>\r\n                        <th>Phone Number</th>\r\n                        {this.renderTableData()}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n                <hr/>\r\n                <div>\r\n                    <input\r\n                        value={this.state.phoneId}\r\n                        onChange={(e) => this.setState({\r\n                            phoneId: e.target.value\r\n                        })}\r\n                        type={\"number\"}\r\n                        pattern=\"^[0-9]*$\"\r\n                        className={\"form-control\"}\r\n                        placeholder={\"ENTER PHONE ID TO REMOVE PHONE\"}/>\r\n                    <br/>\r\n\r\n                    <button\r\n                        // onClick={this.validatePatientProfile}\r\n                        onClick={this.validateDeletePhone}\r\n                        className=\"btn btn-primary btn-block\">\r\n                        DELETE PHONE\r\n                    </button>\r\n                </div>\r\n                <br/>\r\n                <button\r\n                    onClickCapture={this.logout}\r\n                    className={\"btn btn-danger\"}\r\n                    onClick={this.logout}>\r\n                    Logout\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport {logout, profile, updatePersonAddress} from \"../../services/UserService\";\r\nimport PatientNavBar from \"../../react/PatientNavBar\";\r\nimport DoctorNavBar from \"../../react/DoctorNavBar\";\r\nimport AdminNavBar from \"../../react/AdminNavBar\";\r\n\r\nexport default class DeletePersonAddress extends React.Component {\r\n\r\n    state = {\r\n        addresses: [],\r\n        profile: {\r\n            username: '',\r\n            userType: '',\r\n            addressId: '',\r\n            house: '',\r\n            street1: '',\r\n            street2: '',\r\n            city: '',\r\n            state: '',\r\n            zip: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        profile()\r\n            .then(profile => this.setState({\r\n                profile: profile,\r\n                addressId: '',\r\n                house: '',\r\n                street1: '',\r\n                street2: '',\r\n                city: '',\r\n                state: '',\r\n                zip: ''\r\n            }))\r\n            .then(this.findAllAddresses)\r\n    }\r\n\r\n    logout = () => logout()\r\n        .then(status => this.props.history.push(\"/\"))\r\n\r\n    findAllAddresses = () =>\r\n        fetch(\"api/address/find/persons/\" + this.state.profile.username)\r\n            .then(response => response.json())\r\n            .then(allAddresses => this.setState({\r\n                addresses: allAddresses\r\n            }))\r\n            .catch(() => console.log(\"Can’t access response. Blocked by browser?\"));\r\n\r\n    updateAddress = (address) =>\r\n        updatePersonAddress(address,this.state.addressId)\r\n            .then(() => {\r\n                alert(\"Address has been updated :) Refresh page to see changes.\")\r\n            })\r\n\r\n    validateUpdateAddr = () => {\r\n        if (this.state.addressId === '') {\r\n            alert(\"Address ID cannot be empty :(\")\r\n            return false\r\n        } else if (this.state.house === '') {\r\n            alert(\"House cannot be empty :(\")\r\n            return false\r\n        } else if (this.state.street1 === '') {\r\n            alert(\"Street1 cannot be empty :(\")\r\n            return false\r\n        } else if (this.state.city === '') {\r\n            alert(\"City cannot be empty :(\")\r\n            return false\r\n        } else if (this.state.state === '') {\r\n            alert(\"State cannot be empty :(\")\r\n            return false\r\n        } else if (this.state.zip === '') {\r\n            alert(\"Zip cannot be empty :(\")\r\n            return false\r\n        } else {\r\n            this.updateAddress(this.state)\r\n        }\r\n    };\r\n\r\n    renderTableData() {\r\n        return this.state.addresses.map((address, index) => {\r\n            const {id, house, street1, street2, city, state, zip} = address //destructuring\r\n            return (\r\n                <tr key={id}>\r\n                    <td>{id}</td>\r\n                    <td>{house}</td>\r\n                    <td>{street1}</td>\r\n                    <td>{street2}</td>\r\n                    <td>{city}</td>\r\n                    <td>{state}</td>\r\n                    <td>{zip}</td>\r\n                </tr>\r\n            )\r\n        })\r\n    }\r\n\r\n    renderNavBar() {\r\n        if (this.state.profile.userType === \"Patient\") {\r\n            return <PatientNavBar/>\r\n        } else if (this.state.profile.userType === \"Doctor\") {\r\n            return <DoctorNavBar/>\r\n        } else if (this.state.profile.userType === \"Admin Staff\") {\r\n            return <AdminNavBar/>\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.renderNavBar()}\r\n                <hr/>\r\n                <div>\r\n                    <h2>ADDRESS INFORMATION</h2>\r\n                    For user: <b>{this.state.profile.username} {this.state.profile.userType}</b>\r\n                    <hr/>\r\n                    <table id='table001'>\r\n                        <tbody>\r\n                        <th>Id</th>\r\n                        <th>House</th>\r\n                        <th>Street1</th>\r\n                        <th>Street2</th>\r\n                        <th>City</th>\r\n                        <th>State</th>\r\n                        <th>Zip</th>\r\n                        {this.renderTableData()}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n                <hr/>\r\n                <div>\r\n                    <input\r\n                        value={this.state.addressId}\r\n                        onChange={(e) => this.setState({\r\n                            addressId: e.target.value\r\n                        })}\r\n                        type={\"number\"}\r\n                        pattern=\"^[0-9]*$\"\r\n                        className={\"form-control\"}\r\n                        placeholder={\"ENTER ADDRESS ID TO UPDATE ADDRESS\"}/>\r\n                    <br/>\r\n                    <input\r\n                        value={this.state.house}\r\n                        onChange={(e) => this.setState({\r\n                            house: e.target.value\r\n                        })}\r\n                        className={\"form-control\"}\r\n                        placeholder={\"House (Name, Number #)\"}/>\r\n                    <br/>\r\n                    <input\r\n                        value={this.state.street1}\r\n                        onChange={(e) => this.setState({\r\n                            street1: e.target.value\r\n                        })}\r\n                        className={`form-control`}\r\n                        placeholder={\"Street1\"}/>\r\n                    <br/>\r\n                    <input\r\n                        value={this.state.street2}\r\n                        onChange={(e) => this.setState({\r\n                            street2: e.target.value\r\n                        })}\r\n                        className={`form-control`}\r\n                        placeholder={\"Street 2 (optional)\"}/>\r\n                    <br/>\r\n\r\n                    <input\r\n                        value={this.state.city}\r\n                        onChange={(e) => this.setState({\r\n                            city: e.target.value\r\n                        })}\r\n                        className={`form-control`}\r\n                        placeholder={\"City\"}/>\r\n                    <br/>\r\n\r\n                    <input\r\n                        value={this.state.state}\r\n                        onChange={(e) => this.setState({\r\n                            state: e.target.value\r\n                        })}\r\n                        className={`form-control`}\r\n                        placeholder={\"State\"}/>\r\n                    <br/>\r\n\r\n                    <input\r\n                        value={this.state.zip}\r\n                        onChange={(e) => this.setState({\r\n                            zip: e.target.value\r\n                        })}\r\n                        className={`form-control`}\r\n                        placeholder={\"Zip\"}/>\r\n                    <br/>\r\n                    <button\r\n                        onClick={this.validateUpdateAddr}\r\n                        className=\"btn btn-primary btn-block\">\r\n                        UPDATE ADDRESS\r\n                    </button>\r\n                </div>\r\n                <hr/>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport {updatePersonPhone, logout, profile} from \"../../services/UserService\";\r\nimport PatientNavBar from \"../../react/PatientNavBar\";\r\nimport DoctorNavBar from \"../../react/DoctorNavBar\";\r\nimport AdminNavBar from \"../../react/AdminNavBar\";\r\n\r\nexport default class UpdatePersonPhone extends React.Component {\r\n\r\n    state = {\r\n        phones: [],\r\n        profile: {\r\n            username: '',\r\n            userType: '',\r\n            phoneId: '',\r\n            phone: '',\r\n            isPrimary: 'false'\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        profile()\r\n            .then(profile => this.setState({\r\n                profile: profile,\r\n                phoneId: '',\r\n                phone: '',\r\n                isPrimary: 'false'\r\n            }))\r\n            .then(this.findAllPhones)\r\n    }\r\n\r\n    logout = () => logout()\r\n        .then(status => this.props.history.push(\"/\"))\r\n\r\n    findAllPhones = () =>\r\n        fetch(\"api/phones/find/persons/\" + this.state.profile.username)\r\n            .then(response => response.json())\r\n            .then(allPhones => this.setState({\r\n                phones: allPhones\r\n            }))\r\n            .catch(() => console.log(\"Can’t access response. Blocked by browser?\"));\r\n\r\n    updatePhone = (phone) =>\r\n        updatePersonPhone(phone, this.state.phoneId)\r\n            .then(() => {\r\n                alert(\"Phone has been updated :) Refresh page to see changes\")\r\n            })\r\n\r\n\r\n    validateUpdatePhone = () => {\r\n        if (this.state.phoneId === '') {\r\n            alert(\"Phone ID cannot be empty :(\")\r\n            return false\r\n        }else if (this.state.phone === '') {\r\n            alert(\"Phone cannot be empty :(\")\r\n            return false\r\n        } else {\r\n            this.updatePhone(this.state)\r\n        }\r\n    };\r\n\r\n    renderTableData() {\r\n        return this.state.phones.map((phones, index) => {\r\n            const {id, phone, isPrimary} = phones //destructuring\r\n            return (\r\n                <tr key={id}>\r\n                    <td>{id}</td>\r\n                    <td>{phone}</td>\r\n                </tr>\r\n            )\r\n        })\r\n    }\r\n\r\n    renderNavBar() {\r\n        if (this.state.profile.userType === \"Patient\") {\r\n            return <PatientNavBar/>\r\n        } else if (this.state.profile.userType === \"Doctor\") {\r\n            return <DoctorNavBar/>\r\n        } else if (this.state.profile.userType === \"Admin Staff\") {\r\n            return <AdminNavBar/>\r\n        }\r\n    }\r\n\r\n    handleSelectPhoneChange = event => {\r\n        this.setState({isPrimary: event.target.value});\r\n        console.log(this.state)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.renderNavBar()}\r\n                <hr/>\r\n                <div>\r\n                    <h2>PHONE INFORMATION</h2>\r\n                    For user: <b>{this.state.profile.username}</b>\r\n                    <hr/>\r\n                    <table id='table001'>\r\n                        <tbody>\r\n                        <th>Id</th>\r\n                        <th>Phone Number</th>\r\n                        {this.renderTableData()}\r\n                        </tbody>\r\n                    </table>\r\n\r\n                </div>\r\n                <hr/>\r\n                <div>\r\n                    <input\r\n                        value={this.state.phoneId}\r\n                        onChange={(e) => this.setState({\r\n                            phoneId: e.target.value\r\n                        })}\r\n                        type={\"number\"}\r\n                        pattern=\"^[0-9]*$\"\r\n                        className={\"form-control\"}\r\n                        placeholder={\"ENTER PHONE ID TO UPDATE PHONE\"}/>\r\n                    <br/>\r\n                    <input\r\n                        value={this.state.phone}\r\n                        onChange={(e) => this.setState({\r\n                            phone: e.target.value\r\n                        })}\r\n                        className={\"form-control\"}\r\n                        placeholder={\"Phone (###-##-####)\"}/>\r\n                    <br/>\r\n                    <div>\r\n                        <select\r\n                            className={\"form-control\"}\r\n                            value={this.state.isPrimary}\r\n                            onChange={this.handleSelectPhoneChange}>\r\n                            <option value={\"false\"}>No</option>\r\n                            <option value={\"true\"}>Yes</option>\r\n                        </select>\r\n                    </div>\r\n                    <br/>\r\n                    <button\r\n                        // onClick={this.validatePatientProfile}\r\n                        onClick={this.validateUpdatePhone}\r\n                        className=\"btn btn-primary btn-block\">\r\n                        UPDATE PHONE\r\n                    </button>\r\n                </div>\r\n                <br/>\r\n                <button\r\n                    onClickCapture={this.logout}\r\n                    className={\"btn btn-danger\"}\r\n                    onClick={this.logout}>\r\n                    Logout\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\"\r\nimport {logout, profile, updateDoctorInfo} from \"../../services/UserService\";\r\nimport DoctorNavBar from \"../../react/DoctorNavBar\";\r\n\r\n\r\nexport default class UpdateDoctorPersonalData extends React.Component {\r\n\r\n    state = {\r\n        profile: {\r\n            username: '',\r\n            password: '',\r\n            userType: '',\r\n            firstName: '',\r\n            lastName: '',\r\n            dateOfBirth: '',\r\n            status: '',\r\n            joiningDate: '',\r\n            designation: '',\r\n            education: '',\r\n            certification: '',\r\n            department: '',\r\n            gender: 'Male',\r\n        },\r\n    }\r\n\r\n    componentDidMount() {\r\n        profile()\r\n            .then(profile => this.setState({\r\n                profile: profile,\r\n                username: profile.username,\r\n                password: profile.password,\r\n                firstName: '',\r\n                lastName: '',\r\n                dateOfBirth: '',\r\n                status: '',\r\n                joiningDate: '',\r\n                designation: '',\r\n                education: '',\r\n                certification: '',\r\n                department: '',\r\n                gender: 'Male',\r\n            }))\r\n    }\r\n\r\n    isValidDate = (dateString) => {\r\n        let regEx = /^\\d{4}-\\d{2}-\\d{2}$/;\r\n        if (!dateString.match(regEx)) return false;  // Invalid format\r\n        let d = new Date(dateString);\r\n        let dNum = d.getTime();\r\n        if (!dNum && dNum !== 0) return false; // NaN value, Invalid date\r\n        return d.toISOString().slice(0, 10) === dateString;\r\n    }\r\n\r\n    validateDoctorProfile = () => {\r\n        if (this.state.firstName === '') {\r\n            alert(\"First Name cannot be empty :(\")\r\n            return false\r\n        } else if (this.state.lastName === '') {\r\n            alert(\"Last Name cannot be empty :(\")\r\n            return false\r\n        } else if (this.state.dateOfBirth === '') {\r\n            alert(\"Date of Birth cannot be empty :(\")\r\n            return false\r\n        } else if (!this.isValidDate(this.state.dateOfBirth)) {\r\n            alert(\"Date of Birth format is invalid :(\")\r\n            return false\r\n        } else if (this.state.joiningDate === '') {\r\n            alert(\"Joining Date cannot be empty :(\")\r\n            return false\r\n        } else if (!this.isValidDate(this.state.joiningDate)) {\r\n            alert(\"Joining date format is invalid :(\")\r\n            return false\r\n        } else if (this.state.designation === '') {\r\n            alert(\"Designation cannot be empty :(\")\r\n            return false\r\n        } else if (this.state.education === '') {\r\n            alert(\"Education cannot be empty :(\")\r\n            return false\r\n        } else {\r\n            this.updateDoctorInfo(this.state)\r\n        }\r\n    };\r\n\r\n    logout = () => logout()\r\n        .then(status => this.props.history.push(\"/\"))\r\n\r\n\r\n    handleSelectGenderChange = event => {\r\n        this.setState({gender: event.target.value});\r\n        console.log(this.state)\r\n    }\r\n\r\n    handleSelectDeptChange = event => {\r\n        this.setState({department: event.target.value});\r\n        console.log(this.state)\r\n    }\r\n\r\n    updateDoctorInfo = (doctor) =>\r\n        updateDoctorInfo(doctor, this.state.username)\r\n            .then((response) => {\r\n                if (response.status === 500) {\r\n                    console.log(response)\r\n                    alert(\"Problem updating profile :o  \")\r\n\r\n                } else {\r\n                    console.log(response)\r\n                    alert(\"Profile updated successfully :)\")\r\n                }\r\n            });\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <DoctorNavBar/>\r\n                <hr/>\r\n                Hi {this.state.profile.username}!\r\n                <br/>\r\n                <b>User Type:</b> {this.state.profile.userType}\r\n                <br/>\r\n                <hr/>\r\n                <h3>UPDATE YOUR PROFILE</h3>\r\n                <br/>\r\n                <div>\r\n                    <input\r\n                        value={this.state.firstName}\r\n                        onChange={(e) => this.setState({\r\n                            firstName: e.target.value\r\n                        })}\r\n                        className={\"form-control\"}\r\n                        placeholder={\"First Name\"}/>\r\n                    <br/>\r\n                    <input\r\n                        value={this.state.lastName}\r\n                        onChange={(e) => this.setState({\r\n                            lastName: e.target.value\r\n                        })}\r\n                        className={`form-control`}\r\n                        placeholder={\"Last Name\"}/>\r\n                    <br/>\r\n                    <input\r\n                        value={this.state.dateOfBirth}\r\n                        onChange={(e) => this.setState({\r\n                            dateOfBirth: e.target.value\r\n                        })}\r\n                        className={`form-control`}\r\n                        placeholder={\"Date of Birth     (YYYY-MM-DD)\"}/>\r\n                    <br/>\r\n                    <input\r\n                        value={this.state.joiningDate}\r\n                        onChange={(e) => this.setState({\r\n                            joiningDate: e.target.value\r\n                        })}\r\n                        className={`form-control`}\r\n                        placeholder={\"Date of Joining    (YYYY-MM-DD)\"}/>\r\n                    <br/>\r\n                    <input\r\n                        value={this.state.status}\r\n                        onChange={(e) => this.setState({\r\n                            status: e.target.value\r\n                        })}\r\n                        className={`form-control`}\r\n                        placeholder={\"Status\"}/>\r\n                    <br/>\r\n                    <input\r\n                        value={this.state.designation}\r\n                        onChange={(e) => this.setState({\r\n                            designation: e.target.value\r\n                        })}\r\n                        className={`form-control`}\r\n                        placeholder={\"Designation\"}/>\r\n                    <br/>\r\n                    <input\r\n                        value={this.state.education}\r\n                        onChange={(e) => this.setState({\r\n                            education: e.target.value\r\n                        })}\r\n                        className={`form-control`}\r\n                        placeholder={\"Education\"}/>\r\n                    <br/>\r\n                    <input\r\n                        value={this.state.certification}\r\n                        onChange={(e) => this.setState({\r\n                            certification: e.target.value\r\n                        })}\r\n                        className={`form-control`}\r\n                        placeholder={\"Certification\"}/>\r\n                    <br/>\r\n                    <div>\r\n                        <select\r\n                            className={\"form-control\"}\r\n                            value={this.state.department}\r\n                            onChange={this.handleSelectDeptChange}>\r\n                            <option>ENT</option>\r\n                            <option>CARDIOLOGY</option>\r\n                            <option>GYNAECOLOGY</option>\r\n                            <option>ORTHOPAEDIC</option>\r\n                            <option>PEDIATRIC</option>\r\n                        </select>\r\n                    </div>\r\n                    <br/>\r\n                    <div>\r\n                        <select\r\n                            className={\"form-control\"}\r\n                            value={this.state.gender}\r\n                            onChange={this.handleSelectGenderChange}>\r\n                            <option>Male</option>\r\n                            <option>Female</option>\r\n                            <option>Other</option>\r\n                        </select>\r\n                    </div>\r\n                    <br/>\r\n                    <button\r\n                        onClick={this.validateDoctorProfile}\r\n                        className=\"btn btn-primary btn-block\">\r\n                        UPDATE\r\n                    </button>\r\n                </div>\r\n                <hr/>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from \"react\";\r\nimport {deletePrescription, logout, profile} from \"../../services/UserService\";\r\nimport DoctorNavBar from \"../../react/DoctorNavBar\";\r\n\r\nexport default class DeletePersonAddress extends React.Component {\r\n\r\n    state = {\r\n        prescriptions: [],\r\n        profile: {\r\n            username: '',\r\n            userType: '',\r\n            prescriptionId: '',\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        profile()\r\n            .then(profile => this.setState({\r\n                profile: profile\r\n            }))\r\n            .then(this.findAllPrescriptions)\r\n    }\r\n\r\n    logout = () => logout()\r\n        .then(status => this.props.history.push(\"/\"))\r\n\r\n    findAllPrescriptions = () =>\r\n        fetch(\"api/prescription/find/doctor/\" + this.state.profile.username)\r\n            .then(response => response.json())\r\n            .then(allPrescriptions => this.setState({\r\n                prescriptions: allPrescriptions\r\n            }))\r\n            .catch(() => console.log(\"Can’t access response. Blocked by browser?\"));\r\n\r\n\r\n    deletePrescription = () =>\r\n        deletePrescription(this.state.prescriptionId)\r\n            .then(() => {\r\n                alert(\"Prescription has been removed! Refresh page to see changes :)\")\r\n            })\r\n\r\n    validateDeletePrescription = () => {\r\n        if (this.state.prescriptionId === '') {\r\n            alert(\"Address ID cannot be empty :(\")\r\n            return false\r\n        } else {\r\n            this.deletePrescription()\r\n        }\r\n    };\r\n\r\n    renderTableData() {\r\n        return this.state.prescriptions.map((prescription, index) => {\r\n            const {id, prescriptionDate, refillData} = prescription //destructuring\r\n            const patientName = prescription.patient.firstName + \" \" + prescription.patient.lastName\r\n            return (\r\n                <tr key={id}>\r\n                    <td>{id}</td>\r\n                    <td>{prescriptionDate}</td>\r\n                    <td>{refillData}</td>\r\n                    <td>{patientName}</td>\r\n\r\n                </tr>\r\n            )\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <DoctorNavBar/>\r\n                <hr/>\r\n                <div>\r\n                    <h2>PRESCRIPTION INFORMATION</h2>\r\n                    For user: <b>{this.state.profile.username} {this.state.profile.userType}</b>\r\n                    <hr/>\r\n                    <table id='table001'>\r\n                        <tbody>\r\n                        <th>Id</th>\r\n                        <th>Date</th>\r\n                        <th>Time</th>\r\n                        <th>Patient Name</th>\r\n                        {this.renderTableData()}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n                <hr/>\r\n                <div>\r\n                    <input\r\n                        value={this.state.prescriptionId}\r\n                        onChange={(e) => this.setState({\r\n                            prescriptionId: e.target.value\r\n                        })}\r\n                        type={\"number\"}\r\n                        pattern=\"^[0-9]*$\"\r\n                        className={\"form-control\"}\r\n                        placeholder={\"ENTER PRESCRIPTION ID TO REMOVE PRESCRIPTION\"}/>\r\n                    <br/>\r\n\r\n                    <button\r\n                        // onClick={this.validatePatientProfile}\r\n                        onClick={this.validateDeletePrescription}\r\n                        className=\"btn btn-primary btn-block\">\r\n                        DELETE PRESCRIPTION\r\n                    </button>\r\n                </div>\r\n                <br/>\r\n                <button\r\n                    onClickCapture={this.logout}\r\n                    className={\"btn btn-danger\"}\r\n                    onClick={this.logout}>\r\n                    Logout\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\"\r\nimport {logout, profile, updateAppointment} from \"../../services/UserService\";\r\nimport DoctorNavBar from \"../../react/DoctorNavBar\";\r\n\r\n\r\nexport default class UpdateDoctorPersonalData extends React.Component {\r\n\r\n    state = {\r\n        appointments: [],\r\n\r\n        profile: {\r\n            username: '',\r\n            password: '',\r\n            userType: '',\r\n            appointmentId: '',\r\n            dateOfAppointment: '',\r\n            notes: '',\r\n            time: '',\r\n        },\r\n    }\r\n\r\n    componentDidMount() {\r\n        profile()\r\n            .then(profile => this.setState({\r\n                profile: profile,\r\n                username: profile.username,\r\n                password: profile.password,\r\n                appointmentId: '',\r\n                dateOfAppointment: '',\r\n                notes: '',\r\n                time: '',\r\n            })).then(this.findAllAppointments)\r\n    }\r\n\r\n    findAllAppointments = () =>\r\n        fetch(\"api/appointment/find/doctor/\" + this.state.profile.username)\r\n            .then(response => response.json())\r\n            .then(allAppointments => this.setState({\r\n                appointments: allAppointments\r\n            }))\r\n            .catch(() => alert(\"Can’t access response. Blocked by browser?\"));\r\n\r\n    isValidDate = (dateString) => {\r\n        let regEx = /^\\d{4}-\\d{2}-\\d{2}$/;\r\n        if (!dateString.match(regEx)) return false;  // Invalid format\r\n        let d = new Date(dateString);\r\n        let dNum = d.getTime();\r\n        if (!dNum && dNum !== 0) return false; // NaN value, Invalid date\r\n        return d.toISOString().slice(0, 10) === dateString;\r\n    }\r\n\r\n    validateUpdateAppointment = () => {\r\n        if (this.state.appointmentId === '') {\r\n            alert(\"Appointment ID cannot be empty :(\")\r\n        } else if (this.state.time === '') {\r\n            alert(\"Time cannot be empty :(\")\r\n            return false\r\n        } else if (!this.isValidDate(this.state.dateOfAppointment)) {\r\n            alert(\"Date of Appointment is invalid :(\")\r\n            return false\r\n        } else {\r\n            this.updateAppointment(this.state)\r\n        }\r\n    };\r\n\r\n    logout = () => logout()\r\n        .then(status => this.props.history.push(\"/\"))\r\n\r\n    updateAppointment = (appointment) =>\r\n        updateAppointment(appointment, this.state.appointmentId)\r\n            .then((response) => {\r\n                if (response.status === 500) {\r\n                    console.log(response)\r\n                    alert(\"Problem updating appointment :o  \")\r\n\r\n                } else {\r\n                    console.log(response)\r\n                    alert(\"Appointment updated successfully :) Reload page to view changes\")\r\n                }\r\n            });\r\n\r\n    renderTableData() {\r\n        return this.state.appointments.map((appointment, index) => {\r\n            const {id, dateOfAppointment, notes, time} = appointment //destructuring\r\n            const patientName = appointment.patient.firstName + \" \" + appointment.patient.lastName\r\n            return (\r\n                <tr key={id}>\r\n                    <td>{id}</td>\r\n                    <td>{dateOfAppointment}</td>\r\n                    <td>{notes}</td>\r\n                    <td>{time}</td>\r\n                    <td>{patientName}</td>\r\n                </tr>\r\n            )\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <DoctorNavBar/>\r\n                <hr/>\r\n                Hi {this.state.profile.username}!\r\n                <br/>\r\n                <b>User Type:</b> {this.state.profile.userType}\r\n                <br/>\r\n                <hr/>\r\n                <h3>APPOINTMENT INFORMATION</h3>\r\n                <hr/>\r\n                <table id='table001'>\r\n                    <tbody>\r\n                    <th>Id</th>\r\n                    <th>Date</th>\r\n                    <th>Notes</th>\r\n                    <th>Time</th>\r\n                    <th>Patient</th>\r\n                    {this.renderTableData()}\r\n                    </tbody>\r\n                </table>\r\n                <hr/>\r\n                <br/>\r\n                <div>\r\n                    <input\r\n                        value={this.state.appointmentId}\r\n                        onChange={(e) => this.setState({\r\n                            appointmentId: e.target.value\r\n                        })}\r\n                        type={\"number\"}\r\n                        pattern=\"^[0-9]*$\"\r\n                        className={\"form-control\"}\r\n                        placeholder={\"ENTER APPOINTMENT ID TO UPDATE APPOINTMENT\"}/>\r\n                    <br/>\r\n                    <input\r\n                        value={this.state.notes}\r\n                        onChange={(e) => this.setState({\r\n                            notes: e.target.value\r\n                        })}\r\n                        className={`form-control`}\r\n                        placeholder={\"Notes\"}/>\r\n                    <br/>\r\n\r\n                    <input\r\n                        value={this.state.time}\r\n                        onChange={(e) => this.setState({\r\n                            time: e.target.value\r\n                        })}\r\n                        className={`form-control`}\r\n                        placeholder={\"Time\"}/>\r\n                    <br/>\r\n\r\n                    <input\r\n                        value={this.state.dateOfAppointment}\r\n                        onChange={(e) => this.setState({\r\n                            dateOfAppointment: e.target.value\r\n                        })}\r\n                        className={`form-control`}\r\n                        placeholder={\"Date (YYYY-MM-DD)\"}/>\r\n                    <br/>\r\n\r\n                    <button\r\n                        onClick={this.validateUpdateAppointment}\r\n                        className=\"btn btn-primary btn-block\">\r\n                        UPDATE APPOINTMENT\r\n                    </button>\r\n                </div>\r\n                <hr/>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from \"react\";\r\nimport {logout, profile} from \"../../services/UserService\";\r\nimport AdminNavBar from \"../../react/AdminNavBar\";\r\n\r\nexport default class ViewAllDoctors extends React.Component {\r\n\r\n    state = {\r\n        doctors: [],\r\n        profile: {\r\n            username: '',\r\n            userType: '',\r\n            addressId: '',\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        profile()\r\n            .then(profile => this.setState({\r\n                profile: profile,\r\n                addressId: ''\r\n            }))\r\n            .then(this.findAllDoctors)\r\n    }\r\n\r\n    logout = () => logout()\r\n        .then(status => this.props.history.push(\"/\"))\r\n\r\n    findAllDoctors = () =>\r\n        fetch(\"api/doctors/find/all/\")\r\n            .then(response => response.json())\r\n            .then(allDoctors => this.setState({\r\n                doctors: allDoctors\r\n            }))\r\n            .catch(() => alert(\"Can’t access response. Blocked by browser?\"));\r\n\r\n\r\n    renderTableData() {\r\n        return this.state.doctors.map((doctor, index) => {\r\n            const {\r\n                id, firstName, lastName, username, password, dateOfBirth,\r\n                status, department, joiningDate, salary, designation, education,\r\n                certification, gender\r\n            } = doctor //destructuring\r\n            return (\r\n                <tr key={id}>\r\n                    <td>{id}</td>\r\n                    <td>{firstName}</td>\r\n                    <td>{lastName}</td>\r\n                    <td>{username}</td>\r\n                    <td>{password}</td>\r\n                    <td>{dateOfBirth}</td>\r\n                    <td>{status}</td>\r\n                    <td>{department}</td>\r\n                    <td>{joiningDate}</td>\r\n                    <td>{designation}</td>\r\n                    <td>{education}</td>\r\n                </tr>\r\n            )\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <AdminNavBar/>\r\n                <hr/>\r\n                <div>\r\n                    <h2>ALL DOCTOR INFORMATION</h2>\r\n                    For user: <b>{this.state.profile.username} {this.state.profile.userType}</b>\r\n                    <hr/>\r\n                    <table id='table001'>\r\n                        <tbody>\r\n                        <th>Id</th>\r\n                        <th>First Name</th>\r\n                        <th>Last Name</th>\r\n                        <th>Username</th>\r\n                        <th>Password</th>\r\n                        <th>DOB</th>\r\n                        <th>Status</th>\r\n                        <th>Department</th>\r\n                        <th>Joining Date</th>\r\n                        <th>Designation</th>\r\n                        <th>Education</th>\r\n                        {this.renderTableData()}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n                <hr/>\r\n                <br/>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport {updatePatientAllergy, logout, profile} from \"../../services/UserService\";\r\nimport PatientNavBar from \"../../react/PatientNavBar\";\r\nimport DoctorNavBar from \"../../react/DoctorNavBar\";\r\n\r\nexport default class UpdatePatientAllergy extends React.Component {\r\n\r\n    state = {\r\n        allergy: [],\r\n        profile: {\r\n            username: '',\r\n            userType: '',\r\n            allergyId: '',\r\n            allergyInfo: '',\r\n            allergyCause: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        profile()\r\n            .then(profile => this.setState({\r\n                profile: profile,\r\n                allergyId: '',\r\n                allergyInfo: '',\r\n                allergyCause: ''\r\n            }))\r\n            .then(this.findAllAllergies)\r\n    }\r\n\r\n    logout = () => logout()\r\n        .then(status => this.props.history.push(\"/\"))\r\n\r\n    findAllAllergies = () =>\r\n        fetch(\"api/allergies/find/patient/\" + this.state.profile.username)\r\n            .then(response => response.json())\r\n            .then(allAllergies => this.setState({\r\n                allergy: allAllergies\r\n            }))\r\n            .catch(() => console.log(\"Can’t access response. Blocked by browser?\"));\r\n\r\n    updateAllergy = (allergy) =>\r\n        updatePatientAllergy(allergy, this.state.allergyId)\r\n            .then(() => {\r\n                alert(\"Allergy has been updated :) Refresh page to see changes\")\r\n            })\r\n\r\n\r\n    validateUpdateAllergy = () => {\r\n        if (this.state.allergyId === '') {\r\n            alert(\"Allergy ID cannot be empty :(\")\r\n            return false\r\n        }else if (this.state.allergyInfo === '') {\r\n            alert(\"Allergy Info cannot be empty :(\")\r\n            return false\r\n        }else if (this.state.allergyCause === '') {\r\n            alert(\"Allergy Cause cannot be empty :(\")\r\n            return false\r\n        } else {\r\n            this.updateAllergy(this.state)\r\n        }\r\n    };\r\n\r\n    renderTableData() {\r\n        return this.state.allergy.map((allergy, index) => {\r\n            const {id, allergyInfo, allergyCause} = allergy //destructuring\r\n            return (\r\n                <tr key={id}>\r\n                    <td>{id}</td>\r\n                    <td>{allergyInfo}</td>\r\n                    <td>{allergyCause}</td>\r\n                </tr>\r\n            )\r\n        })\r\n    }\r\n\r\n    renderNavBar() {\r\n        if (this.state.profile.userType === \"Patient\") {\r\n            return <PatientNavBar/>\r\n        }\r\n        else if (this.state.profile.userType = \"Doctor\") {\r\n            return <DoctorNavBar/>\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.renderNavBar()}\r\n                <hr/>\r\n                <div>\r\n                    <h2>ALLERGY INFORMATION</h2>\r\n                    For user: <b>{this.state.profile.username}</b>\r\n                    <hr/>\r\n                    <table id='table001'>\r\n                        <tbody>\r\n                        <th>Id</th>\r\n                        <th>Allergy Info</th>\r\n                        <th>Allergy Cause</th>\r\n                        {this.renderTableData()}\r\n                        </tbody>\r\n                    </table>\r\n\r\n                </div>\r\n                <hr/>\r\n                <div>\r\n                    <input\r\n                        value={this.state.allergyId}\r\n                        onChange={(e) => this.setState({\r\n                            allergyId: e.target.value\r\n                        })}\r\n                        type={\"number\"}\r\n                        pattern=\"^[0-9]*$\"\r\n                        className={\"form-control\"}\r\n                        placeholder={\"ENTER ALLERGY ID TO UPDATE ALLERGY\"}/>\r\n                    <br/>\r\n                    <input\r\n                        value={this.state.allergyInfo}\r\n                        onChange={(e) => this.setState({\r\n                            allergyInfo: e.target.value\r\n                        })}\r\n                        className={\"form-control\"}\r\n                        placeholder={\"Allergy Info\"}/>\r\n                    <br/>\r\n                    <div>\r\n                        <input\r\n                            value={this.state.allergyCause}\r\n                            onChange={(e) => this.setState({\r\n                                allergyCause: e.target.value\r\n                            })}\r\n                            className={\"form-control\"}\r\n                            placeholder={\"Allergy Cause\"}/>\r\n                    </div>\r\n                    <br/>\r\n                    <button\r\n                        // onClick={this.validatePatientProfile}\r\n                        onClick={this.validateUpdateAllergy}\r\n                        className=\"btn btn-primary btn-block\">\r\n                        UPDATE ALLERGY\r\n                    </button>\r\n                </div>\r\n                <br/>\r\n                <button\r\n                    onClickCapture={this.logout}\r\n                    className={\"btn btn-danger\"}\r\n                    onClick={this.logout}>\r\n                    Logout\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport {updatePatientInsurance, logout, profile} from \"../../services/UserService\";\r\nimport PatientNavBar from \"../../react/PatientNavBar\";\r\nimport DoctorNavBar from \"../../react/DoctorNavBar\";\r\n\r\nexport default class UpdatePatientInsurance extends React.Component {\r\n\r\n    state = {\r\n        insurance: [],\r\n        profile: {\r\n            username: '',\r\n            userType: '',\r\n            insuranceId: '',\r\n            insuranceDetails: '',\r\n            insuranceType: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        profile()\r\n            .then(profile => this.setState({\r\n                profile: profile,\r\n                insuranceId: '',\r\n                insuranceDetails: '',\r\n                insuranceType: ''\r\n            }))\r\n            .then(this.findAllInsurances)\r\n    }\r\n\r\n    logout = () => logout()\r\n        .then(status => this.props.history.push(\"/\"))\r\n\r\n    findAllInsurances = () =>\r\n        fetch(\"api/insurances/find/patient/\" + this.state.profile.username)\r\n            .then(response => response.json())\r\n            .then(allInsurances => this.setState({\r\n                insurance: allInsurances\r\n            }))\r\n            .catch(() => console.log(\"Can’t access response. Blocked by browser?\"));\r\n\r\n    updateInsurance = (insurance) =>\r\n        updatePatientInsurance(insurance, this.state.insuranceId)\r\n            .then(() => {\r\n                alert(\"Insurance has been updated :) Refresh page to see changes\")\r\n            })\r\n\r\n\r\n    validateUpdateInsurance = () => {\r\n        if (this.state.insuranceId === '') {\r\n            alert(\"Insurance ID cannot be empty :(\")\r\n            return false\r\n        }else if (this.state.insuranceDetails === '') {\r\n            alert(\"Insurance Details cannot be empty :(\")\r\n            return false\r\n        }else if (this.state.insuranceType === '') {\r\n            alert(\"Insurance Type cannot be empty :(\")\r\n            return false\r\n        } else {\r\n            this.updateInsurance(this.state)\r\n        }\r\n    };\r\n\r\n    renderTableData() {\r\n        return this.state.insurance.map((insurance, index) => {\r\n            const {id, insuranceDetails, insuranceType} = insurance //destructuring\r\n            return (\r\n                <tr key={id}>\r\n                    <td>{id}</td>\r\n                    <td>{insuranceDetails}</td>\r\n                    <td>{insuranceType}</td>\r\n                </tr>\r\n            )\r\n        })\r\n    }\r\n\r\n    renderNavBar() {\r\n        if (this.state.profile.userType === \"Patient\") {\r\n            return <PatientNavBar/>\r\n        }\r\n        else if (this.state.profile.userType = \"Doctor\") {\r\n            return <DoctorNavBar/>\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.renderNavBar()}\r\n                <hr/>\r\n                <div>\r\n                    <h2>INSURANCE INFORMATION</h2>\r\n                    For user: <b>{this.state.profile.username}</b>\r\n                    <hr/>\r\n                    <table id='table001'>\r\n                        <tbody>\r\n                        <th>Id</th>\r\n                        <th>Insurance Details</th>\r\n                        <th>Insurance Type</th>\r\n                        {this.renderTableData()}\r\n                        </tbody>\r\n                    </table>\r\n\r\n                </div>\r\n                <hr/>\r\n                <div>\r\n                    <input\r\n                        value={this.state.insuranceId}\r\n                        onChange={(e) => this.setState({\r\n                            insuranceId: e.target.value\r\n                        })}\r\n                        type={\"number\"}\r\n                        pattern=\"^[0-9]*$\"\r\n                        className={\"form-control\"}\r\n                        placeholder={\"ENTER INSURANCE ID TO UPDATE INSURANCE\"}/>\r\n                    <br/>\r\n                    <input\r\n                        value={this.state.insuranceDetails}\r\n                        onChange={(e) => this.setState({\r\n                            insuranceDetails: e.target.value\r\n                        })}\r\n                        className={\"form-control\"}\r\n                        placeholder={\"Insurance Details\"}/>\r\n                    <br/>\r\n                    <div>\r\n                        <input\r\n                            value={this.state.insuranceType}\r\n                            onChange={(e) => this.setState({\r\n                                insuranceType: e.target.value\r\n                            })}\r\n                            className={\"form-control\"}\r\n                            placeholder={\"Insurance Type\"}/>\r\n                    </div>\r\n                    <br/>\r\n                    <button\r\n                        // onClick={this.validatePatientProfile}\r\n                        onClick={this.validateUpdateInsurance}\r\n                        className=\"btn btn-primary btn-block\">\r\n                        UPDATE INSURANCE\r\n                    </button>\r\n                </div>\r\n                <br/>\r\n                <button\r\n                    onClickCapture={this.logout}\r\n                    className={\"btn btn-danger\"}\r\n                    onClick={this.logout}>\r\n                    Logout\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport {logout, profile} from \"../../services/UserService\";\r\nimport AdminNavBar from \"../../react/AdminNavBar\";\r\n\r\nexport default class ViewAllPatients extends React.Component {\r\n\r\n    state = {\r\n        patients: [],\r\n        profile: {\r\n            username: '',\r\n            userType: '',\r\n            addressId: '',\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        profile()\r\n            .then(profile => this.setState({\r\n                profile: profile,\r\n                addressId: ''\r\n            }))\r\n            .then(this.findAllPatients)\r\n    }\r\n\r\n    logout = () => logout()\r\n        .then(status => this.props.history.push(\"/\"))\r\n\r\n    findAllPatients = () =>\r\n        fetch(\"api/patients/find/all/\")\r\n            .then(response => response.json())\r\n            .then(allPatients => this.setState({\r\n                patients: allPatients\r\n            }))\r\n            .catch(() => alert(\"Can’t access response. Blocked by browser?\"));\r\n\r\n\r\n    renderTableData() {\r\n        return this.state.patients.map((doctor, index) => {\r\n            const {\r\n                id, firstName, lastName, username, password, dateOfBirth,\r\n                dateOfAdmission, medicalHistory, gender\r\n            } = doctor //destructuring\r\n            return (\r\n                <tr key={id}>\r\n                    <td>{id}</td>\r\n                    <td>{firstName}</td>\r\n                    <td>{lastName}</td>\r\n                    <td>{username}</td>\r\n                    <td>{password}</td>\r\n                    <td>{dateOfBirth}</td>\r\n                    <td>{dateOfAdmission}</td>\r\n                    <td>{medicalHistory}</td>\r\n                    <td>{gender}</td>\r\n                </tr>\r\n            )\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <AdminNavBar/>\r\n                <hr/>\r\n                <div>\r\n                    <h2>ALL PATIENT INFORMATION</h2>\r\n                    User: <b>{this.state.profile.username}</b>\r\n                    <hr/>\r\n                    <table id='table001'>\r\n                        <tbody>\r\n                        <th>Id</th>\r\n                        <th>First Name</th>\r\n                        <th>Last Name</th>\r\n                        <th>Username</th>\r\n                        <th>Password</th>\r\n                        <th>DOB</th>\r\n                        <th>DOA</th>\r\n                        <th>Med History</th>\r\n                        <th>Gender</th>\r\n                        {this.renderTableData()}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n                <hr/>\r\n                <br/>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport {logout, profile} from \"../../services/UserService\";\r\nimport AdminNavBar from \"../../react/AdminNavBar\";\r\n\r\nexport default class ViewAllAdminStaff extends React.Component {\r\n\r\n    state = {\r\n        adminStaff: [],\r\n        profile: {\r\n            username: '',\r\n            userType: '',\r\n            addressId: '',\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        profile()\r\n            .then(profile => this.setState({\r\n                profile: profile,\r\n                addressId: ''\r\n            }))\r\n            .then(this.findAllAdminStaff)\r\n    }\r\n\r\n\r\n    findAllAdminStaff = () =>\r\n        fetch(\"api/adminstaff/find/all/\")\r\n            .then(response => response.json())\r\n            .then(adminStaff => this.setState({\r\n                adminStaff: adminStaff\r\n            }))\r\n            .catch(() => alert(\"Can’t access response. Blocked by browser?\"));\r\n\r\n\r\n    renderTableData() {\r\n        return this.state.adminStaff.map((admin, index) => {\r\n            const {\r\n                id, firstName, lastName, username, password, dateOfBirth,\r\n                status, department, joiningDate, jobTitle, gender\r\n            } = admin //destructuring\r\n            return (\r\n                <tr key={id}>\r\n                    <td>{id}</td>\r\n                    <td>{firstName}</td>\r\n                    <td>{lastName}</td>\r\n                    <td>{username}</td>\r\n                    <td>{password}</td>\r\n                    <td>{dateOfBirth}</td>\r\n                    <td>{status}</td>\r\n                    <td>{department}</td>\r\n                    <td>{joiningDate}</td>\r\n                    <td>{jobTitle}</td>\r\n                    <td>{gender}</td>\r\n                </tr>\r\n            )\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <AdminNavBar/>\r\n                <hr/>\r\n                <div>\r\n                    <h2>ALL ADMIN STAFF INFORMATION</h2>\r\n                    For user: <b>{this.state.profile.username}</b>\r\n                    <hr/>\r\n                    <table id='table001'>\r\n                        <tbody>\r\n                        <th>Id</th>\r\n                        <th>First Name</th>\r\n                        <th>Last Name</th>\r\n                        <th>Username</th>\r\n                        <th>Password</th>\r\n                        <th>DOB</th>\r\n                        <th>Status</th>\r\n                        <th>Department</th>\r\n                        <th>Joining Date</th>\r\n                        <th>Job Title</th>\r\n                        <th>Gender</th>\r\n                        {this.renderTableData()}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n                <hr/>\r\n                <br/>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\"\r\nimport {logout, profile, createSalaryForStaff} from \"../../services/UserService\";\r\nimport AdminNavBar from \"../../react/AdminNavBar\";\r\n\r\nexport default class SalaryReg extends React.Component {\r\n    state = {\r\n        profile: {\r\n            username: '',\r\n            userType: '',\r\n            staffUsername: '',\r\n            baseSalary: '',\r\n            allowances: '',\r\n            epf: ''\r\n        }\r\n    }\r\n\r\n    isEmpty(obj) {\r\n        for (const key in obj) {\r\n            if (obj.hasOwnProperty(key))\r\n                return false;\r\n        }\r\n        return true;\r\n    };\r\n\r\n    createSalaryForStaff = (salary) =>\r\n        createSalaryForStaff(salary, this.state.staffUsername)\r\n            .then((response) => {\r\n                if (response.status === 500 || this.isEmpty(response)) {\r\n                    console.log(response)\r\n                    alert(\"Problem adding salary :o\" +\r\n                        \"Tip: Check patient username or salary exists already!\")\r\n                } else {\r\n                    console.log(response)\r\n                    alert(\"Salary added successfully :)\")\r\n                }\r\n            });\r\n\r\n    componentDidMount() {\r\n        profile()\r\n            .then(profile => this.setState({\r\n                profile: profile,\r\n                username: profile.username,\r\n                password: profile.password,\r\n                staffUsername: '',\r\n                baseSalary: '',\r\n                allowances: '',\r\n                epf: ''\r\n            }))\r\n    }\r\n\r\n    validateSalary = () => {\r\n        if (this.state.baseSalary === '') {\r\n            alert(\"Base salary cannot be empty :(\")\r\n            return false\r\n        } else if (this.state.epf === '') {\r\n            alert(\"EPF cause cannot be empty :(\")\r\n            return false\r\n        } else {\r\n            this.createSalaryForStaff(this.state)\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <AdminNavBar/>\r\n                <hr/>\r\n                <h1>Contact Information</h1>\r\n                Hi {this.state.profile.username}!\r\n                <hr/>\r\n                <h3>Add an allergy to your profile</h3>\r\n                <br/>\r\n                <div>\r\n\r\n                    <input\r\n                        value={this.state.staffUsername}\r\n                        onChange={(e) => this.setState({\r\n                            staffUsername: e.target.value\r\n                        })}\r\n                        className={\"form-control\"}\r\n                        placeholder={\"Username of Doctor or Staff\"}/>\r\n                    <br/>\r\n                    <input\r\n                        value={this.state.baseSalary}\r\n                        onChange={(e) => this.setState({\r\n                            baseSalary: e.target.value\r\n                        })}\r\n                        type={\"number\"}\r\n                        pattern=\"^[0-9]*$\"\r\n                        className={\"form-control\"}\r\n                        placeholder={\"Base Salary\"}/>\r\n                    <br/>\r\n                    <input\r\n                        value={this.state.allowances}\r\n                        onChange={(e) => this.setState({\r\n                            allowances: e.target.value\r\n                        })}\r\n                        type={\"number\"}\r\n                        pattern=\"^[0-9]*$\"\r\n                        className={`form-control`}\r\n                        placeholder={\"Allowances\"}/>\r\n                    <br/>\r\n                    <input\r\n                        value={this.state.epf}\r\n                        onChange={(e) => this.setState({\r\n                            epf: e.target.value\r\n                        })}\r\n                        type={\"number\"}\r\n                        pattern=\"^[0-9]*$\"\r\n                        className={`form-control`}\r\n                        placeholder={\"EPF\"}/>\r\n                    <br/>\r\n                    <button\r\n                        onClick={this.validateSalary}\r\n                        className=\"btn btn-primary btn-block\">\r\n                        SUBMIT\r\n                    </button>\r\n                </div>\r\n                <br/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport {profile} from \"../../services/UserService\";\r\nimport AdminNavBar from \"../../react/AdminNavBar\";\r\nimport DoctorNavBar from \"../../react/DoctorNavBar\";\r\n\r\nexport default class ViewStaffSalary extends React.Component {\r\n    state = {\r\n        profile: {\r\n            username: '',\r\n            userType: '',\r\n        },\r\n\r\n        loadedProfile: {\r\n            baseSalary: '',\r\n            allowances: '',\r\n            epf: ''\r\n        }\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        profile()\r\n            .then(profile => this.setState({\r\n                profile: profile\r\n            }))\r\n            .then(this.findSalaryByStaff)\r\n    }\r\n\r\n    findSalaryByStaff = () =>\r\n        fetch(\"api/salary/find/staff/\" + this.state.profile.username)\r\n            .then(response => response.json())\r\n            .then(salary => this.setState({\r\n                loadedProfile: salary\r\n            }))\r\n            .catch(() => console.log(\"Can’t access response. Blocked by browser?\"));\r\n\r\n    renderNavBar() {\r\n        if (this.state.profile.userType === \"Doctor\") {\r\n            return <DoctorNavBar/>\r\n        } else if (this.state.profile.userType === \"Admin Staff\") {\r\n            return <AdminNavBar/>\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.renderNavBar()}\r\n                <hr/>\r\n                <div>\r\n                    <h2>SALARY INFORMATION</h2>\r\n                    For user: <b>{this.state.profile.username} {this.state.profile.userType}</b>\r\n                    <hr/>\r\n                    <li><b>Base Salary:</b> {this.state.loadedProfile.baseSalary}</li>\r\n                    <li><b>Last Name:</b> {this.state.loadedProfile.allowances}</li>\r\n                    <li><b>Birth Date:</b> {this.state.loadedProfile.epf}</li>\r\n                </div>\r\n                <hr/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n","import React from \"react\";\r\nimport {deletePatientAllergy, logout, profile} from \"../../services/UserService\";\r\nimport PatientNavBar from \"../../react/PatientNavBar\";\r\nimport DoctorNavBar from \"../../react/DoctorNavBar\";\r\nimport AdminNavBar from \"../../react/AdminNavBar\";\r\n\r\nexport default class DeletePatientAllergy extends React.Component {\r\n\r\n    state = {\r\n        allergy: [],\r\n        profile: {\r\n            username: '',\r\n            userType: '',\r\n            allergyId: '',\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        profile()\r\n            .then(profile => this.setState({\r\n                profile: profile,\r\n                allergyId: ''\r\n            }))\r\n            .then(this.findAllAllergies)\r\n    }\r\n\r\n    logout = () => logout()\r\n        .then(status => this.props.history.push(\"/\"))\r\n\r\n    findAllAllergies = () =>\r\n        fetch(\"api/allergies/find/patient/\" + this.state.profile.username)\r\n            .then(response => response.json())\r\n            .then(allAllergies => this.setState({\r\n                allergy: allAllergies\r\n            }))\r\n            .catch(() => console.log(\"Can’t access response. Blocked by browser?\"));\r\n\r\n    deleteAllergy = () =>\r\n        deletePatientAllergy(this.state.allergyId)\r\n            .then(() => {\r\n                alert(\"Allergy has been removed! Refresh page to see changes :)\")\r\n            })\r\n\r\n\r\n    validateDeleteAllergy = () => {\r\n        if (this.state.allergyId === '') {\r\n            alert(\"Allergy ID cannot be empty :(\")\r\n            return false\r\n        } else {\r\n            this.deleteAllergy()\r\n        }\r\n    };\r\n\r\n    renderTableData() {\r\n        return this.state.allergy.map((allergy, index) => {\r\n            const {id, allergyInfo, allergyCause} = allergy //destructuring\r\n            return (\r\n                <tr key={id}>\r\n                    <td>{id}</td>\r\n                    <td>{allergyInfo}</td>\r\n                    <td>{allergyCause}</td>\r\n                </tr>\r\n            )\r\n        })\r\n    }\r\n\r\n    renderNavBar() {\r\n        if (this.state.profile.userType === \"Patient\") {\r\n            return <PatientNavBar/>\r\n        } else if (this.state.profile.userType === \"Doctor\") {\r\n            return <DoctorNavBar/>\r\n        } else if (this.state.profile.userType === \"Admin Staff\") {\r\n            return <AdminNavBar/>\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.renderNavBar()}\r\n                <hr/>\r\n                <div>\r\n                    <h2>ALLERGY INFORMATION</h2>\r\n                    For user: <b>{this.state.profile.username}</b>\r\n                    <hr/>\r\n                    <table id='table001'>\r\n                        <tbody>\r\n                        <th>Id</th>\r\n                        <th>Allergy Info</th>\r\n                        <th>Allergy Cause</th>\r\n                        {this.renderTableData()}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n                <hr/>\r\n                <div>\r\n                    <input\r\n                        value={this.state.allergyId}\r\n                        onChange={(e) => this.setState({\r\n                            allergyId: e.target.value\r\n                        })}\r\n                        type={\"number\"}\r\n                        pattern=\"^[0-9]*$\"\r\n                        className={\"form-control\"}\r\n                        placeholder={\"ENTER ALLERGY ID TO REMOVE ALLERGY\"}/>\r\n                    <br/>\r\n\r\n                    <button\r\n                        // onClick={this.validatePatientProfile}\r\n                        onClick={this.validateDeleteAllergy}\r\n                        className=\"btn btn-primary btn-block\">\r\n                        DELETE ALLERGY\r\n                    </button>\r\n                </div>\r\n                <br/>\r\n                <button\r\n                    onClickCapture={this.logout}\r\n                    className={\"btn btn-danger\"}\r\n                    onClick={this.logout}>\r\n                    Logout\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport {deletePatientInsurance, logout, profile} from \"../../services/UserService\";\r\nimport PatientNavBar from \"../../react/PatientNavBar\";\r\nimport DoctorNavBar from \"../../react/DoctorNavBar\";\r\nimport AdminNavBar from \"../../react/AdminNavBar\";\r\n\r\nexport default class DeletePatientInsurance extends React.Component {\r\n\r\n    state = {\r\n        insurance: [],\r\n        profile: {\r\n            username: '',\r\n            userType: '',\r\n            insuranceId: '',\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        profile()\r\n            .then(profile => this.setState({\r\n                profile: profile,\r\n                insuranceId: ''\r\n            }))\r\n            .then(this.findAllInsurances)\r\n    }\r\n\r\n    logout = () => logout()\r\n        .then(status => this.props.history.push(\"/\"))\r\n\r\n    findAllInsurances = () =>\r\n        fetch(\"api/insurances/find/patient/\" + this.state.profile.username)\r\n            .then(response => response.json())\r\n            .then(allInsurances => this.setState({\r\n                insurance: allInsurances\r\n            }))\r\n            .catch(() => console.log(\"Can’t access response. Blocked by browser?\"));\r\n\r\n    deleteInsurance= () =>\r\n        deletePatientInsurance(this.state.insuranceId)\r\n            .then(() => {\r\n                alert(\"Insurance has been removed! Refresh page to see changes :)\")\r\n            })\r\n\r\n\r\n    validateDeleteInsurance = () => {\r\n        if (this.state.insuranceId === '') {\r\n            alert(\"Insurance ID cannot be empty :(\")\r\n            return false\r\n        } else {\r\n            this.deleteInsurance()\r\n        }\r\n    };\r\n\r\n    renderTableData() {\r\n        return this.state.insurance.map((insurance, index) => {\r\n            const {id, insuranceDetails, insuranceType} = insurance //destructuring\r\n            return (\r\n                <tr key={id}>\r\n                    <td>{id}</td>\r\n                    <td>{insuranceDetails}</td>\r\n                    <td>{insuranceType}</td>\r\n                </tr>\r\n            )\r\n        })\r\n    }\r\n\r\n    renderNavBar() {\r\n        if (this.state.profile.userType === \"Patient\") {\r\n            return <PatientNavBar/>\r\n        } else if (this.state.profile.userType === \"Doctor\") {\r\n            return <DoctorNavBar/>\r\n        } else if (this.state.profile.userType === \"Admin Staff\") {\r\n            return <AdminNavBar/>\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.renderNavBar()}\r\n                <hr/>\r\n                <div>\r\n                    <h2>INSURANCE INFORMATION</h2>\r\n                    For user: <b>{this.state.profile.username}</b>\r\n                    <hr/>\r\n                    <table id='table001'>\r\n                        <tbody>\r\n                        <th>Id</th>\r\n                        <th>Insurance Details</th>\r\n                        <th>Insurance Type</th>\r\n                        {this.renderTableData()}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n                <hr/>\r\n                <div>\r\n                    <input\r\n                        value={this.state.insuranceId}\r\n                        onChange={(e) => this.setState({\r\n                            insuranceId: e.target.value\r\n                        })}\r\n                        type={\"number\"}\r\n                        pattern=\"^[0-9]*$\"\r\n                        className={\"form-control\"}\r\n                        placeholder={\"ENTER INSURANCE ID TO REMOVE INSURANCE\"}/>\r\n                    <br/>\r\n\r\n                    <button\r\n                        // onClick={this.validatePatientProfile}\r\n                        onClick={this.validateDeleteInsurance}\r\n                        className=\"btn btn-primary btn-block\">\r\n                        DELETE INSURANCE\r\n                    </button>\r\n                </div>\r\n                <br/>\r\n                <button\r\n                    onClickCapture={this.logout}\r\n                    className={\"btn btn-danger\"}\r\n                    onClick={this.logout}>\r\n                    Logout\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport {\r\n    logout,\r\n    profile,\r\n    deleteDoctorAppointments\r\n} from \"../../services/UserService\";\r\nimport PatientNavBar from \"../../react/PatientNavBar\";\r\nimport DoctorNavBar from \"../../react/DoctorNavBar\";\r\nimport AdminNavBar from \"../../react/AdminNavBar\";\r\n\r\nexport default class DeleteDoctorAppointment extends React.Component {\r\n\r\n    state = {\r\n        appointments: [],\r\n        profile: {\r\n            username: '',\r\n            userType: '',\r\n            appointmentId: '',\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        profile()\r\n            .then(profile => this.setState({\r\n                                               profile: profile,\r\n                                               appointmentId: ''\r\n                                           }))\r\n            .then(this.findAllAppointments)\r\n    }\r\n\r\n    logout = () => logout()\r\n        .then(status => this.props.history.push(\"/\"))\r\n\r\n    findAllAppointments = () =>\r\n        fetch(\"api/appointment/find/doctor/\" + this.state.profile.username)\r\n            .then(response => response.json())\r\n            .then(allAppointments => this.setState({\r\n                                                       appointments: allAppointments\r\n                                                   }))\r\n            .catch(() => console.log(\"Can’t access response. Blocked by browser?\"));\r\n\r\n\r\n    deleteAppointment = () =>\r\n        deleteDoctorAppointments(this.state.appointmentId)\r\n            .then(() => {\r\n                alert(\"Appointment has been removed! Refresh page to see changes :)\")\r\n            })\r\n\r\n    validateDeleteAppointments = () => {\r\n        if (this.state.appointmentId === '') {\r\n            alert(\"Appointment ID cannot be empty :(\")\r\n            return false\r\n        } else {\r\n            this.deleteAppointment()\r\n        }\r\n    };\r\n\r\n    renderTableData() {\r\n        return this.state.appointments.map((appointments, index) => {\r\n            const {id, dateOfAppointment, notes, time} = appointments //destructuring\r\n            const patientName = appointments.patient.firstName + \" \" + appointments.patient.lastName\r\n            return (\r\n                <tr key={id}>\r\n                    <td>{id}</td>\r\n                    <td>{dateOfAppointment}</td>\r\n                    <td>{notes}</td>\r\n                    <td>{time}</td>\r\n                    <td>{patientName}</td>\r\n                </tr>\r\n            )\r\n        })\r\n    }\r\n\r\n    renderNavBar() {\r\n        if (this.state.profile.userType === \"Patient\") {\r\n            return <PatientNavBar/>\r\n        } else if (this.state.profile.userType === \"Doctor\") {\r\n            return <DoctorNavBar/>\r\n        } else if (this.state.profile.userType === \"Admin Staff\") {\r\n            return <AdminNavBar/>\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.renderNavBar()}\r\n                <hr/>\r\n                <div>\r\n                    <h2>APPOINTMENT INFORMATION</h2>\r\n                    For user: <b>{this.state.profile.username} {this.state.profile.userType}</b>\r\n                    <hr/>\r\n                    <table id='table001'>\r\n                        <tbody>\r\n                        <th>Id</th>\r\n                        <th>Date</th>\r\n                        <th>Notes</th>\r\n                        <th>Time</th>\r\n                        <th>Patient</th>\r\n                        {this.renderTableData()}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n                <hr/>\r\n                <div>\r\n                    <input\r\n                        value={this.state.appointmentId}\r\n                        onChange={(e) => this.setState({\r\n                                                           appointmentId: e.target.value\r\n                                                       })}\r\n                        type={\"number\"}\r\n                        pattern=\"^[0-9]*$\"\r\n                        className={\"form-control\"}\r\n                        placeholder={\"ENTER APPOINTMENT ID TO REMOVE APPOINTMENT\"}/>\r\n                    <br/>\r\n\r\n                    <button\r\n                        // onClick={this.validatePatientProfile}\r\n                        onClick={this.validateDeleteAppointments}\r\n                        className=\"btn btn-primary btn-block\">\r\n                        DELETE APPOINTMENTS\r\n                    </button>\r\n                </div>\r\n                <br/>\r\n                <button\r\n                    onClickCapture={this.logout}\r\n                    className={\"btn btn-danger\"}\r\n                    onClick={this.logout}>\r\n                    Logout\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport {logout, profile} from \"../../services/UserService\";\r\nimport AdminNavBar from \"../../react/AdminNavBar\";\r\n\r\nexport default class ViewAllAddresses extends React.Component {\r\n\r\n    state = {\r\n        addresses: [],\r\n        profile: {\r\n            username: '',\r\n            userType: '',\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        profile()\r\n            .then(profile => this.setState({\r\n                profile: profile,\r\n                addressId: ''\r\n            }))\r\n            .then(this.findAllAddresses)\r\n    }\r\n\r\n    logout = () => logout()\r\n        .then(status => this.props.history.push(\"/\"))\r\n\r\n    findAllAddresses = () =>\r\n        fetch(\"api/addresses/find/all\")\r\n            .then(response => response.json())\r\n            .then(allAddresses => this.setState({\r\n                addresses: allAddresses\r\n            }))\r\n            .catch(() => console.log(\"Can’t access response. Blocked by browser?\"));\r\n\r\n\r\n    renderTableData() {\r\n        return this.state.addresses.map((address, index) => {\r\n            const { id, house, street1, street2, city, state, zip } = address //destructuring\r\n            const person = address.person.firstName + \" \" + address.person.lastName\r\n            return (\r\n                <tr key={id}>\r\n                    <td>{id}</td>\r\n                    <td>{house}</td>\r\n                    <td>{street1}</td>\r\n                    <td>{street2}</td>\r\n                    <td>{city}</td>\r\n                    <td>{state}</td>\r\n                    <td>{zip}</td>\r\n                    <td>{person}</td>\r\n                </tr>\r\n            )\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <AdminNavBar/>\r\n                <hr/>\r\n                <div>\r\n                    <h2>ADDRESS INFORMATION</h2>\r\n                    For user: <b>{this.state.profile.username} {this.state.profile.userType}</b>\r\n                    <hr/>\r\n                    <table id='table001'>\r\n                        <tbody>\r\n                        <th>Id</th>\r\n                        <th>House</th>\r\n                        <th>Street1</th>\r\n                        <th>Street2</th>\r\n                        <th>City</th>\r\n                        <th>State</th>\r\n                        <th>Zip</th>\r\n                        <th>Person</th>\r\n                        {this.renderTableData()}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n                <hr/>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport {logout, profile} from \"../../services/UserService\";\r\nimport AdminNavBar from \"../../react/AdminNavBar\";\r\n\r\nexport default class ViewAllPhones extends React.Component {\r\n\r\n    state = {\r\n        phones: [],\r\n        profile: {\r\n            username: '',\r\n            userType: '',\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        profile()\r\n            .then(profile => this.setState({\r\n                profile: profile,\r\n                phoneId: ''\r\n            }))\r\n            .then(this.findAllPhones)\r\n    }\r\n\r\n    findAllPhones = () =>\r\n        fetch(\"api/phones/find/all\")\r\n            .then(response => response.json())\r\n            .then(allPhones => this.setState({\r\n                phones: allPhones\r\n            }))\r\n            .catch(() => console.log(\"Can’t access response. Blocked by browser?\"));\r\n\r\n\r\n    renderTableData() {\r\n        return this.state.phones.map((phones, index) => {\r\n            const {id, phone} = phones //destructuring\r\n            const person = phones.person.firstName + \" \" + phones.person.lastName\r\n            const personId = phones.person.id\r\n            return (\r\n                <tr key={id}>\r\n                    <td>{id}</td>\r\n                    <td>{phone}</td>\r\n                    <td>{personId}</td>\r\n                    <td>{person}</td>\r\n                </tr>\r\n            )\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <AdminNavBar/>\r\n                <hr/>\r\n                <div>\r\n                    <h2>PHONE INFORMATION</h2>\r\n                    For user: <b>{this.state.profile.username}</b>\r\n                    <hr/>\r\n                    <table id='table001'>\r\n                        <tbody>\r\n                        <th>Id</th>\r\n                        <th>Phone Number</th>\r\n                        <th>Person ID</th>\r\n                        <th>Person Name</th>\r\n                        {this.renderTableData()}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n                <hr/>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport {profile} from \"../../services/UserService\";\r\n\r\nimport AdminNavBar from \"../../react/AdminNavBar\";\r\n\r\nexport default class ViewAllAppointments extends React.Component {\r\n\r\n    state = {\r\n        appointments: [],\r\n        profile: {\r\n            username: '',\r\n            userType: '',\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        profile()\r\n            .then(profile => this.setState({\r\n                profile: profile,\r\n                appointmentId: ''\r\n            }))\r\n            .then(this.findAllAppointments)\r\n    }\r\n\r\n\r\n    findAllAppointments = () =>\r\n        fetch(\"api/appointments/find/all\")\r\n            .then(response => response.json())\r\n            .then(allAppointments => this.setState({\r\n                appointments: allAppointments\r\n            }))\r\n            .catch(() => alert(\"Can’t access response. Problem reaching API server :(\"));\r\n\r\n\r\n    renderTableData() {\r\n        return this.state.appointments.map((appointments, index) => {\r\n            const {id, dateOfAppointment, notes, time} = appointments //destructuring\r\n            const doctorName = appointments.doctor.firstName + \" \" + appointments.doctor.lastName\r\n            const patientName = appointments.patient.firstName + \" \" + appointments.patient.lastName\r\n            return (\r\n                <tr key={id}>\r\n                    <td>{id}</td>\r\n                    <td>{dateOfAppointment}</td>\r\n                    <td>{notes}</td>\r\n                    <td>{time}</td>\r\n                    <td>{doctorName}</td>\r\n                    <td>{patientName}</td>\r\n                </tr>\r\n            )\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <AdminNavBar/>\r\n                <hr/>\r\n                <div>\r\n                    <h2>APPOINTMENT INFORMATION</h2>\r\n                    For user: <b>{this.state.profile.username} {this.state.profile.userType}</b>\r\n                    <hr/>\r\n                    <table id='table001'>\r\n                        <tbody>\r\n                        <th>Id</th>\r\n                        <th>Date</th>\r\n                        <th>Notes</th>\r\n                        <th>Time</th>\r\n                        <th>Doctor</th>\r\n                        <th>Patient</th>\r\n                        {this.renderTableData()}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n                <hr/>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport {profile} from \"../../services/UserService\";\r\nimport AdminNavBar from \"../../react/AdminNavBar\";\r\n\r\nexport default class ViewAllPrescriptions extends React.Component {\r\n\r\n    state = {\r\n        prescriptions: [],\r\n        profile: {\r\n            username: '',\r\n            userType: '',\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        profile()\r\n            .then(profile => this.setState({\r\n                profile: profile\r\n            }))\r\n            .then(this.findAllPrescriptions)\r\n    }\r\n\r\n\r\n    findAllPrescriptions = () =>\r\n        fetch(\"api/prescriptions/find/all\")\r\n            .then(response => response.json())\r\n            .then(allPrescriptions => this.setState({\r\n                prescriptions: allPrescriptions\r\n            }))\r\n            .catch(() => console.log(\"Can’t access response. Blocked by browser?\"));\r\n\r\n    renderTableData() {\r\n        return this.state.prescriptions.map((prescription, index) => {\r\n            const {id, prescriptionDate, refillData} = prescription //destructuring\r\n            const patientName = prescription.patient.firstName + \" \" + prescription.patient.lastName\r\n            const doctorName = prescription.doctor.firstName + \" \" + prescription.doctor.lastName\r\n\r\n            return (\r\n                <tr key={id}>\r\n                    <td>{id}</td>\r\n                    <td>{prescriptionDate}</td>\r\n                    <td>{refillData}</td>\r\n                    <td>{doctorName}</td>\r\n                    <td>{patientName}</td>\r\n                </tr>\r\n            )\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <AdminNavBar/>\r\n                <hr/>\r\n                <div>\r\n                    <h2>PRESCRIPTION INFORMATION</h2>\r\n                    For user: <b>{this.state.profile.username} {this.state.profile.userType}</b>\r\n                    <hr/>\r\n                    <table id='table001'>\r\n                        <tbody>\r\n                        <th>Id</th>\r\n                        <th>Date</th>\r\n                        <th>Time</th>\r\n                        <th>Doctor</th>\r\n                        <th>Patient Name</th>\r\n                        {this.renderTableData()}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n                <hr/>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport {profile} from \"../../services/UserService\";\r\nimport AdminNavBar from \"../../react/AdminNavBar\";\r\n\r\nexport default class ViewAllPrescriptions extends React.Component {\r\n\r\n    state = {\r\n        salaries: [],\r\n        profile: {\r\n            username: '',\r\n            userType: '',\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        profile()\r\n            .then(profile => this.setState({\r\n                profile: profile\r\n            }))\r\n            .then(this.findAllSalaries)\r\n    }\r\n\r\n\r\n    findAllSalaries = () =>\r\n        fetch(\"api/salary/find/all\")\r\n            .then(response => response.json())\r\n            .then(allSalaries => this.setState({\r\n                salaries: allSalaries\r\n            }))\r\n            .catch(() => console.log(\"Can’t access response. Blocked by browser?\"));\r\n\r\n    renderTableData() {\r\n        return this.state.salaries.map((salary, index) => {\r\n            const {id, baseSalary, allowances, epf} = salary //destructuring\r\n            const staffId = salary.staff.id\r\n            const staffName = salary.staff.firstName + \" \" + salary.staff.lastName\r\n            return (\r\n                <tr key={id}>\r\n                    <td>{id}</td>\r\n                    <td>{baseSalary}</td>\r\n                    <td>{allowances}</td>\r\n                    <td>{epf}</td>\r\n                    <td>{staffId}</td>\r\n                    <td>{staffName}</td>\r\n                </tr>\r\n            )\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <AdminNavBar/>\r\n                <hr/>\r\n                <div>\r\n                    <h2>PRESCRIPTION INFORMATION</h2>\r\n                    For user: <b>{this.state.profile.username} </b>\r\n                    User type: <b>{this.state.profile.userType}</b>\r\n                    <hr/>\r\n                    <table id='table001'>\r\n                        <tbody>\r\n                        <th>Id</th>\r\n                        <th>Salary Basic</th>\r\n                        <th>Allowances</th>\r\n                        <th>EPF</th>\r\n                        <th>Staff ID</th>\r\n                        <th>Staff Name</th>\r\n                        {this.renderTableData()}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n                <hr/>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport {logout, profile} from \"../../services/UserService\";\r\nimport AdminNavBar from \"../../react/AdminNavBar\";\r\n\r\nexport default class ViewAllAllergies extends React.Component {\r\n\r\n    state = {\r\n        allergy: [],\r\n        profile: {\r\n            username: '',\r\n            userType: '',\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        profile()\r\n            .then(profile => this.setState({\r\n                profile: profile,\r\n                allergyId: ''\r\n            }))\r\n            .then(this.findAllAllergies)\r\n    }\r\n\r\n\r\n    findAllAllergies = () =>\r\n        fetch(\"api/allergies/find/all\")\r\n            .then(response => response.json())\r\n            .then(allAllergies => this.setState({\r\n                allergy: allAllergies\r\n            }))\r\n            .catch(() => console.log(\"Can’t access response. Blocked by browser?\"));\r\n\r\n    renderTableData() {\r\n        return this.state.allergy.map((allergy, index) => {\r\n            const {id, allergyInfo, allergyCause} = allergy //destructuring\r\n            const patientName = allergy.patient.firstName + \" \" + allergy.patient.lastName\r\n            return (\r\n                <tr key={id}>\r\n                    <td>{id}</td>\r\n                    <td>{allergyInfo}</td>\r\n                    <td>{allergyCause}</td>\r\n                    <td>{patientName}</td>\r\n                </tr>\r\n            )\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <AdminNavBar/>\r\n                <hr/>\r\n                <div>\r\n                    <h2>ALLERGY INFORMATION</h2>\r\n                    For user: <b>{this.state.profile.username}</b>\r\n                    <hr/>\r\n                    <table id='table001'>\r\n                        <tbody>\r\n                        <th>Id</th>\r\n                        <th>Allergy Info</th>\r\n                        <th>Allergy Cause</th>\r\n                        <th>Patient Name</th>\r\n                        {this.renderTableData()}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n                <hr/>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport {logout, profile} from \"../../services/UserService\";\r\nimport AdminNavBar from \"../../react/AdminNavBar\";\r\n\r\nexport default class ViewAllInsurances extends React.Component {\r\n\r\n    state = {\r\n        insurance: [],\r\n        profile: {\r\n            username: '',\r\n            userType: '',\r\n            insuranceId: '',\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        profile()\r\n            .then(profile => this.setState({\r\n                profile: profile,\r\n                insuranceId: ''\r\n            }))\r\n            .then(this.findAllInsurances)\r\n    }\r\n\r\n\r\n    findAllInsurances = () =>\r\n        fetch(\"api/insurances/find/all\")\r\n            .then(response => response.json())\r\n            .then(allInsurances => this.setState({\r\n                insurance: allInsurances\r\n            }))\r\n            .catch(() => console.log(\"Can’t access response. Blocked by browser?\"));\r\n\r\n\r\n    renderTableData() {\r\n        return this.state.insurance.map((insurance, index) => {\r\n            const {id, insuranceDetails, insuranceType} = insurance //destructuring\r\n            const patientName = insurance.patient.firstName + \" \" + insurance.patient.lastName\r\n            return (\r\n                <tr key={id}>\r\n                    <td>{id}</td>\r\n                    <td>{insuranceDetails}</td>\r\n                    <td>{insuranceType}</td>\r\n                    <td>{patientName}</td>\r\n                </tr>\r\n            )\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <AdminNavBar/>\r\n                <hr/>\r\n                <div>\r\n                    <h2>INSURANCE INFORMATION</h2>\r\n                    For user: <b>{this.state.profile.username}</b>\r\n                    <hr/>\r\n                    <table id='table001'>\r\n                        <tbody>\r\n                        <th>Id</th>\r\n                        <th>Insurance Details</th>\r\n                        <th>Insurance Type</th>\r\n                        <th>Patient Name</th>\r\n                        {this.renderTableData()}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n                <hr/>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\"\r\nimport {logout, profile, updateDoctorInfo} from \"../../services/UserService\";\r\nimport AdminNavBar from \"../../react/AdminNavBar\";\r\n\r\nexport default class DoctorUpdateByAdmin extends React.Component {\r\n\r\n    state = {\r\n        profile: {\r\n            username: '',\r\n            doctorUsername: '',\r\n            password: '',\r\n            userType: '',\r\n            firstName: '',\r\n            lastName: '',\r\n            dateOfBirth: '',\r\n            status: '',\r\n            joiningDate: '',\r\n            designation: '',\r\n            education: '',\r\n            certification: '',\r\n            department: '',\r\n            gender: 'Male',\r\n        },\r\n    }\r\n\r\n    componentDidMount() {\r\n        profile()\r\n            .then(profile => this.setState({\r\n                profile: profile,\r\n                username: profile.username,\r\n                password: profile.password,\r\n                doctorUsername: '',\r\n                firstName: '',\r\n                lastName: '',\r\n                dateOfBirth: '',\r\n                status: '',\r\n                joiningDate: '',\r\n                designation: '',\r\n                education: '',\r\n                certification: '',\r\n                department: '',\r\n                gender: 'Male',\r\n            }))\r\n    }\r\n\r\n    isValidDate = (dateString) => {\r\n        let regEx = /^\\d{4}-\\d{2}-\\d{2}$/;\r\n        if (!dateString.match(regEx)) return false;  // Invalid format\r\n        let d = new Date(dateString);\r\n        let dNum = d.getTime();\r\n        if (!dNum && dNum !== 0) return false; // NaN value, Invalid date\r\n        return d.toISOString().slice(0, 10) === dateString;\r\n    }\r\n\r\n    validateDoctorProfile = () => {\r\n        if (this.state.doctorUsername === '') {\r\n            alert(\"Doctor's username cannot be empty :(\")\r\n            return false\r\n        } else if (this.state.firstName === '') {\r\n            alert(\"First Name cannot be empty :(\")\r\n            return false\r\n        } else if (this.state.lastName === '') {\r\n            alert(\"Last Name cannot be empty :(\")\r\n            return false\r\n        } else if (this.state.dateOfBirth === '') {\r\n            alert(\"Date of Birth cannot be empty :(\")\r\n            return false\r\n        } else if (!this.isValidDate(this.state.dateOfBirth)) {\r\n            alert(\"Date of Birth format is invalid :(\")\r\n            return false\r\n        } else if (this.state.joiningDate === '') {\r\n            alert(\"Joining Date cannot be empty :(\")\r\n            return false\r\n        } else if (!this.isValidDate(this.state.joiningDate)) {\r\n            alert(\"Joining date format is invalid :(\")\r\n            return false\r\n        } else if (this.state.designation === '') {\r\n            alert(\"Designation cannot be empty :(\")\r\n            return false\r\n        } else if (this.state.education === '') {\r\n            alert(\"Education cannot be empty :(\")\r\n            return false\r\n        } else {\r\n            this.updateDoctorInfo(this.state)\r\n        }\r\n    };\r\n\r\n    logout = () => logout()\r\n        .then(status => this.props.history.push(\"/\"))\r\n\r\n\r\n    handleSelectGenderChange = event => {\r\n        this.setState({gender: event.target.value});\r\n        console.log(this.state)\r\n    }\r\n\r\n    handleSelectDeptChange = event => {\r\n        this.setState({department: event.target.value});\r\n        console.log(this.state)\r\n    }\r\n\r\n    updateDoctorInfo = (doctor) =>\r\n        updateDoctorInfo(doctor, this.state.doctorUsername)\r\n            .then((response) => {\r\n                if (response.status === 500) {\r\n                    console.log(response)\r\n                    alert(\"Problem updating profile :o  Please check username again :)\")\r\n\r\n                } else {\r\n                    console.log(response)\r\n                    alert(\"Profile updated successfully :)\")\r\n                }\r\n            });\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <AdminNavBar/>\r\n                <hr/>\r\n                Hi {this.state.profile.username}!\r\n                <br/>\r\n                <hr/>\r\n                <h3>UPDATE A DOCTOR'S PROFILE</h3>\r\n                <br/>\r\n                <div>\r\n                    <input\r\n                        value={this.state.doctorUsername}\r\n                        onChange={(e) => this.setState({\r\n                            doctorUsername: e.target.value\r\n                        })}\r\n                        className={\"form-control\"}\r\n                        placeholder={\"Enter username of Doctor to be updated\"}/>\r\n                    <br/>\r\n                    <input\r\n                        value={this.state.firstName}\r\n                        onChange={(e) => this.setState({\r\n                            firstName: e.target.value\r\n                        })}\r\n                        className={\"form-control\"}\r\n                        placeholder={\"First Name\"}/>\r\n                    <br/>\r\n                    <input\r\n                        value={this.state.lastName}\r\n                        onChange={(e) => this.setState({\r\n                            lastName: e.target.value\r\n                        })}\r\n                        className={`form-control`}\r\n                        placeholder={\"Last Name\"}/>\r\n                    <br/>\r\n                    <input\r\n                        value={this.state.dateOfBirth}\r\n                        onChange={(e) => this.setState({\r\n                            dateOfBirth: e.target.value\r\n                        })}\r\n                        className={`form-control`}\r\n                        placeholder={\"Date of Birth     (YYYY-MM-DD)\"}/>\r\n                    <br/>\r\n                    <input\r\n                        value={this.state.joiningDate}\r\n                        onChange={(e) => this.setState({\r\n                            joiningDate: e.target.value\r\n                        })}\r\n                        className={`form-control`}\r\n                        placeholder={\"Date of Joining    (YYYY-MM-DD)\"}/>\r\n                    <br/>\r\n                    <input\r\n                        value={this.state.status}\r\n                        onChange={(e) => this.setState({\r\n                            status: e.target.value\r\n                        })}\r\n                        className={`form-control`}\r\n                        placeholder={\"Status\"}/>\r\n                    <br/>\r\n                    <input\r\n                        value={this.state.designation}\r\n                        onChange={(e) => this.setState({\r\n                            designation: e.target.value\r\n                        })}\r\n                        className={`form-control`}\r\n                        placeholder={\"Designation\"}/>\r\n                    <br/>\r\n                    <input\r\n                        value={this.state.education}\r\n                        onChange={(e) => this.setState({\r\n                            education: e.target.value\r\n                        })}\r\n                        className={`form-control`}\r\n                        placeholder={\"Education\"}/>\r\n                    <br/>\r\n                    <input\r\n                        value={this.state.certification}\r\n                        onChange={(e) => this.setState({\r\n                            certification: e.target.value\r\n                        })}\r\n                        className={`form-control`}\r\n                        placeholder={\"Certification\"}/>\r\n                    <br/>\r\n                    <div>\r\n                        <select\r\n                            className={\"form-control\"}\r\n                            value={this.state.department}\r\n                            onChange={this.handleSelectDeptChange}>\r\n                            <option>ENT</option>\r\n                            <option>CARDIOLOGY</option>\r\n                            <option>GYNAECOLOGY</option>\r\n                            <option>ORTHOPAEDIC</option>\r\n                            <option>PEDIATRIC</option>\r\n                        </select>\r\n                    </div>\r\n                    <br/>\r\n                    <div>\r\n                        <select\r\n                            className={\"form-control\"}\r\n                            value={this.state.gender}\r\n                            onChange={this.handleSelectGenderChange}>\r\n                            <option>Male</option>\r\n                            <option>Female</option>\r\n                            <option>Other</option>\r\n                        </select>\r\n                    </div>\r\n                    <br/>\r\n                    <button\r\n                        onClick={this.validateDoctorProfile}\r\n                        className=\"btn btn-primary btn-block\">\r\n                        UPDATE\r\n                    </button>\r\n                </div>\r\n                <hr/>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from \"react\"\r\nimport {logout, profile, updateAdminStaffInfo} from \"../../services/UserService\";\r\nimport AdminNavBar from \"../../react/AdminNavBar\";\r\n\r\nexport default class UpdateAdminStaffPersonalData extends React.Component {\r\n\r\n    state = {\r\n        profile: {\r\n            username: '',\r\n            password: '',\r\n            userType: '',\r\n            firstName: '',\r\n            lastName: '',\r\n            dateOfBirth: '',\r\n            status: '',\r\n            joiningDate: '',\r\n            jobTitle: '',\r\n            jobDescription: '',\r\n            gender: 'Male',\r\n            department: 'ENT'\r\n        },\r\n    }\r\n\r\n    componentDidMount() {\r\n        profile()\r\n            .then(profile => this.setState({\r\n                profile: profile,\r\n                username: profile.username,\r\n                password: profile.password,\r\n                firstName: '',\r\n                lastName: '',\r\n                dateOfBirth: '',\r\n                status: '',\r\n                joiningDate: '',\r\n                jobTitle: '',\r\n                jobDescription: '',\r\n                gender: 'Male',\r\n                department: 'ENT'\r\n            }))\r\n    }\r\n\r\n    isValidDate = (dateString) => {\r\n        let regEx = /^\\d{4}-\\d{2}-\\d{2}$/;\r\n        if (!dateString.match(regEx)) return false;  // Invalid format\r\n        let d = new Date(dateString);\r\n        let dNum = d.getTime();\r\n        if (!dNum && dNum !== 0) return false; // NaN value, Invalid date\r\n        return d.toISOString().slice(0, 10) === dateString;\r\n    }\r\n\r\n    validateAdminStaffProfile = () => {\r\n        if (this.state.firstName === '') {\r\n            alert(\"First Name cannot be empty :(\")\r\n            return false\r\n        }\r\n        else if (this.state.lastName === '') {\r\n            alert(\"Last Name cannot be empty :(\")\r\n            return false\r\n        }\r\n        else if (this.state.dateOfBirth === '') {\r\n            alert(\"Date of Birth cannot be empty :(\")\r\n            return false\r\n        }\r\n        else if (!this.isValidDate(this.state.dateOfBirth)) {\r\n            alert(\"Date of Birth format is invalid :(\")\r\n            return false\r\n        }\r\n        else if (this.state.joiningDate === '') {\r\n            alert(\"Joining Date cannot be empty :(\")\r\n            return false\r\n        }\r\n        else if (!this.isValidDate(this.state.joiningDate)) {\r\n            alert(\"Joining date format is invalid :(\")\r\n            return false\r\n        }\r\n        else if (this.state.jobTitle === '') {\r\n            alert(\"Job Title cannot be empty :(\")\r\n            return false\r\n        }\r\n        else {\r\n            this.updateAdminStaffInfo(this.state)\r\n        }\r\n    };\r\n\r\n    logout = () => logout()\r\n        .then(status => this.props.history.push(\"/\"))\r\n\r\n    updateAdminStaffInfo = (adminStaff) =>\r\n        updateAdminStaffInfo(adminStaff, this.state.username)\r\n            .then((response) => {\r\n                if (response.status === 500) {\r\n                    console.log(response)\r\n                    alert(\"Problem updating profile :o  \")\r\n\r\n                } else {\r\n                    console.log(response)\r\n                    alert(\"Profile updated successfully :)\")\r\n                }\r\n            });\r\n\r\n    handleSelectGenderChange = event => {\r\n        this.setState({gender: event.target.value});\r\n        console.log(this.state)\r\n    }\r\n\r\n    handleSelectDeptChange = event => {\r\n        this.setState({department: event.target.value});\r\n        console.log(this.state)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n\r\n            <div>\r\n                <AdminNavBar/>\r\n                <hr/>\r\n                <h1>Administrative Staff Profile</h1>\r\n                Hi {this.state.profile.username}!\r\n                <br/>\r\n                <b>User Type:</b> Administrator\r\n                <br/>\r\n                <hr/>\r\n                <h3>Complete your profile</h3>\r\n                <br/>\r\n                <div>\r\n                    <input\r\n                        value={this.state.firstName}\r\n                        onChange={(e) => this.setState({\r\n                            firstName: e.target.value\r\n                        })}\r\n                        className={\"form-control\"}\r\n                        placeholder={\"First Name\"}/>\r\n                    <br/>\r\n                    <input\r\n                        value={this.state.lastName}\r\n                        onChange={(e) => this.setState({\r\n                            lastName: e.target.value\r\n                        })}\r\n                        className={`form-control`}\r\n                        placeholder={\"Last Name\"}/>\r\n                    <br/>\r\n                    <input\r\n                        value={this.state.dateOfBirth}\r\n                        onChange={(e) => this.setState({\r\n                            dateOfBirth: e.target.value\r\n                        })}\r\n                        className={`form-control`}\r\n                        placeholder={\"Date of Birth     (YYYY-MM-DD)\"}/>\r\n                    <br/>\r\n                    <input\r\n                        value={this.state.joiningDate}\r\n                        onChange={(e) => this.setState({\r\n                            joiningDate: e.target.value\r\n                        })}\r\n                        className={`form-control`}\r\n                        placeholder={\"Date of Joining       (YYYY-MM-DD)\"}/>\r\n                    <br/>\r\n                    <input\r\n                        value={this.state.status}\r\n                        onChange={(e) => this.setState({\r\n                            status: e.target.value\r\n                        })}\r\n                        className={`form-control`}\r\n                        placeholder={\"Status\"}/>\r\n                    <br/>\r\n                    <input\r\n                        value={this.state.jobTitle}\r\n                        onChange={(e) => this.setState({\r\n                            jobTitle: e.target.value\r\n                        })}\r\n                        className={`form-control`}\r\n                        placeholder={\"Job Title\"}/>\r\n                    <br/>\r\n                    <input\r\n                        value={this.state.jobDescription}\r\n                        onChange={(e) => this.setState({\r\n                            jobDescription: e.target.value\r\n                        })}\r\n                        className={`form-control`}\r\n                        placeholder={\"Job Description\"}/>\r\n                    <br/>\r\n                    <div>\r\n                        <select\r\n                            className={\"form-control\"}\r\n                            value={this.state.department}\r\n                            onChange={this.handleSelectDeptChange}>\r\n                            <option>ENT</option>\r\n                            <option>CARDIOLOGY</option>\r\n                            <option>GYNAECOLOGY</option>\r\n                            <option>ORTHOPAEDIC</option>\r\n                            <option>PEDIATRIC</option>\r\n                        </select>\r\n                    </div>\r\n                    <br/>\r\n                    <div>\r\n                        <select\r\n                            className={\"form-control\"}\r\n                            value={this.state.gender}\r\n                            onChange={this.handleSelectGenderChange}>\r\n                            <option>Male</option>\r\n                            <option>Female</option>\r\n                            <option>Other</option>\r\n                        </select>\r\n                    </div>\r\n                    <br/>\r\n                    <button\r\n                        onClick={this.validateAdminStaffProfile}\r\n                        className=\"btn btn-primary btn-block\">\r\n                        SUBMIT\r\n                    </button>\r\n                </div>\r\n                <hr/>\r\n\r\n                <button\r\n                    onClickCapture={this.logout}\r\n                    className={\"btn btn-danger\"}\r\n                    onClick={this.logout}>\r\n                    Logout\r\n                </button>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from \"react\"\r\nimport {profile, updatePatientInfo} from \"../../services/UserService\";\r\nimport AdminNavBar from \"../../react/AdminNavBar\";\r\n\r\nexport default class UpdatePatientPersonalData extends React.Component {\r\n\r\n    state = {\r\n        profile: {\r\n            username: '',\r\n            password: '',\r\n            patientUsername: '',\r\n            firstName: '',\r\n            lastName: '',\r\n            dateOfBirth: '',\r\n            dateOfAdmission: '',\r\n            medicalHistory: '',\r\n            gender: 'Male',\r\n        },\r\n    }\r\n\r\n    isValidDate = (dateString) => {\r\n        let regEx = /^\\d{4}-\\d{2}-\\d{2}$/;\r\n        if (!dateString.match(regEx)) return false;  // Invalid format\r\n        let d = new Date(dateString);\r\n        let dNum = d.getTime();\r\n        if (!dNum && dNum !== 0) return false; // NaN value, Invalid date\r\n        return d.toISOString().slice(0, 10) === dateString;\r\n    }\r\n\r\n    validatePatientProfile = () => {\r\n        if (this.state.patientUsername === '') {\r\n            alert(\"Patient's username cannot be empty :(\")\r\n            return false\r\n        } else if (this.state.firstName === '') {\r\n            alert(\"First Name cannot be empty :(\")\r\n            return false\r\n        } else if (this.state.lastName === '') {\r\n            alert(\"Last Name cannot be empty :(\")\r\n            return false\r\n        } else if (this.state.dateOfBirth === '') {\r\n            alert(\"Date of Birth cannot be empty :(\")\r\n            return false\r\n        } else if (!this.isValidDate(this.state.dateOfBirth)) {\r\n            alert(\"Date of Birth format is invalid :(\")\r\n            return false\r\n        } else if (this.state.dateOfAdmission === '') {\r\n            alert(\"Verify password cannot be empty :(\")\r\n            return false\r\n        } else if (!this.isValidDate(this.state.dateOfAdmission)) {\r\n            alert(\"Date of Admission format is invalid :(\")\r\n            return false\r\n        } else {\r\n            this.updatePatientInfo(this.state)\r\n        }\r\n\r\n    };\r\n\r\n\r\n    componentDidMount() {\r\n        profile()\r\n            .then(profile => this.setState({\r\n                profile: profile,\r\n                username: profile.username,\r\n                password: profile.password,\r\n                patientUsername: '',\r\n                firstName: '',\r\n                lastName: '',\r\n                dateOfBirth: '',\r\n                dateOfAdmission: '',\r\n                medicalHistory: '',\r\n                gender: 'Male'\r\n            }))\r\n    }\r\n\r\n    handleSelectChange = event => {\r\n        this.setState({gender: event.target.value});\r\n        console.log(this.state)\r\n    }\r\n\r\n    updatePatientInfo = (patient) =>\r\n        updatePatientInfo(patient, this.state.patientUsername)\r\n            .then((response) => {\r\n                if (response.status === 500) {\r\n                    console.log(response)\r\n                    alert(\"Problem updating profile :o  \")\r\n\r\n                } else {\r\n                    console.log(response)\r\n                    alert(\"Profile updated successfully :)\")\r\n                }\r\n            });\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <AdminNavBar/>\r\n                <hr/>\r\n                Hi {this.state.profile.username}!\r\n                <br/>\r\n                <hr/>\r\n                <h3>UPDATE A PATIENT'S PROFILE</h3>\r\n                <br/>\r\n                <div>\r\n                    <input\r\n                        value={this.state.patientUsername}\r\n                        onChange={(e) => this.setState({\r\n                            patientUsername: e.target.value\r\n                        })}\r\n                        className={\"form-control\"}\r\n                        placeholder={\"Enter username of Doctor to be updated\"}/>\r\n                    <br/>\r\n                    <input\r\n                        value={this.state.firstName}\r\n                        onChange={(e) => this.setState({\r\n                            firstName: e.target.value\r\n                        })}\r\n                        className={\"form-control\"}\r\n                        placeholder={\"First Name\"}/>\r\n                    <br/>\r\n                    <input\r\n                        value={this.state.lastName}\r\n                        onChange={(e) => this.setState({\r\n                            lastName: e.target.value\r\n                        })}\r\n                        className={`form-control`}\r\n                        placeholder={\"Last Name\"}/>\r\n                    <br/>\r\n\r\n                    <input\r\n                        value={this.state.dateOfBirth}\r\n                        onChange={(e) => this.setState({\r\n                            dateOfBirth: e.target.value\r\n                        })}\r\n                        className={`form-control`}\r\n                        placeholder={\"Date Of Birth  (YYYY-MM-DD)\"}/>\r\n                    <br/>\r\n\r\n                    <input\r\n                        value={this.state.dateOfAdmission}\r\n                        onChange={(e) => this.setState({\r\n                            dateOfAdmission: e.target.value\r\n                        })}\r\n                        className={`form-control`}\r\n                        placeholder={\"Date of Admission (YYYY-MM-DD)\"}/>\r\n                    <br/>\r\n\r\n                    <input\r\n                        value={this.state.medicalHistory}\r\n                        onChange={(e) => this.setState({\r\n                            medicalHistory: e.target.value\r\n                        })}\r\n                        className={`form-control`}\r\n                        placeholder={\"Medical History (if any)\"}/>\r\n                    <br/>\r\n                    <div>\r\n                        <select\r\n                            className={\"form-control\"}\r\n                            value={this.state.gender}\r\n                            onChange={this.handleSelectChange}>\r\n                            <option>Male</option>\r\n                            <option>Female</option>\r\n                            <option>Other</option>\r\n                        </select>\r\n                    </div>\r\n                    <br/>\r\n                    <button\r\n                        onClick={this.validatePatientProfile}\r\n                        className=\"btn btn-primary btn-block\">\r\n                        UPDATE\r\n                    </button>\r\n                </div>\r\n                <hr/>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from \"react\"\r\nimport {logout, profile, updateAdminStaffInfo} from \"../../services/UserService\";\r\nimport AdminNavBar from \"../../react/AdminNavBar\";\r\n\r\nexport default class AdminStaffUpdateByAdmin extends React.Component {\r\n\r\n    state = {\r\n        profile: {\r\n            username: '',\r\n            password: '',\r\n            userType: '',\r\n            adminUsername: '',\r\n            firstName: '',\r\n            lastName: '',\r\n            dateOfBirth: '',\r\n            status: '',\r\n            joiningDate: '',\r\n            jobTitle: '',\r\n            jobDescription: '',\r\n            gender: 'Male',\r\n            department: 'ENT'\r\n        },\r\n    }\r\n\r\n    componentDidMount() {\r\n        profile()\r\n            .then(profile => this.setState({\r\n                profile: profile,\r\n                username: profile.username,\r\n                password: profile.password,\r\n                adminUsername: '',\r\n                firstName: '',\r\n                lastName: '',\r\n                dateOfBirth: '',\r\n                status: '',\r\n                joiningDate: '',\r\n                jobTitle: '',\r\n                jobDescription: '',\r\n                gender: 'Male',\r\n                department: 'ENT'\r\n            }))\r\n    }\r\n\r\n    isValidDate = (dateString) => {\r\n        let regEx = /^\\d{4}-\\d{2}-\\d{2}$/;\r\n        if (!dateString.match(regEx)) return false;  // Invalid format\r\n        let d = new Date(dateString);\r\n        let dNum = d.getTime();\r\n        if (!dNum && dNum !== 0) return false; // NaN value, Invalid date\r\n        return d.toISOString().slice(0, 10) === dateString;\r\n    }\r\n\r\n    validateAdminStaffProfile = () => {\r\n        if (this.state.adminUsername === '') {\r\n            alert(\"Admin's username cannot be empty :(\")\r\n            return false\r\n        } else if (this.state.firstName === '') {\r\n            alert(\"First Name cannot be empty :(\")\r\n            return false\r\n        } else if (this.state.lastName === '') {\r\n            alert(\"Last Name cannot be empty :(\")\r\n            return false\r\n        } else if (this.state.dateOfBirth === '') {\r\n            alert(\"Date of Birth cannot be empty :(\")\r\n            return false\r\n        } else if (!this.isValidDate(this.state.dateOfBirth)) {\r\n            alert(\"Date of Birth format is invalid :(\")\r\n            return false\r\n        } else if (this.state.joiningDate === '') {\r\n            alert(\"Joining Date cannot be empty :(\")\r\n            return false\r\n        } else if (!this.isValidDate(this.state.joiningDate)) {\r\n            alert(\"Joining date format is invalid :(\")\r\n            return false\r\n        } else if (this.state.jobTitle === '') {\r\n            alert(\"Job Title cannot be empty :(\")\r\n            return false\r\n        } else {\r\n            this.updateAdminStaffInfo(this.state)\r\n        }\r\n    };\r\n\r\n    updateAdminStaffInfo = (adminStaff) =>\r\n        updateAdminStaffInfo(adminStaff, this.state.adminUsername)\r\n            .then((response) => {\r\n                if (response.status === 500) {\r\n                    console.log(response)\r\n                    alert(\"Problem updating profile :o  \")\r\n\r\n                } else {\r\n                    console.log(response)\r\n                    alert(\"Profile updated successfully :)\")\r\n                }\r\n            });\r\n\r\n    handleSelectGenderChange = event => {\r\n        this.setState({gender: event.target.value});\r\n        console.log(this.state)\r\n    }\r\n\r\n    handleSelectDeptChange = event => {\r\n        this.setState({department: event.target.value});\r\n        console.log(this.state)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n\r\n            <div>\r\n                <AdminNavBar/>\r\n                <hr/>\r\n                Hi {this.state.profile.username}!\r\n                <hr/>\r\n                <h3>UPDATE AN ADMIN PROFILE</h3>\r\n                <br/>\r\n                <div>\r\n                    <input\r\n                        value={this.state.adminUsername}\r\n                        onChange={(e) => this.setState({\r\n                            adminUsername: e.target.value\r\n                        })}\r\n                        className={\"form-control\"}\r\n                        placeholder={\"Enter Admin Staff's username to update\"}/>\r\n                    <br/>\r\n                    <input\r\n                        value={this.state.firstName}\r\n                        onChange={(e) => this.setState({\r\n                            firstName: e.target.value\r\n                        })}\r\n                        className={\"form-control\"}\r\n                        placeholder={\"First Name\"}/>\r\n                    <br/>\r\n                    <input\r\n                        value={this.state.lastName}\r\n                        onChange={(e) => this.setState({\r\n                            lastName: e.target.value\r\n                        })}\r\n                        className={`form-control`}\r\n                        placeholder={\"Last Name\"}/>\r\n                    <br/>\r\n                    <input\r\n                        value={this.state.dateOfBirth}\r\n                        onChange={(e) => this.setState({\r\n                            dateOfBirth: e.target.value\r\n                        })}\r\n                        className={`form-control`}\r\n                        placeholder={\"Date of Birth     (YYYY-MM-DD)\"}/>\r\n                    <br/>\r\n                    <input\r\n                        value={this.state.joiningDate}\r\n                        onChange={(e) => this.setState({\r\n                            joiningDate: e.target.value\r\n                        })}\r\n                        className={`form-control`}\r\n                        placeholder={\"Date of Joining       (YYYY-MM-DD)\"}/>\r\n                    <br/>\r\n                    <input\r\n                        value={this.state.status}\r\n                        onChange={(e) => this.setState({\r\n                            status: e.target.value\r\n                        })}\r\n                        className={`form-control`}\r\n                        placeholder={\"Status\"}/>\r\n                    <br/>\r\n                    <input\r\n                        value={this.state.jobTitle}\r\n                        onChange={(e) => this.setState({\r\n                            jobTitle: e.target.value\r\n                        })}\r\n                        className={`form-control`}\r\n                        placeholder={\"Job Title\"}/>\r\n                    <br/>\r\n                    <input\r\n                        value={this.state.jobDescription}\r\n                        onChange={(e) => this.setState({\r\n                            jobDescription: e.target.value\r\n                        })}\r\n                        className={`form-control`}\r\n                        placeholder={\"Job Description\"}/>\r\n                    <br/>\r\n                    <div>\r\n                        <select\r\n                            className={\"form-control\"}\r\n                            value={this.state.department}\r\n                            onChange={this.handleSelectDeptChange}>\r\n                            <option>ENT</option>\r\n                            <option>CARDIOLOGY</option>\r\n                            <option>GYNAECOLOGY</option>\r\n                            <option>ORTHOPAEDIC</option>\r\n                            <option>PEDIATRIC</option>\r\n                        </select>\r\n                    </div>\r\n                    <br/>\r\n                    <div>\r\n                        <select\r\n                            className={\"form-control\"}\r\n                            value={this.state.gender}\r\n                            onChange={this.handleSelectGenderChange}>\r\n                            <option>Male</option>\r\n                            <option>Female</option>\r\n                            <option>Other</option>\r\n                        </select>\r\n                    </div>\r\n                    <br/>\r\n                    <button\r\n                        onClick={this.validateAdminStaffProfile}\r\n                        className=\"btn btn-primary btn-block\">\r\n                        SUBMIT\r\n                    </button>\r\n                </div>\r\n                <hr/>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from \"react\";\r\nimport {logout, profile, updatePersonAddress} from \"../../services/UserService\";\r\nimport AdminNavBar from \"../../react/AdminNavBar\";\r\n\r\nexport default class UpdateAddressByAdmin extends React.Component {\r\n\r\n    state = {\r\n        addresses: [],\r\n        profile: {\r\n            username: '',\r\n            userType: '',\r\n            addressId: '',\r\n            house: '',\r\n            street1: '',\r\n            street2: '',\r\n            city: '',\r\n            state: '',\r\n            zip: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        profile()\r\n            .then(profile => this.setState({\r\n                profile: profile,\r\n                addressId: '',\r\n                house: '',\r\n                street1: '',\r\n                street2: '',\r\n                city: '',\r\n                state: '',\r\n                zip: ''\r\n            }))\r\n            .then(this.findAllAddresses)\r\n    }\r\n\r\n    logout = () => logout()\r\n        .then(status => this.props.history.push(\"/\"))\r\n\r\n    findAllAddresses = () =>\r\n        fetch(\"api/addresses/find/all\")\r\n            .then(response => response.json())\r\n            .then(allAddresses => this.setState({\r\n                addresses: allAddresses\r\n            }))\r\n            .catch(() => alert(\"Can’t access response. Problem contacting API\"));\r\n\r\n    updateAddress = (address) =>\r\n        updatePersonAddress(address,this.state.addressId)\r\n            .then(() => {\r\n                alert(\"Address has been updated :) Refresh page to see changes.\")\r\n            })\r\n\r\n    validateUpdateAddr = () => {\r\n        if (this.state.addressId === '') {\r\n            alert(\"Address ID cannot be empty :(\")\r\n            return false\r\n        } else if (this.state.house === '') {\r\n            alert(\"House cannot be empty :(\")\r\n            return false\r\n        } else if (this.state.street1 === '') {\r\n            alert(\"Street1 cannot be empty :(\")\r\n            return false\r\n        } else if (this.state.city === '') {\r\n            alert(\"City cannot be empty :(\")\r\n            return false\r\n        } else if (this.state.state === '') {\r\n            alert(\"State cannot be empty :(\")\r\n            return false\r\n        } else if (this.state.zip === '') {\r\n            alert(\"Zip cannot be empty :(\")\r\n            return false\r\n        } else {\r\n            this.updateAddress(this.state)\r\n        }\r\n    };\r\n\r\n    renderTableData() {\r\n        return this.state.addresses.map((address, index) => {\r\n            const { id, house, street1, street2, city, state, zip } = address //destructuring\r\n            const person = address.person.firstName + \" \" + address.person.lastName\r\n            return (\r\n                <tr key={id}>\r\n                    <td>{id}</td>\r\n                    <td>{house}</td>\r\n                    <td>{street1}</td>\r\n                    <td>{street2}</td>\r\n                    <td>{city}</td>\r\n                    <td>{state}</td>\r\n                    <td>{zip}</td>\r\n                    <td>{person}</td>\r\n                </tr>\r\n            )\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <AdminNavBar/>\r\n                <hr/>\r\n                <div>\r\n                    <h2>ADDRESS INFORMATION</h2>\r\n                    For user: <b>{this.state.profile.username} {this.state.profile.userType}</b>\r\n                    <hr/>\r\n                    <table id='table001'>\r\n                        <tbody>\r\n                        <th>Id</th>\r\n                        <th>House</th>\r\n                        <th>Street1</th>\r\n                        <th>Street2</th>\r\n                        <th>City</th>\r\n                        <th>State</th>\r\n                        <th>Zip</th>\r\n                        <th>Person</th>\r\n                        {this.renderTableData()}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n                <hr/>\r\n                <div>\r\n                    <input\r\n                        value={this.state.addressId}\r\n                        onChange={(e) => this.setState({\r\n                            addressId: e.target.value\r\n                        })}\r\n                        type={\"number\"}\r\n                        pattern=\"^[0-9]*$\"\r\n                        className={\"form-control\"}\r\n                        placeholder={\"ENTER ADDRESS ID TO UPDATE ADDRESS\"}/>\r\n                    <br/>\r\n                    <input\r\n                        value={this.state.house}\r\n                        onChange={(e) => this.setState({\r\n                            house: e.target.value\r\n                        })}\r\n                        className={\"form-control\"}\r\n                        placeholder={\"House (Name, Number #)\"}/>\r\n                    <br/>\r\n                    <input\r\n                        value={this.state.street1}\r\n                        onChange={(e) => this.setState({\r\n                            street1: e.target.value\r\n                        })}\r\n                        className={`form-control`}\r\n                        placeholder={\"Street1\"}/>\r\n                    <br/>\r\n                    <input\r\n                        value={this.state.street2}\r\n                        onChange={(e) => this.setState({\r\n                            street2: e.target.value\r\n                        })}\r\n                        className={`form-control`}\r\n                        placeholder={\"Street 2 (optional)\"}/>\r\n                    <br/>\r\n\r\n                    <input\r\n                        value={this.state.city}\r\n                        onChange={(e) => this.setState({\r\n                            city: e.target.value\r\n                        })}\r\n                        className={`form-control`}\r\n                        placeholder={\"City\"}/>\r\n                    <br/>\r\n\r\n                    <input\r\n                        value={this.state.state}\r\n                        onChange={(e) => this.setState({\r\n                            state: e.target.value\r\n                        })}\r\n                        className={`form-control`}\r\n                        placeholder={\"State\"}/>\r\n                    <br/>\r\n\r\n                    <input\r\n                        value={this.state.zip}\r\n                        onChange={(e) => this.setState({\r\n                            zip: e.target.value\r\n                        })}\r\n                        className={`form-control`}\r\n                        placeholder={\"Zip\"}/>\r\n                    <br/>\r\n                    <button\r\n                        onClick={this.validateUpdateAddr}\r\n                        className=\"btn btn-primary btn-block\">\r\n                        UPDATE ADDRESS\r\n                    </button>\r\n                </div>\r\n                <hr/>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport {profile, updatePersonPhone} from \"../../services/UserService\";\r\nimport AdminNavBar from \"../../react/AdminNavBar\";\r\n\r\nexport default class UpdatePhoneByAdmin extends React.Component {\r\n\r\n    state = {\r\n        phones: [],\r\n        profile: {\r\n            username: '',\r\n            userType: '',\r\n            phoneId: '',\r\n            phone: '',\r\n            isPrimary: 'false'\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        profile()\r\n            .then(profile => this.setState({\r\n                profile: profile,\r\n                phoneId: '',\r\n                phone: '',\r\n                isPrimary: 'false'\r\n            }))\r\n            .then(this.findAllPhones)\r\n    }\r\n\r\n    findAllPhones = () =>\r\n        fetch(\"api/phones/find/all\")\r\n            .then(response => response.json())\r\n            .then(allPhones => this.setState({\r\n                phones: allPhones\r\n            }))\r\n            .catch(() => alert(\"Can’t access response. Blocked by browser?\"));\r\n\r\n    updatePhone = (phone) =>\r\n        updatePersonPhone(phone, this.state.phoneId)\r\n            .then(() => {\r\n                alert(\"Phone has been updated :) Refresh page to see changes\")\r\n            })\r\n\r\n\r\n    validateUpdatePhone = () => {\r\n        if (this.state.phoneId === '') {\r\n            alert(\"Phone ID cannot be empty :(\")\r\n            return false\r\n        } else if (this.state.phone === '') {\r\n            alert(\"Phone cannot be empty :(\")\r\n            return false\r\n        } else {\r\n            this.updatePhone(this.state)\r\n        }\r\n    };\r\n\r\n    renderTableData() {\r\n        return this.state.phones.map((phones, index) => {\r\n            const {id, phone} = phones //destructuring\r\n            const person = phones.person.firstName + \" \" + phones.person.lastName\r\n            const personId = phones.person.id\r\n            return (\r\n                <tr key={id}>\r\n                    <td>{id}</td>\r\n                    <td>{phone}</td>\r\n                    <td>{personId}</td>\r\n                    <td>{person}</td>\r\n                </tr>\r\n            )\r\n        })\r\n    }\r\n\r\n\r\n    handleSelectPhoneChange = event => {\r\n        this.setState({isPrimary: event.target.value});\r\n        console.log(this.state)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <AdminNavBar/>\r\n                <hr/>\r\n                <div>\r\n                    <h2>PHONE INFORMATION</h2>\r\n                    For user: <b>{this.state.profile.username}</b>\r\n                    <hr/>\r\n                    <table id='table001'>\r\n                        <tbody>\r\n                        <th>Id</th>\r\n                        <th>Phone Number</th>\r\n                        <th>Person ID</th>\r\n                        <th>Person Name</th>\r\n                        {this.renderTableData()}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n                <hr/>\r\n                <div>\r\n                    <input\r\n                        value={this.state.phoneId}\r\n                        onChange={(e) => this.setState({\r\n                            phoneId: e.target.value\r\n                        })}\r\n                        type={\"number\"}\r\n                        pattern=\"^[0-9]*$\"\r\n                        className={\"form-control\"}\r\n                        placeholder={\"ENTER PHONE ID TO UPDATE PHONE\"}/>\r\n                    <br/>\r\n                    <input\r\n                        value={this.state.phone}\r\n                        onChange={(e) => this.setState({\r\n                            phone: e.target.value\r\n                        })}\r\n                        className={\"form-control\"}\r\n                        placeholder={\"Phone (###-##-####)\"}/>\r\n                    <br/>\r\n                    <div>\r\n                        <select\r\n                            className={\"form-control\"}\r\n                            value={this.state.isPrimary}\r\n                            onChange={this.handleSelectPhoneChange}>\r\n                            <option value={\"false\"}>No</option>\r\n                            <option value={\"true\"}>Yes</option>\r\n                        </select>\r\n                    </div>\r\n                    <br/>\r\n                    <button\r\n                        // onClick={this.validatePatientProfile}\r\n                        onClick={this.validateUpdatePhone}\r\n                        className=\"btn btn-primary btn-block\">\r\n                        UPDATE PHONE\r\n                    </button>\r\n                </div>\r\n                <br/>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\"\r\nimport {profile, updateAppointment} from \"../../services/UserService\";\r\nimport AdminNavBar from \"../../react/AdminNavBar\";\r\n\r\nexport default class AppointmentUpdateByAdmin extends React.Component {\r\n\r\n    state = {\r\n        appointments: [],\r\n\r\n        profile: {\r\n            username: '',\r\n            password: '',\r\n            userType: '',\r\n            appointmentId: '',\r\n            dateOfAppointment: '',\r\n            notes: '',\r\n            time: '',\r\n        },\r\n    }\r\n\r\n    componentDidMount() {\r\n        profile()\r\n            .then(profile => this.setState({\r\n                profile: profile,\r\n                username: profile.username,\r\n                password: profile.password,\r\n                appointmentId: '',\r\n                dateOfAppointment: '',\r\n                notes: '',\r\n                time: '',\r\n            })).then(this.findAllAppointments)\r\n    }\r\n\r\n    findAllAppointments = () =>\r\n        fetch(\"api/appointments/find/all\")\r\n            .then(response => response.json())\r\n            .then(allAppointments => this.setState({\r\n                appointments: allAppointments\r\n            }))\r\n            .catch(() => alert(\"Can’t access response. Problem reaching API server :(\"));\r\n\r\n\r\n    isValidDate = (dateString) => {\r\n        let regEx = /^\\d{4}-\\d{2}-\\d{2}$/;\r\n        if (!dateString.match(regEx)) return false;  // Invalid format\r\n        let d = new Date(dateString);\r\n        let dNum = d.getTime();\r\n        if (!dNum && dNum !== 0) return false; // NaN value, Invalid date\r\n        return d.toISOString().slice(0, 10) === dateString;\r\n    }\r\n\r\n    validateUpdateAppointment = () => {\r\n        if (this.state.appointmentId === '') {\r\n            alert(\"Appointment ID cannot be empty :(\")\r\n        } else if (this.state.time === '') {\r\n            alert(\"Time cannot be empty :(\")\r\n            return false\r\n        } else if (!this.isValidDate(this.state.dateOfAppointment)) {\r\n            alert(\"Date of Appointment is invalid :(\")\r\n            return false\r\n        } else {\r\n            this.updateAppointment(this.state)\r\n        }\r\n    };\r\n\r\n    updateAppointment = (appointment) =>\r\n        updateAppointment(appointment, this.state.appointmentId)\r\n            .then((response) => {\r\n                if (response.status === 500) {\r\n                    console.log(response)\r\n                    alert(\"Problem updating appointment :o  \")\r\n\r\n                } else {\r\n                    console.log(response)\r\n                    alert(\"Appointment updated successfully :) Reload page to view changes\")\r\n                }\r\n            });\r\n\r\n    renderTableData() {\r\n        return this.state.appointments.map((appointments, index) => {\r\n            const {id, dateOfAppointment, notes, time} = appointments //destructuring\r\n            const doctorName = appointments.doctor.firstName + \" \" + appointments.doctor.lastName\r\n            const patientName = appointments.patient.firstName + \" \" + appointments.patient.lastName\r\n            return (\r\n                <tr key={id}>\r\n                    <td>{id}</td>\r\n                    <td>{dateOfAppointment}</td>\r\n                    <td>{notes}</td>\r\n                    <td>{time}</td>\r\n                    <td>{doctorName}</td>\r\n                    <td>{patientName}</td>\r\n                </tr>\r\n            )\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <AdminNavBar/>\r\n                <hr/>\r\n                Hi {this.state.profile.username}!\r\n                <br/>\r\n                <b>User Type:</b> {this.state.profile.userType}\r\n                <br/>\r\n                <hr/>\r\n                <h3>APPOINTMENT INFORMATION</h3>\r\n                <hr/>\r\n                <table id='table001'>\r\n                    <tbody>\r\n                    <th>Id</th>\r\n                    <th>Date</th>\r\n                    <th>Notes</th>\r\n                    <th>Time</th>\r\n                    <th>Doctor</th>\r\n                    <th>Patient</th>\r\n                    {this.renderTableData()}\r\n                    </tbody>\r\n                </table>\r\n                <hr/>\r\n                <br/>\r\n                <div>\r\n                    <input\r\n                        value={this.state.appointmentId}\r\n                        onChange={(e) => this.setState({\r\n                            appointmentId: e.target.value\r\n                        })}\r\n                        type={\"number\"}\r\n                        pattern=\"^[0-9]*$\"\r\n                        className={\"form-control\"}\r\n                        placeholder={\"ENTER APPOINTMENT ID TO UPDATE APPOINTMENT\"}/>\r\n                    <br/>\r\n                    <input\r\n                        value={this.state.notes}\r\n                        onChange={(e) => this.setState({\r\n                            notes: e.target.value\r\n                        })}\r\n                        className={`form-control`}\r\n                        placeholder={\"Notes\"}/>\r\n                    <br/>\r\n\r\n                    <input\r\n                        value={this.state.time}\r\n                        onChange={(e) => this.setState({\r\n                            time: e.target.value\r\n                        })}\r\n                        className={`form-control`}\r\n                        placeholder={\"Time\"}/>\r\n                    <br/>\r\n\r\n                    <input\r\n                        value={this.state.dateOfAppointment}\r\n                        onChange={(e) => this.setState({\r\n                            dateOfAppointment: e.target.value\r\n                        })}\r\n                        className={`form-control`}\r\n                        placeholder={\"Date (YYYY-MM-DD)\"}/>\r\n                    <br/>\r\n\r\n                    <button\r\n                        onClick={this.validateUpdateAppointment}\r\n                        className=\"btn btn-primary btn-block\">\r\n                        UPDATE APPOINTMENT\r\n                    </button>\r\n                </div>\r\n                <hr/>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from \"react\";\r\nimport {profile, updatePatientAllergy} from \"../../services/UserService\";\r\nimport AdminNavBar from \"../../react/AdminNavBar\";\r\n\r\nexport default class AllergyUpdateByAdmin extends React.Component {\r\n\r\n    state = {\r\n        allergy: [],\r\n        profile: {\r\n            username: '',\r\n            userType: '',\r\n            allergyId: '',\r\n            allergyInfo: '',\r\n            allergyCause: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        profile()\r\n            .then(profile => this.setState({\r\n                profile: profile,\r\n                allergyId: '',\r\n                allergyInfo: '',\r\n                allergyCause: ''\r\n            }))\r\n            .then(this.findAllAllergies)\r\n    }\r\n\r\n    findAllAllergies = () =>\r\n        fetch(\"api/allergies/find/all\")\r\n            .then(response => response.json())\r\n            .then(allAllergies => this.setState({\r\n                allergy: allAllergies\r\n            }))\r\n            .catch(() => console.log(\"Can’t access response. Blocked by browser?\"));\r\n\r\n\r\n    updateAllergy = (allergy) =>\r\n        updatePatientAllergy(allergy, this.state.allergyId)\r\n            .then(() => {\r\n                alert(\"Allergy has been updated :) Refresh page to see changes\")\r\n            })\r\n\r\n\r\n    validateUpdateAllergy = () => {\r\n        if (this.state.allergyId === '') {\r\n            alert(\"Allergy ID cannot be empty :(\")\r\n            return false\r\n        } else if (this.state.allergyInfo === '') {\r\n            alert(\"Allergy Info cannot be empty :(\")\r\n            return false\r\n        } else if (this.state.allergyCause === '') {\r\n            alert(\"Allergy Cause cannot be empty :(\")\r\n            return false\r\n        } else {\r\n            this.updateAllergy(this.state)\r\n        }\r\n    };\r\n\r\n    renderTableData() {\r\n        return this.state.allergy.map((allergy, index) => {\r\n            const {id, allergyInfo, allergyCause} = allergy //destructuring\r\n            const patientName = allergy.patient.firstName + \" \" + allergy.patient.lastName\r\n            return (\r\n                <tr key={id}>\r\n                    <td>{id}</td>\r\n                    <td>{allergyInfo}</td>\r\n                    <td>{allergyCause}</td>\r\n                    <td>{patientName}</td>\r\n                </tr>\r\n            )\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <AdminNavBar/>\r\n                <hr/>\r\n                <div>\r\n                    <h2>ALLERGY INFORMATION</h2>\r\n                    For user: <b>{this.state.profile.username}</b>\r\n                    <hr/>\r\n                    <table id='table001'>\r\n                        <tbody>\r\n                        <th>Id</th>\r\n                        <th>Allergy Info</th>\r\n                        <th>Allergy Cause</th>\r\n                        <th>Patient Name</th>\r\n                        {this.renderTableData()}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n                <hr/>\r\n                <div>\r\n                    <input\r\n                        value={this.state.allergyId}\r\n                        onChange={(e) => this.setState({\r\n                            allergyId: e.target.value\r\n                        })}\r\n                        type={\"number\"}\r\n                        pattern=\"^[0-9]*$\"\r\n                        className={\"form-control\"}\r\n                        placeholder={\"ENTER ALLERGY ID TO UPDATE ALLERGY\"}/>\r\n                    <br/>\r\n                    <input\r\n                        value={this.state.allergyInfo}\r\n                        onChange={(e) => this.setState({\r\n                            allergyInfo: e.target.value\r\n                        })}\r\n                        className={\"form-control\"}\r\n                        placeholder={\"Allergy Info\"}/>\r\n                    <br/>\r\n                    <div>\r\n                        <input\r\n                            value={this.state.allergyCause}\r\n                            onChange={(e) => this.setState({\r\n                                allergyCause: e.target.value\r\n                            })}\r\n                            className={\"form-control\"}\r\n                            placeholder={\"Allergy Cause\"}/>\r\n                    </div>\r\n                    <br/>\r\n                    <button\r\n                        // onClick={this.validatePatientProfile}\r\n                        onClick={this.validateUpdateAllergy}\r\n                        className=\"btn btn-primary btn-block\">\r\n                        UPDATE ALLERGY\r\n                    </button>\r\n                </div>\r\n                <br/>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport {profile, updatePatientInsurance} from \"../../services/UserService\";\r\nimport AdminNavBar from \"../../react/AdminNavBar\";\r\n\r\nexport default class InsuranceUpdateByAllergies extends React.Component {\r\n\r\n    state = {\r\n        insurance: [],\r\n        profile: {\r\n            username: '',\r\n            userType: '',\r\n            insuranceId: '',\r\n            insuranceDetails: '',\r\n            insuranceType: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        profile()\r\n            .then(profile => this.setState({\r\n                profile: profile,\r\n                insuranceId: '',\r\n                insuranceDetails: '',\r\n                insuranceType: ''\r\n            }))\r\n            .then(this.findAllInsurances)\r\n    }\r\n\r\n    findAllInsurances = () =>\r\n        fetch(\"api/insurances/find/all\")\r\n            .then(response => response.json())\r\n            .then(allInsurances => this.setState({\r\n                insurance: allInsurances\r\n            }))\r\n            .catch(() => console.log(\"Can’t access response. Blocked by browser?\"));\r\n\r\n\r\n    updateInsurance = (insurance) =>\r\n        updatePatientInsurance(insurance, this.state.insuranceId)\r\n            .then(() => {\r\n                alert(\"Insurance has been updated :) Refresh page to see changes\")\r\n            })\r\n\r\n\r\n    validateUpdateInsurance = () => {\r\n        if (this.state.insuranceId === '') {\r\n            alert(\"Insurance ID cannot be empty :(\")\r\n            return false\r\n        } else if (this.state.insuranceDetails === '') {\r\n            alert(\"Insurance Details cannot be empty :(\")\r\n            return false\r\n        } else if (this.state.insuranceType === '') {\r\n            alert(\"Insurance Type cannot be empty :(\")\r\n            return false\r\n        } else {\r\n            this.updateInsurance(this.state)\r\n        }\r\n    };\r\n\r\n    renderTableData() {\r\n        return this.state.insurance.map((insurance, index) => {\r\n            const {id, insuranceDetails, insuranceType} = insurance //destructuring\r\n            const patientName = insurance.patient.firstName + \" \" + insurance.patient.lastName\r\n            return (\r\n                <tr key={id}>\r\n                    <td>{id}</td>\r\n                    <td>{insuranceDetails}</td>\r\n                    <td>{insuranceType}</td>\r\n                    <td>{patientName}</td>\r\n                </tr>\r\n            )\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <AdminNavBar/>\r\n                <hr/>\r\n                <div>\r\n                    <h2>INSURANCE INFORMATION</h2>\r\n                    For user: <b>{this.state.profile.username}</b>\r\n                    <hr/>\r\n                    <table id='table001'>\r\n                        <tbody>\r\n                        <th>Id</th>\r\n                        <th>Insurance Details</th>\r\n                        <th>Insurance Type</th>\r\n                        <th>Patient Name</th>\r\n                        {this.renderTableData()}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n                <hr/>\r\n                <div>\r\n                    <input\r\n                        value={this.state.insuranceId}\r\n                        onChange={(e) => this.setState({\r\n                            insuranceId: e.target.value\r\n                        })}\r\n                        type={\"number\"}\r\n                        pattern=\"^[0-9]*$\"\r\n                        className={\"form-control\"}\r\n                        placeholder={\"ENTER INSURANCE ID TO UPDATE INSURANCE\"}/>\r\n                    <br/>\r\n                    <input\r\n                        value={this.state.insuranceDetails}\r\n                        onChange={(e) => this.setState({\r\n                            insuranceDetails: e.target.value\r\n                        })}\r\n                        className={\"form-control\"}\r\n                        placeholder={\"Insurance Details\"}/>\r\n                    <br/>\r\n                    <div>\r\n                        <input\r\n                            value={this.state.insuranceType}\r\n                            onChange={(e) => this.setState({\r\n                                insuranceType: e.target.value\r\n                            })}\r\n                            className={\"form-control\"}\r\n                            placeholder={\"Insurance Type\"}/>\r\n                    </div>\r\n                    <br/>\r\n                    <button\r\n                        onClick={this.validateUpdateInsurance}\r\n                        className=\"btn btn-primary btn-block\">\r\n                        UPDATE INSURANCE\r\n                    </button>\r\n                </div>\r\n                <br/>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\"\r\nimport {profile, updateSalary} from \"../../services/UserService\";\r\nimport AdminNavBar from \"../../react/AdminNavBar\";\r\n\r\nexport default class SalaryUpdateByAdmin extends React.Component {\r\n    state = {\r\n        profile: {\r\n            username: '',\r\n            userType: '',\r\n            staffUsername: '',\r\n            baseSalary: '',\r\n            allowances: '',\r\n            epf: ''\r\n        }\r\n    }\r\n\r\n    isEmpty(obj) {\r\n        for (const key in obj) {\r\n            if (obj.hasOwnProperty(key))\r\n                return false;\r\n        }\r\n        return true;\r\n    };\r\n\r\n    updateSalary = (salary) =>\r\n        updateSalary(salary, this.state.staffUsername)\r\n            .then((response) => {\r\n                if (response.status === 500 || this.isEmpty(response)) {\r\n                    console.log(response)\r\n                    alert(\"Problem adding salary :o\" +\r\n                        \"Tip: Check patient username or salary exists already!\")\r\n                } else {\r\n                    console.log(response)\r\n                    alert(\"Salary added successfully :)\")\r\n                }\r\n            });\r\n\r\n    componentDidMount() {\r\n        profile()\r\n            .then(profile => this.setState({\r\n                profile: profile,\r\n                username: profile.username,\r\n                password: profile.password,\r\n                staffUsername: '',\r\n                baseSalary: '',\r\n                allowances: '',\r\n                epf: ''\r\n            }))\r\n    }\r\n\r\n    validateSalary = () => {\r\n        if (this.state.baseSalary === '') {\r\n            alert(\"Base salary cannot be empty :(\")\r\n            return false\r\n        } else if (this.state.epf === '') {\r\n            alert(\"EPF cause cannot be empty :(\")\r\n            return false\r\n        } else {\r\n            this.updateSalary(this.state)\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <AdminNavBar/>\r\n                <hr/>\r\n                <h1>Update Doctor and Staff Salary Information </h1>\r\n                Hi {this.state.profile.username}!\r\n                <hr/>\r\n                <br/>\r\n                <div>\r\n\r\n                    <input\r\n                        value={this.state.staffUsername}\r\n                        onChange={(e) => this.setState({\r\n                            staffUsername: e.target.value\r\n                        })}\r\n                        className={\"form-control\"}\r\n                        placeholder={\"Username of Doctor or Staff\"}/>\r\n                    <br/>\r\n                    <input\r\n                        value={this.state.baseSalary}\r\n                        onChange={(e) => this.setState({\r\n                            baseSalary: e.target.value\r\n                        })}\r\n                        type={\"number\"}\r\n                        pattern=\"^[0-9]*$\"\r\n                        className={\"form-control\"}\r\n                        placeholder={\"Base Salary\"}/>\r\n                    <br/>\r\n                    <input\r\n                        value={this.state.allowances}\r\n                        onChange={(e) => this.setState({\r\n                            allowances: e.target.value\r\n                        })}\r\n                        type={\"number\"}\r\n                        pattern=\"^[0-9]*$\"\r\n                        className={`form-control`}\r\n                        placeholder={\"Allowances\"}/>\r\n                    <br/>\r\n                    <input\r\n                        value={this.state.epf}\r\n                        onChange={(e) => this.setState({\r\n                            epf: e.target.value\r\n                        })}\r\n                        type={\"number\"}\r\n                        pattern=\"^[0-9]*$\"\r\n                        className={`form-control`}\r\n                        placeholder={\"EPF\"}/>\r\n                    <br/>\r\n                    <button\r\n                        onClick={this.validateSalary}\r\n                        className=\"btn btn-primary btn-block\">\r\n                        SUBMIT\r\n                    </button>\r\n                </div>\r\n                <br/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport {logout, profile, deletePersonAddress} from \"../../services/UserService\";\r\nimport AdminNavBar from \"../../react/AdminNavBar\";\r\n\r\nexport default class AddressRemoveByAdmin extends React.Component {\r\n\r\n    state = {\r\n        addresses: [],\r\n        profile: {\r\n            username: '',\r\n            userType: '',\r\n            addressId: '',\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        profile()\r\n            .then(profile => this.setState({\r\n                profile: profile,\r\n                addressId: ''\r\n            }))\r\n            .then(this.findAllAddresses)\r\n    }\r\n\r\n    logout = () => logout()\r\n        .then(status => this.props.history.push(\"/\"))\r\n\r\n    findAllAddresses = () =>\r\n        fetch(\"api/addresses/find/all\")\r\n            .then(response => response.json())\r\n            .then(allAddresses => this.setState({\r\n                addresses: allAddresses\r\n            }))\r\n            .catch(() => console.log(\"Can’t access response. Blocked by browser?\"));\r\n\r\n\r\n    renderTableData() {\r\n        return this.state.addresses.map((address, index) => {\r\n            const { id, house, street1, street2, city, state, zip } = address //destructuring\r\n            const person = address.person.firstName + \" \" + address.person.lastName\r\n            return (\r\n                <tr key={id}>\r\n                    <td>{id}</td>\r\n                    <td>{house}</td>\r\n                    <td>{street1}</td>\r\n                    <td>{street2}</td>\r\n                    <td>{city}</td>\r\n                    <td>{state}</td>\r\n                    <td>{zip}</td>\r\n                    <td>{person}</td>\r\n                </tr>\r\n            )\r\n        })\r\n    }\r\n\r\n    deleteAddress = () =>\r\n        deletePersonAddress(this.state.addressId)\r\n            .then(() => {\r\n                alert(\"Address has been removed! Refresh page to see changes :)\")\r\n            })\r\n\r\n    validateDeleteAddr = () => {\r\n        if (this.state.addressId === '') {\r\n            alert(\"Address ID cannot be empty :(\")\r\n            return false\r\n        } else {\r\n            this.deleteAddress()\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <AdminNavBar/>\r\n                <hr/>\r\n                <div>\r\n                    <h2>ADDRESS INFORMATION</h2>\r\n                    For user: <b>{this.state.profile.username} {this.state.profile.userType}</b>\r\n                    <hr/>\r\n                    <table id='table001'>\r\n                        <tbody>\r\n                        <th>Id</th>\r\n                        <th>House</th>\r\n                        <th>Street1</th>\r\n                        <th>Street2</th>\r\n                        <th>City</th>\r\n                        <th>State</th>\r\n                        <th>Zip</th>\r\n                        <th>Person</th>\r\n                        {this.renderTableData()}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n                <hr/>\r\n                <div>\r\n                    <input\r\n                        value={this.state.addressId}\r\n                        onChange={(e) => this.setState({\r\n                            addressId: e.target.value\r\n                        })}\r\n                        type={\"number\"}\r\n                        pattern=\"^[0-9]*$\"\r\n                        className={\"form-control\"}\r\n                        placeholder={\"ENTER ADDRESS ID TO REMOVE ADDRESS\"}/>\r\n                    <br/>\r\n\r\n                    <button\r\n                        // onClick={this.validatePatientProfile}\r\n                        onClick={this.validateDeleteAddr}\r\n                        className=\"btn btn-primary btn-block\">\r\n                        DELETE ADDRESS\r\n                    </button>\r\n                </div>\r\n                <br/>\r\n                <button\r\n                    onClickCapture={this.logout}\r\n                    className={\"btn btn-danger\"}\r\n                    onClick={this.logout}>\r\n                    Logout\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport {logout, profile, deletePrescription} from \"../../services/UserService\";\r\nimport AdminNavBar from \"../../react/AdminNavBar\";\r\n\r\nexport default class PrescriptionRemoveByAdmin extends React.Component {\r\n\r\n    state = {\r\n        prescriptions: [],\r\n        profile: {\r\n            username: '',\r\n            userType: '',\r\n            prescriptionId: '',\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        profile()\r\n            .then(profile => this.setState({\r\n                profile: profile,\r\n                prescriptionId: ''\r\n            }))\r\n            .then(this.findAllPrescriptions)\r\n    }\r\n\r\n    logout = () => logout()\r\n        .then(status => this.props.history.push(\"/\"))\r\n\r\n    findAllPrescriptions = () =>\r\n        fetch(\"api/prescriptions/find/all\")\r\n            .then(response => response.json())\r\n            .then(allPrescriptions => this.setState({\r\n                prescriptions: allPrescriptions\r\n            }))\r\n            .catch(() => console.log(\"Can’t access response. Blocked by browser?\"));\r\n\r\n\r\n    renderTableData() {\r\n        return this.state.prescriptions.map((prescription, index) => {\r\n            const {id, prescriptionDate, refillData} = prescription //destructuring\r\n            const patientName = prescription.patient.firstName + \" \" + prescription.patient.lastName\r\n            const doctorName = prescription.doctor.firstName + \" \" + prescription.doctor.lastName\r\n\r\n            return (\r\n                <tr key={id}>\r\n                    <td>{id}</td>\r\n                    <td>{prescriptionDate}</td>\r\n                    <td>{refillData}</td>\r\n                    <td>{doctorName}</td>\r\n                    <td>{patientName}</td>\r\n                </tr>\r\n            )\r\n        })\r\n    }\r\n\r\n    deletePrescriptions = () =>\r\n        deletePrescription(this.state.prescriptionId)\r\n            .then(() => {\r\n                alert(\"Prescription has been removed! Refresh page to see changes :)\")\r\n            })\r\n\r\n    validateDeletePrescription = () => {\r\n        if (this.state.prescriptionId === '') {\r\n            alert(\"Prescription ID cannot be empty :(\")\r\n            return false\r\n        } else {\r\n            this.deletePrescriptions()\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <AdminNavBar/>\r\n                <hr/>\r\n                <div>\r\n                    <h2>PRESCRIPTION INFORMATION</h2>\r\n                    For user: <b>{this.state.profile.username} {this.state.profile.userType}</b>\r\n                    <hr/>\r\n                    <table id='table001'>\r\n                        <tbody>\r\n                        <th>Id</th>\r\n                        <th>Date</th>\r\n                        <th>Time</th>\r\n                        <th>Doctor</th>\r\n                        <th>Patient Name</th>\r\n                        {this.renderTableData()}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n                <hr/>\r\n                <div>\r\n                    <input\r\n                        value={this.state.prescriptionId}\r\n                        onChange={(e) => this.setState({\r\n                            prescriptionId: e.target.value\r\n                        })}\r\n                        type={\"number\"}\r\n                        pattern=\"^[0-9]*$\"\r\n                        className={\"form-control\"}\r\n                        placeholder={\"ENTER PRESCRIPTION ID TO REMOVE PRESCRIPTION\"}/>\r\n                    <br/>\r\n\r\n                    <button\r\n                        // onClick={this.validatePatientProfile}\r\n                        onClick={this.validateDeletePrescription}\r\n                        className=\"btn btn-primary btn-block\">\r\n                        DELETE PRESCRIPTION\r\n                    </button>\r\n                </div>\r\n                <br/>\r\n                <button\r\n                    onClickCapture={this.logout}\r\n                    className={\"btn btn-danger\"}\r\n                    onClick={this.logout}>\r\n                    Logout\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport {logout, profile, deleteDoctorAppointments} from \"../../services/UserService\";\r\nimport AdminNavBar from \"../../react/AdminNavBar\";\r\n\r\nexport default class AppointmentRemoveByAdmin extends React.Component {\r\n\r\n    state = {\r\n        appointments: [],\r\n        profile: {\r\n            username: '',\r\n            userType: '',\r\n            appointmentId: '',\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        profile()\r\n            .then(profile => this.setState({\r\n                profile: profile,\r\n                appointmentId: ''\r\n            }))\r\n            .then(this.findAllAppointments)\r\n    }\r\n\r\n    logout = () => logout()\r\n        .then(status => this.props.history.push(\"/\"))\r\n\r\n    findAllAppointments = () =>\r\n        fetch(\"api/appointments/find/all\")\r\n            .then(response => response.json())\r\n            .then(allAppointments => this.setState({\r\n                appointments: allAppointments\r\n            }))\r\n            .catch(() => console.log(\"Can’t access response. Blocked by browser?\"));\r\n\r\n\r\n    renderTableData() {\r\n        return this.state.appointments.map((appointments, index) => {\r\n            const {id, dateOfAppointment, notes, time} = appointments //destructuring\r\n            const doctorName = appointments.doctor.firstName + \" \" + appointments.doctor.lastName\r\n            const patientName = appointments.patient.firstName + \" \" + appointments.patient.lastName\r\n            return (\r\n                <tr key={id}>\r\n                    <td>{id}</td>\r\n                    <td>{dateOfAppointment}</td>\r\n                    <td>{notes}</td>\r\n                    <td>{time}</td>\r\n                    <td>{doctorName}</td>\r\n                    <td>{patientName}</td>\r\n                </tr>\r\n            )\r\n        })\r\n    }\r\n\r\n    deleteAppointments = () =>\r\n        deleteDoctorAppointments(this.state.appointmentId)\r\n            .then(() => {\r\n                alert(\"Appointment has been removed! Refresh page to see changes :)\")\r\n            })\r\n\r\n    validateDeleteAppointment = () => {\r\n        if (this.state.appointmentId === '') {\r\n            alert(\"Appointment ID cannot be empty :(\")\r\n            return false\r\n        } else {\r\n            this.deleteAppointments()\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <AdminNavBar/>\r\n                <hr/>\r\n                <div>\r\n                    <h2>APPOINTMENT INFORMATION</h2>\r\n                    For user: <b>{this.state.profile.username} {this.state.profile.userType}</b>\r\n                    <hr/>\r\n                    <table id='table001'>\r\n                        <tbody>\r\n                        <th>Id</th>\r\n                        <th>Date</th>\r\n                        <th>Notes</th>\r\n                        <th>Time</th>\r\n                        <th>Doctor</th>\r\n                        <th>Patient</th>\r\n                        {this.renderTableData()}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n                <hr/>\r\n                <div>\r\n                    <input\r\n                        value={this.state.appointmentId}\r\n                        onChange={(e) => this.setState({\r\n                            appointmentId: e.target.value\r\n                        })}\r\n                        type={\"number\"}\r\n                        pattern=\"^[0-9]*$\"\r\n                        className={\"form-control\"}\r\n                        placeholder={\"ENTER APPOINTMENT ID TO REMOVE APPOINTMENT\"}/>\r\n                    <br/>\r\n\r\n                    <button\r\n                        // onClick={this.validatePatientProfile}\r\n                        onClick={this.validateDeleteAppointment}\r\n                        className=\"btn btn-primary btn-block\">\r\n                        DELETE APPOINTMENT\r\n                    </button>\r\n                </div>\r\n                <br/>\r\n                <button\r\n                    onClickCapture={this.logout}\r\n                    className={\"btn btn-danger\"}\r\n                    onClick={this.logout}>\r\n                    Logout\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport {logout, profile, deletePatientAllergy} from \"../../services/UserService\";\r\nimport AdminNavBar from \"../../react/AdminNavBar\";\r\n\r\nexport default class AllergyRemoveByAdmin extends React.Component {\r\n\r\n    state = {\r\n        allergy: [],\r\n        profile: {\r\n            username: '',\r\n            userType: '',\r\n            allergyId: '',\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        profile()\r\n            .then(profile => this.setState({\r\n                profile: profile,\r\n                allergyId: ''\r\n            }))\r\n            .then(this.findAllAllergies)\r\n    }\r\n\r\n    logout = () => logout()\r\n        .then(status => this.props.history.push(\"/\"))\r\n\r\n    findAllAllergies = () =>\r\n        fetch(\"api/allergies/find/all\")\r\n            .then(response => response.json())\r\n            .then(allAllergies => this.setState({\r\n                allergy: allAllergies\r\n            }))\r\n            .catch(() => console.log(\"Can’t access response. Blocked by browser?\"));\r\n\r\n\r\n    renderTableData() {\r\n        return this.state.allergy.map((allergy, index) => {\r\n            const {id, allergyInfo, allergyCause} = allergy //destructuring\r\n            const patientName = allergy.patient.firstName + \" \" + allergy.patient.lastName\r\n            return (\r\n                <tr key={id}>\r\n                    <td>{id}</td>\r\n                    <td>{allergyInfo}</td>\r\n                    <td>{allergyCause}</td>\r\n                    <td>{patientName}</td>\r\n                </tr>\r\n            )\r\n        })\r\n    }\r\n\r\n    deleteAllergies = () =>\r\n        deletePatientAllergy(this.state.allergyId)\r\n            .then(() => {\r\n                alert(\"Allergy has been removed! Refresh page to see changes :)\")\r\n            })\r\n\r\n    validateDeleteAllergy = () => {\r\n        if (this.state.allergyId === '') {\r\n            alert(\"Allergy ID cannot be empty :(\")\r\n            return false\r\n        } else {\r\n            this.deleteAllergies()\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <AdminNavBar/>\r\n                <hr/>\r\n                <div>\r\n                    <h2>ALLERGY INFORMATION</h2>\r\n                    For user: <b>{this.state.profile.username} {this.state.profile.userType}</b>\r\n                    <hr/>\r\n                    <table id='table001'>\r\n                        <tbody>\r\n                        <th>Id</th>\r\n                        <th>Allergy Info</th>\r\n                        <th>Allergy Cause</th>\r\n                        <th>Patient Name</th>\r\n                        {this.renderTableData()}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n                <hr/>\r\n                <div>\r\n                    <input\r\n                        value={this.state.allergyId}\r\n                        onChange={(e) => this.setState({\r\n                            allergyId: e.target.value\r\n                        })}\r\n                        type={\"number\"}\r\n                        pattern=\"^[0-9]*$\"\r\n                        className={\"form-control\"}\r\n                        placeholder={\"ENTER ALLERGY ID TO REMOVE APPOINTMENT\"}/>\r\n                    <br/>\r\n\r\n                    <button\r\n                        // onClick={this.validatePatientProfile}\r\n                        onClick={this.validateDeleteAllergy}\r\n                        className=\"btn btn-primary btn-block\">\r\n                        DELETE ALLERGY\r\n                    </button>\r\n                </div>\r\n                <br/>\r\n                <button\r\n                    onClickCapture={this.logout}\r\n                    className={\"btn btn-danger\"}\r\n                    onClick={this.logout}>\r\n                    Logout\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport {logout, profile, deletePatientInsurance} from \"../../services/UserService\";\r\nimport AdminNavBar from \"../../react/AdminNavBar\";\r\n\r\nexport default class InsuranceRemoveByAdmin extends React.Component {\r\n\r\n    state = {\r\n        insurance: [],\r\n        profile: {\r\n            username: '',\r\n            userType: '',\r\n            insuranceId: '',\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        profile()\r\n            .then(profile => this.setState({\r\n                profile: profile,\r\n                insuranceId: ''\r\n            }))\r\n            .then(this.findAllInsurances)\r\n    }\r\n\r\n    logout = () => logout()\r\n        .then(status => this.props.history.push(\"/\"))\r\n\r\n    findAllInsurances = () =>\r\n        fetch(\"api/insurances/find/all\")\r\n            .then(response => response.json())\r\n            .then(allInsurances => this.setState({\r\n                insurance: allInsurances\r\n            }))\r\n            .catch(() => console.log(\"Can’t access response. Blocked by browser?\"));\r\n\r\n\r\n    renderTableData() {\r\n        return this.state.insurance.map((insurance, index) => {\r\n            const {id, insuranceDetails, insuranceType} = insurance //destructuring\r\n            const patientName = insurance.patient.firstName + \" \" + insurance.patient.lastName\r\n            return (\r\n                <tr key={id}>\r\n                    <td>{id}</td>\r\n                    <td>{insuranceDetails}</td>\r\n                    <td>{insuranceType}</td>\r\n                    <td>{patientName}</td>\r\n                </tr>\r\n            )\r\n        })\r\n    }\r\n\r\n    deleteInsurances = () =>\r\n        deletePatientInsurance(this.state.insuranceId)\r\n            .then(() => {\r\n                alert(\"Insurance has been removed! Refresh page to see changes :)\")\r\n            })\r\n\r\n    validateDeleteInsurance = () => {\r\n        if (this.state.insuranceId === '') {\r\n            alert(\"Insurance ID cannot be empty :(\")\r\n            return false\r\n        } else {\r\n            this.deleteInsurances()\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <AdminNavBar/>\r\n                <hr/>\r\n                <div>\r\n                    <h2>INSURANCE INFORMATION</h2>\r\n                    For user: <b>{this.state.profile.username} {this.state.profile.userType}</b>\r\n                    <hr/>\r\n                    <table id='table001'>\r\n                        <tbody>\r\n                        <th>Id</th>\r\n                        <th>Insurance Details</th>\r\n                        <th>Insurance Type</th>\r\n                        <th>Patient Name</th>\r\n                        {this.renderTableData()}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n                <hr/>\r\n                <div>\r\n                    <input\r\n                        value={this.state.insuranceId}\r\n                        onChange={(e) => this.setState({\r\n                            insuranceId: e.target.value\r\n                        })}\r\n                        type={\"number\"}\r\n                        pattern=\"^[0-9]*$\"\r\n                        className={\"form-control\"}\r\n                        placeholder={\"ENTER ALLERGY ID TO REMOVE APPOINTMENT\"}/>\r\n                    <br/>\r\n\r\n                    <button\r\n                        // onClick={this.validatePatientProfile}\r\n                        onClick={this.validateDeleteInsurance}\r\n                        className=\"btn btn-primary btn-block\">\r\n                        DELETE INSURANCE\r\n                    </button>\r\n                </div>\r\n                <br/>\r\n                <button\r\n                    onClickCapture={this.logout}\r\n                    className={\"btn btn-danger\"}\r\n                    onClick={this.logout}>\r\n                    Logout\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport {logout, profile, deletePersonPhone} from \"../../services/UserService\";\r\nimport AdminNavBar from \"../../react/AdminNavBar\";\r\n\r\nexport default class PhoneRemoveByAdmin extends React.Component {\r\n\r\n    state = {\r\n        phones: [],\r\n        profile: {\r\n            username: '',\r\n            userType: '',\r\n            phoneId: '',\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        profile()\r\n            .then(profile => this.setState({\r\n                                               profile: profile,\r\n                                               phoneId: ''\r\n                                           }))\r\n            .then(this.findAllPhones)\r\n    }\r\n\r\n    logout = () => logout()\r\n        .then(status => this.props.history.push(\"/\"))\r\n\r\n    findAllPhones = () =>\r\n        fetch(\"api/phones/find/all\")\r\n            .then(response => response.json())\r\n            .then(allPhones => this.setState({\r\n                                                 phones: allPhones\r\n                                                }))\r\n            .catch(() => console.log(\"Can’t access response. Blocked by browser?\"));\r\n\r\n\r\n    renderTableData() {\r\n        return this.state.phones.map((phones, index) => {\r\n            const {id, phone} = phones //destructuring\r\n            const person = phones.person.firstName + \" \" + phones.person.lastName\r\n            const personId = phones.person.id\r\n            return (\r\n                <tr key={id}>\r\n                    <td>{id}</td>\r\n                    <td>{phone}</td>\r\n                    <td>{personId}</td>\r\n                    <td>{person}</td>\r\n                </tr>\r\n            )\r\n        })\r\n    }\r\n\r\n    deletePhone = () =>\r\n        deletePersonPhone(this.state.phoneId)\r\n            .then(() => {\r\n                alert(\"Phone has been removed! Refresh page to see changes :)\")\r\n            })\r\n\r\n    validateDeletePhone = () => {\r\n        if (this.state.phoneId === '') {\r\n            alert(\"Phone ID cannot be empty :(\")\r\n            return false\r\n        } else {\r\n            this.deletePhone()\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <AdminNavBar/>\r\n                <hr/>\r\n                <div>\r\n                    <h2>PHONE INFORMATION</h2>\r\n                    For user: <b>{this.state.profile.username} {this.state.profile.userType}</b>\r\n                    <hr/>\r\n                    <table id='table001'>\r\n                        <tbody>\r\n                        <th>Id</th>\r\n                        <th>Phone Number</th>\r\n                        <th>Person ID</th>\r\n                        <th>Person Name</th>\r\n                        {this.renderTableData()}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n                <hr/>\r\n                <div>\r\n                    <input\r\n                        value={this.state.phoneId}\r\n                        onChange={(e) => this.setState({\r\n                                                           phoneId: e.target.value\r\n                                                       })}\r\n                        type={\"number\"}\r\n                        pattern=\"^[0-9]*$\"\r\n                        className={\"form-control\"}\r\n                        placeholder={\"ENTER PHONE ID TO REMOVE PHONE\"}/>\r\n                    <br/>\r\n\r\n                    <button\r\n                        // onClick={this.validatePatientProfile}\r\n                        onClick={this.validateDeletePhone}\r\n                        className=\"btn btn-primary btn-block\">\r\n                        DELETE PHONE\r\n                    </button>\r\n                </div>\r\n                <br/>\r\n                <button\r\n                    onClickCapture={this.logout}\r\n                    className={\"btn btn-danger\"}\r\n                    onClick={this.logout}>\r\n                    Logout\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport {deleteDoctor, logout, profile} from \"../../services/UserService\";\r\nimport AdminNavBar from \"../../react/AdminNavBar\";\r\n\r\nexport default class DoctorRemoveByAdmin extends React.Component {\r\n\r\n    state = {\r\n        doctors: [],\r\n        profile: {\r\n            username: '',\r\n            userType: '',\r\n            doctorId: '',\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        profile()\r\n            .then(profile => this.setState({\r\n                                               profile: profile,\r\n                                               doctorId: ''\r\n                                           }))\r\n            .then(this.findAllDoctors)\r\n    }\r\n\r\n    logout = () => logout()\r\n        .then(status => this.props.history.push(\"/\"))\r\n\r\n    findAllDoctors = () =>\r\n        fetch(\"api/doctors/find/all/\")\r\n            .then(response => response.json())\r\n            .then(allDoctors => this.setState({\r\n                                                  doctors: allDoctors\r\n                                              }))\r\n            .catch(() => alert(\"Can’t access response. Blocked by browser?\"));\r\n\r\n    renderTableData() {\r\n        return this.state.doctors.map((doctor, index) => {\r\n            const {\r\n                id, firstName, lastName, username, password, dateOfBirth,\r\n                status, department, joiningDate, salary, designation, education,\r\n                certification, gender\r\n            } = doctor //destructuring\r\n            return (\r\n                <tr key={id}>\r\n                    <td>{id}</td>\r\n                    <td>{firstName}</td>\r\n                    <td>{lastName}</td>\r\n                    <td>{username}</td>\r\n                    <td>{password}</td>\r\n                    <td>{dateOfBirth}</td>\r\n                    <td>{status}</td>\r\n                    <td>{department}</td>\r\n                    <td>{joiningDate}</td>\r\n                    <td>{designation}</td>\r\n                    <td>{education}</td>\r\n                </tr>\r\n            )\r\n        })\r\n    }\r\n\r\n    deleteDoctor = () =>\r\n        deleteDoctor(this.state.doctorId)\r\n            .then(() => {\r\n                alert(\"Doctor has been removed! Refresh page to see changes :)\")\r\n            })\r\n\r\n    validateDeleteDoctor = () => {\r\n        if (this.state.doctorId === '') {\r\n            alert(\"Doctor ID cannot be empty :(\")\r\n            return false\r\n        } else {\r\n            this.deleteDoctor()\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <AdminNavBar/>\r\n                <hr/>\r\n                <div>\r\n                    <h2>ALL DOCTOR INFORMATION</h2>\r\n                    For user: <b>{this.state.profile.username} {this.state.profile.userType}</b>\r\n                    <hr/>\r\n                    <table id='table001'>\r\n                        <tbody>\r\n                        <th>Id</th>\r\n                        <th>First Name</th>\r\n                        <th>Last Name</th>\r\n                        <th>Username</th>\r\n                        <th>Password</th>\r\n                        <th>DOB</th>\r\n                        <th>Status</th>\r\n                        <th>Department</th>\r\n                        <th>Joining Date</th>\r\n                        <th>Designation</th>\r\n                        <th>Education</th>\r\n                        {this.renderTableData()}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n                <hr/>\r\n                <br/>\r\n                <input\r\n                    value={this.state.doctorId}\r\n                    onChange={(e) => this.setState({\r\n                                                       doctorId: e.target.value\r\n                                                   })}\r\n\r\n                    className={\"form-control\"}\r\n                    placeholder={\"ENTER DOCTOR USERNAME TO REMOVE DOCTOR\"}/>\r\n                <br/>\r\n\r\n                <button\r\n                    // onClick={this.validatePatientProfile}\r\n                    onClick={this.validateDeleteDoctor}\r\n                    className=\"btn btn-primary btn-block\">\r\n                    DELETE DOCTOR\r\n                </button>\r\n                <br/>\r\n                <button\r\n                    onClickCapture={this.logout}\r\n                    className={\"btn btn-danger\"}\r\n                    onClick={this.logout}>\r\n                    Logout\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport {deletePatient, logout, profile} from \"../../services/UserService\";\r\nimport AdminNavBar from \"../../react/AdminNavBar\";\r\n\r\nexport default class PatientRemoveByAdmin extends React.Component {\r\n\r\n    state = {\r\n        patients: [],\r\n        profile: {\r\n            username: '',\r\n            userType: '',\r\n            patientId: '',\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        profile()\r\n            .then(profile => this.setState({\r\n                                               profile: profile,\r\n                                               patientId: ''\r\n                                           }))\r\n            .then(this.findAllPatients)\r\n    }\r\n\r\n    logout = () => logout()\r\n        .then(status => this.props.history.push(\"/\"))\r\n\r\n    findAllPatients = () =>\r\n        fetch(\"api/patients/find/all/\")\r\n            .then(response => response.json())\r\n            .then(allPatients => this.setState({\r\n                                                   patients: allPatients\r\n                                               }))\r\n            .catch(() => alert(\"Can’t access response. Blocked by browser?\"));\r\n\r\n    renderTableData() {\r\n        return this.state.patients.map((doctor, index) => {\r\n            const {\r\n                id, firstName, lastName, username, password, dateOfBirth,\r\n                dateOfAdmission, medicalHistory, gender\r\n            } = doctor //destructuring\r\n            return (\r\n                <tr key={id}>\r\n                    <td>{id}</td>\r\n                    <td>{firstName}</td>\r\n                    <td>{lastName}</td>\r\n                    <td>{username}</td>\r\n                    <td>{password}</td>\r\n                    <td>{dateOfBirth}</td>\r\n                    <td>{dateOfAdmission}</td>\r\n                    <td>{medicalHistory}</td>\r\n                    <td>{gender}</td>\r\n                </tr>\r\n            )\r\n        })\r\n    }\r\n\r\n    deletePatient = () =>\r\n        deletePatient(this.state.patientId)\r\n            .then(() => {\r\n                alert(\"Patient has been removed! Refresh page to see changes :)\")\r\n            })\r\n\r\n    validateDeletePatient = () => {\r\n        if (this.state.patientId === '') {\r\n            alert(\"Patient ID cannot be empty :(\")\r\n            return false\r\n        } else {\r\n            this.deletePatient()\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <AdminNavBar/>\r\n                <hr/>\r\n                <div>\r\n                    <h2>ALL PATIENT INFORMATION</h2>\r\n                    User: <b>{this.state.profile.username}</b>\r\n                    <hr/>\r\n                    <table id='table001'>\r\n                        <tbody>\r\n                        <th>Id</th>\r\n                        <th>First Name</th>\r\n                        <th>Last Name</th>\r\n                        <th>Username</th>\r\n                        <th>Password</th>\r\n                        <th>DOB</th>\r\n                        <th>DOA</th>\r\n                        <th>Med History</th>\r\n                        <th>Gender</th>\r\n                        {this.renderTableData()}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n                <hr/>\r\n                <br/>\r\n                <input\r\n                    value={this.state.patientId}\r\n                    onChange={(e) => this.setState({\r\n                                                       patientId: e.target.value\r\n                                                   })}\r\n\r\n                    className={\"form-control\"}\r\n                    placeholder={\"ENTER PATIENT USERNAME TO REMOVE PATIENT\"}/>\r\n                <br/>\r\n\r\n                <button\r\n                    // onClick={this.validatePatientProfile}\r\n                    onClick={this.validateDeletePatient}\r\n                    className=\"btn btn-primary btn-block\">\r\n                    DELETE PATIENT\r\n                </button>\r\n                <br/>\r\n                <button\r\n                    onClickCapture={this.logout}\r\n                    className={\"btn btn-danger\"}\r\n                    onClick={this.logout}>\r\n                    Logout\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\n\r\nimport {BrowserRouter as Router, Route} from \"react-router-dom\";\r\nimport Home from \"./components/Home\";\r\nimport Register from \"./RegisterPerson\";\r\nimport WhiteBoardApp from \"./components/WhiteBoardApp\";\r\nimport PatientProfile from \"./components/PatientProfile\";\r\nimport Login from \"./components/Login\";\r\nimport DoctorProfile from \"./components/DoctorProfile\";\r\nimport AdminStaffProfile from \"./components/AdminStaffProfile\";\r\nimport PatientProfileReg from \"./components/registrations/PatientProflieReg\";\r\nimport DoctorProfileReg from \"./components/registrations/DoctorProfileReg\";\r\nimport AdminStaffProfileReg from \"./components/registrations/AdminStaffProfileReg\";\r\nimport PersonAddressReg from \"./components/registrations/PersonAddressReg\";\r\nimport PersonPhoneReg from \"./components/registrations/PersonPhoneReg\";\r\nimport AppointmentReg from \"./components/registrations/AppointmentReg\";\r\nimport PrescriptionReg from \"./components/registrations/PrescriptionReg\";\r\nimport ViewPersonAddrPhone from \"./components/views/ViewPersonAddrPhone\";\r\nimport PatientAllergyReg from \"./components/registrations/PatientAllergyReg\";\r\nimport PatientInsuranceReg from \"./components/registrations/PatientInsuranceReg\";\r\nimport ViewPatientAppointments from \"./components/views/ViewPatientAppointments\";\r\nimport ViewAllergyPatientProfile from \"./components/views/ViewAllergyPatientProfile\";\r\nimport ViewDoctorAppointments from \"./components/views/ViewDoctorAppointments\";\r\nimport ViewPatientInsurance from \"./components/views/ViewPatientInsurance\";\r\nimport ViewDoctorPrescriptions from \"./components/views/ViewDoctorPrescriptions\";\r\nimport ViewPatientPrescriptions from \"./components/views/ViewPatientPrescriptions\";\r\nimport UpdatePatientPersonalData from \"./components/updates/UpdatePatientPersonalData\";\r\nimport DeletePersonAddress from \"./components/removes/DeletePersonAddress\";\r\nimport DeletePersonPhone from \"./components/removes/DeletePersonPhone\";\r\nimport UpdatePersonAddress from \"./components/updates/UpdatePersonAddress\";\r\nimport UpdatePersonPhone from \"./components/updates/UpdatePersonPhone\";\r\nimport UpdateDoctorPersonalData from \"./components/updates/UpdateDoctorPersonalData\";\r\nimport DeletePrescription from \"./components/removes/DeletePrescription\";\r\nimport UpdateAppointment from \"./components/updates/UpdateAppointment\";\r\nimport ViewAllDoctors from \"./components/viewAll/ViewAllDoctors\";\r\nimport UpdatePatientAllergy from \"./components/updates/UpdatePatientAllergy\";\r\nimport UpdatePatientInsurance from \"./components/updates/UpdatePatientInsurance\";\r\nimport ViewAllPatients from \"./components/viewAll/ViewAllPatients\";\r\nimport ViewAllAdminStaff from \"./components/viewAll/ViewAllAdminStaff\";\r\nimport SalaryReg from \"./components/registrations/SalaryReg\";\r\nimport ViewStaffSalary from \"./components/views/ViewStaffSalary\";\r\nimport DeletePatientAllergy from \"./components/removes/DeletePatientAllergy\";\r\nimport DeletePatientInsurance from \"./components/removes/DeletePatientInsurance\";\r\nimport DeleteDoctorAppointment from \"./components/removes/DeleteDoctorAppointment\";\r\nimport ViewAllAddresses from \"./components/viewAll/ViewAllAddresses\";\r\nimport ViewAllPhones from \"./components/viewAll/ViewAllPhones\";\r\nimport ViewAllAppointments from \"./components/viewAll/ViewAllAppointments\";\r\nimport ViewAllPrescriptions from \"./components/viewAll/ViewAllPrescriptions\";\r\nimport ViewAllSalaries from \"./components/viewAll/ViewAllSalaries\";\r\nimport ViewAllAllergies from \"./components/viewAll/ViewAllAllergies\";\r\nimport ViewAllInsurances from \"./components/viewAll/ViewAllInsurances\";\r\nimport DoctorUpdateByAdmin from \"./components/adminUpdates/DoctorUpdateByAdmin\";\r\nimport UpdateAdminStaffPersonalData from \"./components/updates/UpdateAdminStaffPersonalData\";\r\nimport PatientUpdateByAdmin from \"./components/adminUpdates/PatientUpdateByAdmin\";\r\nimport AdminStaffUpdateByAdmin from \"./components/adminUpdates/AdminStaffUpdateByAdmin\";\r\nimport UpdateAddressByAdmin from \"./components/adminUpdates/AddressUpdateByAdmin\";\r\nimport UpdatePhoneByAdmin from \"./components/adminUpdates/PhoneUpdateByAdmin\";\r\nimport AppointmentUpdateByAdmin from \"./components/adminUpdates/AppointmentUpdateByAdmin\";\r\nimport AllergyUpdateByAdmin from \"./components/adminUpdates/AllergyUpdateByAdmin\";\r\nimport InsuranceUpdateByAdmin from \"./components/adminUpdates/InsuranceUpdateByAdmin\";\r\nimport SalaryUpdateByAdmin from \"./components/adminUpdates/SalaryUpdateByAdmin\";\r\nimport AddressRemoveByAdmin from \"./components/adminRemoves/AddressRemoveByAdmin\";\r\nimport PrescriptionRemoveByAdmin from \"./components/adminRemoves/PrescriptionRemoveByAdmin\";\r\nimport AppointmentRemoveByAdmin from \"./components/adminRemoves/AppointmentRemoveByAdmin\";\r\nimport AllergyRemoveByAdmin from \"./components/adminRemoves/AllergyRemoveByAdmin\";\r\nimport InsuranceRemoveByAdmin from \"./components/adminRemoves/InsuranceRemoveByAdmin\";\r\nimport PhoneRemoveByAdmin from \"./components/adminRemoves/PhoneRemoveByAdmin\";\r\nimport DoctorRemoveByAdmin from \"./components/adminRemoves/DoctorRemoveByAdmin\";\r\nimport PatientRemoveByAdmin from \"./components/adminRemoves/PatientRemoveByAdmin\";\r\n\r\nclass AppManagerContainer extends React.Component {\r\n    state = {\r\n        layout: 'table',\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Router>\r\n                    <Route\r\n                        path=\"/\"\r\n                        exact={true}\r\n                        component={Home}\r\n                    />\r\n\r\n                    <Route\r\n                        path=\"/register\"\r\n                        exact={true}\r\n                        component={Register}\r\n                    />\r\n\r\n                    <Route\r\n                        path=\"/whiteboard\"\r\n                        exact={true}\r\n                        component={WhiteBoardApp}\r\n                    />\r\n\r\n                    <Route\r\n                        path=\"/login\"\r\n                        exact={true}\r\n                        component={Login}\r\n                    />\r\n\r\n                    <Route\r\n                        path=\"/patientProfile\"\r\n                        exact={true}\r\n                        component={PatientProfile}\r\n                    />\r\n\r\n                    <Route\r\n                        path=\"/doctorProfile\"\r\n                        exact={true}\r\n                        component={DoctorProfile}\r\n                    />\r\n\r\n                    <Route\r\n                        path=\"/adminStaffProfile\"\r\n                        exact={true}\r\n                        component={AdminStaffProfile}\r\n                    />\r\n\r\n                    <Route\r\n                        path=\"/patientProfileReg\"\r\n                        exact={true}\r\n                        component={PatientProfileReg}\r\n                    />\r\n\r\n                    <Route\r\n                        path=\"/doctorProfileReg\"\r\n                        exact={true}\r\n                        component={DoctorProfileReg}\r\n                    />\r\n\r\n                    <Route\r\n                        path=\"/adminStaffProfileReg\"\r\n                        exact={true}\r\n                        component={AdminStaffProfileReg}\r\n                    />\r\n\r\n                    <Route\r\n                        path=\"/addAddress\"\r\n                        exact={true}\r\n                        component={PersonAddressReg}\r\n                    />\r\n\r\n                    <Route\r\n                        path=\"/addPhone\"\r\n                        exact={true}\r\n                        component={PersonPhoneReg}\r\n                    />\r\n\r\n                    <Route\r\n                        path=\"/addAppointment\"\r\n                        exact={true}\r\n                        component={AppointmentReg}\r\n                    />\r\n\r\n                    <Route\r\n                        path=\"/addPrescription\"\r\n                        exact={true}\r\n                        component={PrescriptionReg}\r\n                    />\r\n\r\n                    <Route\r\n                        path=\"/viewAllergyPatientProfile\"\r\n                        exact={true}\r\n                        component={ViewAllergyPatientProfile}\r\n                    />\r\n\r\n                    <Route\r\n                        path=\"/viewPersonAddrPhone\"\r\n                        exact={true}\r\n                        component={ViewPersonAddrPhone}\r\n                    />\r\n\r\n                    <Route\r\n                        path=\"/viewDoctorAppointments\"\r\n                        exact={true}\r\n                        component={ViewDoctorAppointments}\r\n                    />\r\n\r\n                    <Route\r\n                        path=\"/viewDoctorPrescriptions\"\r\n                        exact={true}\r\n                        component={ViewDoctorPrescriptions}\r\n                    />\r\n\r\n                    <Route\r\n                        path=\"/viewPatientInsurances\"\r\n                        exact={true}\r\n                        component={ViewPatientInsurance}\r\n                    />\r\n\r\n\r\n                    <Route\r\n                        path=\"/addAllergy\"\r\n                        exact={true}\r\n                        component={PatientAllergyReg}\r\n                    />\r\n\r\n                    <Route\r\n                        path=\"/addInsurance\"\r\n                        exact={true}\r\n                        component={PatientInsuranceReg}\r\n                    />\r\n\r\n                    <Route\r\n                        path=\"/viewPatientAppointments\"\r\n                        exact={true}\r\n                        component={ViewPatientAppointments}\r\n                    />\r\n\r\n                    <Route\r\n                        path=\"/viewPatientPrescriptions\"\r\n                        exact={true}\r\n                        component={ViewPatientPrescriptions}\r\n                    />\r\n\r\n                    <Route\r\n                        path=\"/updatePatientPersonalProfile\"\r\n                        exact={true}\r\n                        component={UpdatePatientPersonalData}\r\n                    />\r\n\r\n                    <Route\r\n                        path=\"/updateDoctorPersonalProfile\"\r\n                        exact={true}\r\n                        component={UpdateDoctorPersonalData}\r\n                    />\r\n\r\n                    <Route\r\n                        path=\"/updateDoctorPersonalProfile\"\r\n                        exact={true}\r\n                        component={UpdateDoctorPersonalData}\r\n                    />\r\n\r\n                    <Route\r\n                        path=\"/updateAdminStaffPersonalProfile\"\r\n                        exact={true}\r\n                        component={UpdateAdminStaffPersonalData}\r\n                    />\r\n\r\n                    <Route\r\n                        path=\"/updatePersonPhone\"\r\n                        exact={true}\r\n                        component={UpdatePersonPhone}\r\n                    />\r\n\r\n                    <Route\r\n                        path=\"/updatePersonAddress\"\r\n                        exact={true}\r\n                        component={UpdatePersonAddress}\r\n                    />\r\n\r\n                    <Route\r\n                        path=\"/updateAppointment\"\r\n                        exact={true}\r\n                        component={UpdateAppointment}\r\n                    />\r\n\r\n                    <Route\r\n                        path=\"/deletePersonAddress\"\r\n                        exact={true}\r\n                        component={DeletePersonAddress}\r\n                    />\r\n\r\n                    <Route\r\n                        path=\"/deletePersonPhone\"\r\n                        exact={true}\r\n                        component={DeletePersonPhone}\r\n                    />\r\n\r\n                    <Route\r\n                        path=\"/deletePrescription\"\r\n                        exact={true}\r\n                        component={DeletePrescription}\r\n                    />\r\n\r\n                    <Route\r\n                        path=\"/viewAllDoctors\"\r\n                        exact={true}\r\n                        component={ViewAllDoctors}\r\n                    />\r\n\r\n                    <Route\r\n                        path=\"/viewAllAdminStaff\"\r\n                        exact={true}\r\n                        component={ViewAllAdminStaff}\r\n                    />\r\n\r\n                    <Route\r\n                        path=\"/viewAllPatients\"\r\n                        exact={true}\r\n                        component={ViewAllPatients}\r\n                    />\r\n\r\n                    <Route\r\n                        path=\"/updatePatientAllergy\"\r\n                        exact={true}\r\n                        component={UpdatePatientAllergy}\r\n                    />\r\n\r\n                    <Route\r\n                        path=\"/updatePatientInsurance\"\r\n                        exact={true}\r\n                        component={UpdatePatientInsurance}\r\n                    />\r\n\r\n                    <Route\r\n                        path=\"/addSalary\"\r\n                        exact={true}\r\n                        component={SalaryReg}\r\n                    />\r\n\r\n                    <Route\r\n                        path=\"/viewSalary\"\r\n                        exact={true}\r\n                        component={ViewStaffSalary}\r\n                    />\r\n\r\n                    <Route\r\n                        path=\"/deletePatientAllergy\"\r\n                        exact={true}\r\n                        component={DeletePatientAllergy}\r\n                    />\r\n\r\n                    <Route\r\n                        path=\"/deletePatientInsurance\"\r\n                        exact={true}\r\n                        component={DeletePatientInsurance}\r\n                    />\r\n\r\n                    <Route\r\n                        path=\"/deleteDoctorAppointment\"\r\n                        exact={true}\r\n                        component={DeleteDoctorAppointment}\r\n                    />\r\n\r\n                    <Route\r\n                        path=\"/viewAllAddresses\"\r\n                        exact={true}\r\n                        component={ViewAllAddresses}\r\n                    />\r\n\r\n                    <Route\r\n                        path=\"/viewAllPhones\"\r\n                        exact={true}\r\n                        component={ViewAllPhones}\r\n                    />\r\n\r\n                    <Route\r\n                        path=\"/viewAllAppointments\"\r\n                        exact={true}\r\n                        component={ViewAllAppointments}\r\n                    />\r\n\r\n                    <Route\r\n                        path=\"/viewAllPrescriptions\"\r\n                        exact={true}\r\n                        component={ViewAllPrescriptions}\r\n                    />\r\n\r\n                    <Route\r\n                        path=\"/viewAllSalaries\"\r\n                        exact={true}\r\n                        component={ViewAllSalaries}\r\n                    />\r\n\r\n                    <Route\r\n                        path=\"/viewAllAllergies\"\r\n                        exact={true}\r\n                        component={ViewAllAllergies}\r\n                    />\r\n\r\n                    <Route\r\n                        path=\"/viewAllInsurances\"\r\n                        exact={true}\r\n                        component={ViewAllInsurances}\r\n                    />\r\n\r\n                    <Route\r\n                        path=\"/updateDoctorByAdmin\"\r\n                        exact={true}\r\n                        component={DoctorUpdateByAdmin}\r\n                    />\r\n\r\n                    <Route\r\n                        path=\"/updatePatientByAdmin\"\r\n                        exact={true}\r\n                        component={PatientUpdateByAdmin}\r\n                    />\r\n\r\n                    <Route\r\n                        path=\"/updateAdminStaffByAdmin\"\r\n                        exact={true}\r\n                        component={AdminStaffUpdateByAdmin}\r\n                    />\r\n\r\n                    <Route\r\n                        path=\"/updateAddressByAdmin\"\r\n                        exact={true}\r\n                        component={UpdateAddressByAdmin}\r\n                    />\r\n\r\n                    <Route\r\n                        path=\"/updatePhoneByAdmin\"\r\n                        exact={true}\r\n                        component={UpdatePhoneByAdmin}\r\n                    />\r\n\r\n                    <Route\r\n                        path=\"/updateAppointmentByAdmin\"\r\n                        exact={true}\r\n                        component={AppointmentUpdateByAdmin}\r\n                    />\r\n\r\n                    <Route\r\n                        path=\"/updateAllergiesByAdmin\"\r\n                        exact={true}\r\n                        component={AllergyUpdateByAdmin}\r\n                    />\r\n\r\n                    <Route\r\n                        path=\"/updateInsurancesByAdmin\"\r\n                        exact={true}\r\n                        component={InsuranceUpdateByAdmin}\r\n                    />\r\n\r\n                    <Route\r\n                        path=\"/updateSalaryByAdmin\"\r\n                        exact={true}\r\n                        component={SalaryUpdateByAdmin}\r\n                    />\r\n\r\n                    <Route\r\n                        path=\"/removeAddressByAdmin\"\r\n                        exact={true}\r\n                        component={AddressRemoveByAdmin}\r\n                    />\r\n\r\n                    <Route\r\n                         path=\"/prescriptionRemoveByAdmin\"\r\n                         exact={true}\r\n                         component={PrescriptionRemoveByAdmin}\r\n                     />\r\n\r\n                    <Route\r\n                        path=\"/appointmentRemoveByAdmin\"\r\n                        exact={true}\r\n                        component={AppointmentRemoveByAdmin}\r\n                    />\r\n\r\n                    <Route\r\n                        path=\"/allergyRemoveByAdmin\"\r\n                        exact={true}\r\n                        component={AllergyRemoveByAdmin}\r\n                    />\r\n\r\n                    <Route\r\n                        path=\"/insuranceRemoveByAdmin\"\r\n                        exact={true}\r\n                        component={InsuranceRemoveByAdmin}\r\n                    />\r\n\r\n                    <Route\r\n                        path=\"/phoneRemoveByAdmin\"\r\n                        exact={true}\r\n                        component={PhoneRemoveByAdmin}\r\n                    />\r\n\r\n                    <Route\r\n                        path=\"/doctorRemoveByAdmin\"\r\n                        exact={true}\r\n                        component={DoctorRemoveByAdmin}\r\n                    />\r\n\r\n                    <Route\r\n                        path=\"/patientRemoveByAdmin\"\r\n                        exact={true}\r\n                        component={PatientRemoveByAdmin}\r\n                    />\r\n\r\n                </Router>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AppManagerContainer","import React, {Component} from 'react';\r\nimport './style.scss';\r\n\r\n\r\nexport default class DarkModeToggle extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        if (JSON.parse(localStorage.getItem('DARK_MODE')) === true) {\r\n            document.body.classList.add('dark-mode');\r\n        }\r\n\r\n        this.state = {\r\n            darkMode: JSON.parse(localStorage.getItem('DARK_MODE'))\r\n        }\r\n\r\n        this.handleModeChange = this.handleModeChange.bind(this);\r\n    }\r\n\r\n    handleModeChange() {\r\n        if (!this.state.darkMode) {\r\n            document.body.classList.add('dark-mode');\r\n        } else {\r\n            document.body.classList.remove('dark-mode');\r\n        }\r\n\r\n        this.setState({\r\n            darkMode: (!this.state.darkMode)\r\n        });\r\n        localStorage.setItem('DARK_MODE', !this.state.darkMode);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n\r\n            <button\r\n                style={{marginTop: 20}}\r\n                onClick={this.handleModeChange}\r\n                className={\"btn btn-warning\"}>\r\n                High Contrast</button>\r\n        );\r\n    }\r\n}","// import React from 'react';\n// import './App.scss';\n// import {BrowserRouter as Router, Link, Route, Switch, useParams, useRouteMatch} from \"react-router-dom\";\n// import RegisterPerson from \"./RegisterPerson\";\n// import Home from \"./Home\";\n//\n//\n\n\n// function App() {\n//     return (\n//         <Router>\n//             <div>\n//                 <ul>\n//                     <li>\n//                         <Link to=\"/\">Home</Link>\n//                     </li>\n//                     <li>\n//                         <Link to=\"/about\">About</Link>\n//                     </li>\n//                     <li>\n//                         <Link to=\"/topics\">Topics</Link>\n//                     </li>\n//                 </ul>\n//\n//                 <Switch>\n//                     <Route path=\"/about\">\n//                         <About/>\n//                     </Route>\n//                     <Route path=\"/topics\">\n//                         <Topics/>\n//                     </Route>\n//                     <Route path=\"/\">\n//                         <HomePage/>\n//                     </Route>\n//                 </Switch>\n//             </div>\n//         </Router>\n//     );\n// }\n//\n// function HomePage() {\n//     // let match = useRouteMatch();\n//\n//     return (\n//         <div>\n//             <Home/>\n//         {/*    <h2>Home</h2>*/}\n//         {/*    <ul>*/}\n//         {/*        <li>*/}\n//         {/*            <Link to={`/login`}>Login</Link>*/}\n//         {/*        </li>*/}\n//         {/*        <li>*/}\n//         {/*            <Link to={`/register`}>Register</Link>*/}\n//         {/*        </li>*/}\n//         {/*    </ul>*/}\n//\n//         {/*    <Switch>*/}\n//         {/*        <Route path={`/register`}>*/}\n//         {/*            <Register/>*/}\n//         {/*        </Route>*/}\n//         {/*        <Route path={match.path}>*/}\n//         {/*            <h3>Not a user yet?*/}\n//         {/*                Please Register.</h3>*/}\n//         {/*        </Route>*/}\n//         {/*    </Switch>*/}\n//         </div>\n//     );\n// }\n//\n//\n// function Register() {\n//     return (\n//         <div>\n//             <h2>Register</h2>\n//             <RegisterPerson/>\n//         </div>\n//     )\n//\n// }\n//\n// function About() {\n//     return <h2>About</h2>;\n// }\n//\n// function Topics() {\n//     let match = useRouteMatch();\n//\n//     return (\n//         <div>\n//             <h2>Topics</h2>\n//\n//             <ul>\n//                 <li>\n//                     <Link to={`${match.url}/components`}>Components</Link>\n//                 </li>\n//                 <li>\n//                     <Link to={`${match.url}/props-v-state`}>\n//                         Props v. State\n//                     </Link>\n//                 </li>\n//             </ul>\n//\n//             {/* The Topics page has its own <Switch> with more routes\n//           that build on the /topics URL path. You can think of the\n//           2nd <Route> here as an \"index\" page for all topics, or\n//           the page that is shown when no topic is selected */}\n//             <Switch>\n//                 <Route path={`${match.path}/:topicId`}>\n//                     <Topic/>\n//                 </Route>\n//                 <Route path={match.path}>\n//                     <h3>Please select a topic.</h3>\n//                 </Route>\n//             </Switch>\n//         </div>\n//     );\n// }\n//\n// function Topic() {\n//     let {topicId} = useParams();\n//     return <h3>Requested topic ID: {topicId}</h3>;\n// }\n\n// function App() {\n//   return (\n//       <WhiteBoardApp/>\n//     // <div className=\"App\">\n//     //   <header className=\"App-header\">\n//     //     <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//     //     <p>\n//     //       Edit <code>src/App.js</code> and save to reload.\n//     //     </p>\n//     //     <a\n//     //       className=\"App-link\"\n//     //       href=\"https://reactjs.org\"\n//     //       target=\"_blank\"\n//     //       rel=\"noopener noreferrer\"\n//     //     >\n//     //       Learn React\n//     //     </a>\n//     //   </header>\n//     // </div>\n//   );\n// }\n\nimport React from 'react';\nimport './App.scss';\nimport AppManagerContainer from \"./AppManagerContainer\"\nimport 'bootstrap/dist/css/bootstrap.css'\nimport 'react-notifications/lib/notifications.css';\nimport DarkModeToggle from \"./DarkModeToggle\";\n\nconst App = () =>\n    <div className={`container`}>\n        <AppManagerContainer/>\n        <DarkModeToggle/>\n    </div>\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}